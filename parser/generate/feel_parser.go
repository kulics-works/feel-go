// Code generated from FeelParser.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // FeelParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 104, 2469,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 3, 2, 6, 2, 380, 10, 2, 13, 2, 14, 2, 381,
	3, 3, 7, 3, 385, 10, 3, 12, 3, 14, 3, 388, 11, 3, 3, 3, 5, 3, 391, 10,
	3, 3, 3, 3, 3, 7, 3, 395, 10, 3, 12, 3, 14, 3, 398, 11, 3, 3, 3, 7, 3,
	401, 10, 3, 12, 3, 14, 3, 404, 11, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3,
	5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 421, 10,
	5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 7, 6, 428, 10, 6, 12, 6, 14, 6, 431, 11,
	6, 3, 6, 3, 6, 3, 6, 3, 7, 5, 7, 437, 10, 7, 3, 7, 3, 7, 5, 7, 441, 10,
	7, 3, 7, 5, 7, 444, 10, 7, 3, 7, 5, 7, 447, 10, 7, 3, 7, 3, 7, 5, 7, 451,
	10, 7, 3, 7, 5, 7, 454, 10, 7, 3, 7, 5, 7, 457, 10, 7, 3, 7, 3, 7, 3, 8,
	3, 8, 5, 8, 463, 10, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 5, 9, 471,
	10, 9, 3, 9, 3, 9, 7, 9, 475, 10, 9, 12, 9, 14, 9, 478, 11, 9, 3, 9, 3,
	9, 3, 9, 3, 10, 3, 10, 3, 11, 5, 11, 486, 10, 11, 3, 11, 3, 11, 5, 11,
	490, 10, 11, 3, 11, 3, 11, 7, 11, 494, 10, 11, 12, 11, 14, 11, 497, 11,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 7, 11, 504, 10, 11, 12, 11, 14,
	11, 507, 11, 11, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 5, 12, 515,
	10, 12, 3, 12, 5, 12, 518, 10, 12, 3, 12, 3, 12, 3, 13, 5, 13, 523, 10,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 532, 10, 13,
	5, 13, 534, 10, 13, 3, 13, 3, 13, 3, 14, 5, 14, 539, 10, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 547, 10, 14, 5, 14, 549, 10, 14,
	3, 14, 3, 14, 3, 15, 5, 15, 554, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 5, 15, 562, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15,
	569, 10, 15, 3, 15, 5, 15, 572, 10, 15, 3, 15, 7, 15, 575, 10, 15, 12,
	15, 14, 15, 578, 11, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 584, 10, 15,
	12, 15, 14, 15, 587, 11, 15, 3, 15, 3, 15, 3, 15, 3, 16, 5, 16, 593, 10,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 601, 10, 16, 3, 16,
	5, 16, 604, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 610, 10, 16, 3,
	16, 3, 16, 3, 17, 3, 17, 7, 17, 616, 10, 17, 12, 17, 14, 17, 619, 11, 17,
	3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 627, 10, 18, 3, 19, 5,
	19, 630, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19,
	639, 10, 19, 5, 19, 641, 10, 19, 3, 19, 3, 19, 3, 20, 5, 20, 646, 10, 20,
	3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 654, 10, 20, 5, 20, 656,
	10, 20, 3, 20, 3, 20, 3, 21, 5, 21, 661, 10, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 5, 21, 669, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	5, 21, 676, 10, 21, 3, 21, 5, 21, 679, 10, 21, 3, 21, 7, 21, 682, 10, 21,
	12, 21, 14, 21, 685, 11, 21, 3, 21, 3, 21, 3, 21, 3, 21, 7, 21, 691, 10,
	21, 12, 21, 14, 21, 694, 11, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 5,
	22, 701, 10, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 707, 10, 22, 5, 22,
	709, 10, 22, 3, 22, 3, 22, 7, 22, 713, 10, 22, 12, 22, 14, 22, 716, 11,
	22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 5, 23, 729, 10, 23, 3, 24, 3, 24, 3, 24, 3, 25, 5, 25, 735, 10,
	25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 742, 10, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 5, 25, 748, 10, 25, 5, 25, 750, 10, 25, 3, 25, 3, 25, 3,
	25, 5, 25, 755, 10, 25, 3, 25, 3, 25, 5, 25, 759, 10, 25, 3, 25, 3, 25,
	7, 25, 763, 10, 25, 12, 25, 14, 25, 766, 11, 25, 3, 25, 3, 25, 3, 26, 5,
	26, 771, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26,
	780, 10, 26, 5, 26, 782, 10, 26, 3, 26, 3, 26, 3, 27, 5, 27, 787, 10, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 795, 10, 27, 5, 27, 797,
	10, 27, 3, 27, 3, 27, 3, 28, 5, 28, 802, 10, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 5, 28, 810, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	5, 28, 817, 10, 28, 3, 28, 5, 28, 820, 10, 28, 3, 28, 7, 28, 823, 10, 28,
	12, 28, 14, 28, 826, 11, 28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 832, 10,
	28, 12, 28, 14, 28, 835, 11, 28, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 5, 29, 845, 10, 29, 3, 29, 3, 29, 6, 29, 849, 10, 29,
	13, 29, 14, 29, 850, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31,
	870, 10, 31, 3, 31, 3, 31, 3, 31, 5, 31, 875, 10, 31, 3, 31, 3, 31, 3,
	32, 5, 32, 880, 10, 32, 3, 32, 3, 32, 5, 32, 884, 10, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 893, 10, 32, 5, 32, 895, 10,
	32, 3, 32, 3, 32, 3, 33, 5, 33, 900, 10, 33, 3, 33, 3, 33, 5, 33, 904,
	10, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 912, 10, 33, 5,
	33, 914, 10, 33, 3, 33, 3, 33, 3, 34, 5, 34, 919, 10, 34, 3, 34, 3, 34,
	5, 34, 923, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 931,
	10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 938, 10, 34, 3, 34, 5,
	34, 941, 10, 34, 3, 34, 7, 34, 944, 10, 34, 12, 34, 14, 34, 947, 11, 34,
	3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 953, 10, 34, 12, 34, 14, 34, 956, 11,
	34, 3, 34, 3, 34, 3, 34, 3, 35, 5, 35, 962, 10, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 3, 35, 5, 35, 970, 10, 35, 3, 35, 5, 35, 973, 10, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 5, 36, 982, 10, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 5, 36, 988, 10, 36, 5, 36, 990, 10, 36, 3, 36, 3,
	36, 7, 36, 994, 10, 36, 12, 36, 14, 36, 997, 11, 36, 3, 36, 3, 36, 3, 37,
	3, 37, 3, 37, 3, 37, 5, 37, 1005, 10, 37, 3, 38, 5, 38, 1008, 10, 38, 3,
	38, 3, 38, 5, 38, 1012, 10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38,
	1019, 10, 38, 5, 38, 1021, 10, 38, 3, 38, 3, 38, 3, 39, 5, 39, 1026, 10,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1034, 10, 39, 3, 39,
	3, 39, 3, 39, 3, 39, 5, 39, 1040, 10, 39, 3, 39, 5, 39, 1043, 10, 39, 3,
	39, 7, 39, 1046, 10, 39, 12, 39, 14, 39, 1049, 11, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1061, 10, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 1068, 10, 40, 3, 40, 5, 40, 1071,
	10, 40, 3, 40, 7, 40, 1074, 10, 40, 12, 40, 14, 40, 1077, 11, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 7, 40, 1083, 10, 40, 12, 40, 14, 40, 1086, 11, 40,
	3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 5, 41, 1093, 10, 41, 3, 41, 3, 41, 3,
	42, 3, 42, 5, 42, 1099, 10, 42, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43, 3, 43,
	3, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 45, 5, 45, 1113, 10, 45, 3, 45, 3,
	45, 3, 45, 7, 45, 1118, 10, 45, 12, 45, 14, 45, 1121, 11, 45, 3, 46, 5,
	46, 1124, 10, 46, 3, 46, 3, 46, 3, 46, 7, 46, 1129, 10, 46, 12, 46, 14,
	46, 1132, 11, 46, 3, 47, 5, 47, 1135, 10, 47, 3, 47, 3, 47, 5, 47, 1139,
	10, 47, 3, 47, 5, 47, 1142, 10, 47, 3, 47, 3, 47, 3, 47, 5, 47, 1147, 10,
	47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 5, 48, 1172, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 6, 49,
	1178, 10, 49, 13, 49, 14, 49, 1179, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50,
	3, 50, 7, 50, 1188, 10, 50, 12, 50, 14, 50, 1191, 11, 50, 3, 50, 3, 50,
	7, 50, 1195, 10, 50, 12, 50, 14, 50, 1198, 11, 50, 3, 50, 3, 50, 3, 51,
	3, 51, 3, 51, 3, 51, 5, 51, 1206, 10, 51, 3, 51, 5, 51, 1209, 10, 51, 3,
	52, 3, 52, 7, 52, 1213, 10, 52, 12, 52, 14, 52, 1216, 11, 52, 3, 52, 3,
	52, 3, 52, 3, 52, 3, 52, 7, 52, 1223, 10, 52, 12, 52, 14, 52, 1226, 11,
	52, 3, 52, 3, 52, 5, 52, 1230, 10, 52, 3, 53, 3, 53, 3, 53, 7, 53, 1235,
	10, 53, 12, 53, 14, 53, 1238, 11, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54,
	3, 54, 7, 54, 1246, 10, 54, 12, 54, 14, 54, 1249, 11, 54, 3, 54, 3, 54,
	3, 55, 3, 55, 3, 55, 7, 55, 1256, 10, 55, 12, 55, 14, 55, 1259, 11, 55,
	3, 55, 3, 55, 3, 56, 3, 56, 3, 56, 5, 56, 1266, 10, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 7, 56, 1272, 10, 56, 12, 56, 14, 56, 1275, 11, 56, 3, 56, 3,
	56, 5, 56, 1279, 10, 56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	5, 57, 1288, 10, 57, 3, 57, 3, 57, 5, 57, 1292, 10, 57, 3, 57, 3, 57, 3,
	57, 3, 57, 7, 57, 1298, 10, 57, 12, 57, 14, 57, 1301, 11, 57, 3, 57, 3,
	57, 5, 57, 1305, 10, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 7, 58,
	1313, 10, 58, 12, 58, 14, 58, 1316, 11, 58, 3, 58, 3, 58, 5, 58, 1320,
	10, 58, 3, 58, 3, 58, 3, 59, 3, 59, 3, 59, 7, 59, 1327, 10, 59, 12, 59,
	14, 59, 1330, 11, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 61,
	3, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 7, 62, 1345, 10, 62, 12, 62,
	14, 62, 1348, 11, 62, 3, 62, 3, 62, 7, 62, 1352, 10, 62, 12, 62, 14, 62,
	1355, 11, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 7, 62, 1363, 10,
	62, 12, 62, 14, 62, 1366, 11, 62, 3, 62, 3, 62, 6, 62, 1370, 10, 62, 13,
	62, 14, 62, 1371, 3, 62, 3, 62, 5, 62, 1376, 10, 62, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 7, 63, 1383, 10, 63, 12, 63, 14, 63, 1386, 11, 63, 3, 63,
	5, 63, 1389, 10, 63, 3, 63, 3, 63, 3, 63, 3, 63, 7, 63, 1395, 10, 63, 12,
	63, 14, 63, 1398, 11, 63, 3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3,
	64, 5, 64, 1407, 10, 64, 3, 64, 3, 64, 7, 64, 1411, 10, 64, 12, 64, 14,
	64, 1414, 11, 64, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 7, 65, 1421, 10, 65,
	12, 65, 14, 65, 1424, 11, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1439, 10, 67, 3,
	67, 3, 67, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 3, 69,
	3, 70, 3, 70, 3, 70, 3, 70, 7, 70, 1456, 10, 70, 12, 70, 14, 70, 1459,
	11, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 71, 3, 71, 7, 71,
	1469, 10, 71, 12, 71, 14, 71, 1472, 11, 71, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3,
	74, 3, 75, 3, 75, 3, 75, 5, 75, 1492, 10, 75, 3, 75, 5, 75, 1495, 10, 75,
	3, 76, 3, 76, 5, 76, 1499, 10, 76, 3, 76, 5, 76, 1502, 10, 76, 3, 77, 3,
	77, 3, 77, 3, 77, 7, 77, 1508, 10, 77, 12, 77, 14, 77, 1511, 11, 77, 3,
	78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78,
	3, 78, 5, 78, 1525, 10, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79,
	3, 79, 3, 79, 3, 79, 5, 79, 1547, 10, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79,
	3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79,
	3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 7, 79, 1601, 10, 79, 12, 79, 14,
	79, 1604, 11, 79, 3, 80, 3, 80, 5, 80, 1608, 10, 80, 3, 80, 3, 80, 3, 80,
	3, 80, 3, 80, 3, 80, 5, 80, 1616, 10, 80, 3, 80, 3, 80, 5, 80, 1620, 10,
	80, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 7, 81, 1627, 10, 81, 12, 81, 14,
	81, 1630, 11, 81, 5, 81, 1632, 10, 81, 3, 81, 3, 81, 3, 82, 3, 82, 3, 82,
	3, 82, 7, 82, 1640, 10, 82, 12, 82, 14, 82, 1643, 11, 82, 3, 83, 3, 83,
	3, 84, 3, 84, 3, 85, 3, 85, 5, 85, 1651, 10, 85, 3, 85, 5, 85, 1654, 10,
	85, 6, 85, 1656, 10, 85, 13, 85, 14, 85, 1657, 3, 86, 3, 86, 3, 86, 3,
	86, 5, 86, 1664, 10, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1669, 10, 86, 3, 87,
	3, 87, 3, 87, 5, 87, 1674, 10, 87, 3, 88, 3, 88, 5, 88, 1678, 10, 88, 3,
	89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 5, 90, 1686, 10, 90, 3, 91, 3, 91,
	3, 91, 3, 92, 3, 92, 3, 93, 3, 93, 3, 93, 5, 93, 1696, 10, 93, 3, 93, 3,
	93, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 5, 94, 1705, 10, 94, 3, 94, 3, 94,
	3, 95, 3, 95, 3, 95, 5, 95, 1712, 10, 95, 3, 95, 5, 95, 1715, 10, 95, 3,
	95, 5, 95, 1718, 10, 95, 3, 95, 3, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 97,
	3, 97, 3, 97, 3, 98, 3, 98, 3, 98, 3, 99, 3, 99, 3, 99, 7, 99, 1735, 10,
	99, 12, 99, 14, 99, 1738, 11, 99, 3, 99, 3, 99, 3, 100, 3, 100, 3, 100,
	3, 100, 3, 101, 3, 101, 3, 101, 7, 101, 1749, 10, 101, 12, 101, 14, 101,
	1752, 11, 101, 3, 101, 3, 101, 3, 102, 3, 102, 3, 102, 7, 102, 1759, 10,
	102, 12, 102, 14, 102, 1762, 11, 102, 3, 102, 3, 102, 3, 103, 3, 103, 3,
	103, 3, 103, 7, 103, 1770, 10, 103, 12, 103, 14, 103, 1773, 11, 103, 3,
	103, 3, 103, 3, 103, 3, 104, 3, 104, 3, 104, 3, 104, 7, 104, 1782, 10,
	104, 12, 104, 14, 104, 1785, 11, 104, 3, 104, 3, 104, 3, 104, 3, 105, 3,
	105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 106, 3, 106, 3, 106, 5, 106, 1799,
	10, 106, 3, 107, 3, 107, 3, 107, 3, 107, 3, 108, 3, 108, 3, 108, 3, 109,
	3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 5, 110, 1814, 10, 110, 7, 110,
	1816, 10, 110, 12, 110, 14, 110, 1819, 11, 110, 3, 110, 3, 110, 3, 111,
	3, 111, 3, 111, 5, 111, 1826, 10, 111, 3, 111, 3, 111, 7, 111, 1830, 10,
	111, 12, 111, 14, 111, 1833, 11, 111, 3, 112, 7, 112, 1836, 10, 112, 12,
	112, 14, 112, 1839, 11, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3,
	113, 5, 113, 1847, 10, 113, 3, 114, 7, 114, 1850, 10, 114, 12, 114, 14,
	114, 1853, 11, 114, 3, 115, 3, 115, 5, 115, 1857, 10, 115, 3, 115, 3, 115,
	7, 115, 1861, 10, 115, 12, 115, 14, 115, 1864, 11, 115, 3, 115, 3, 115,
	3, 115, 3, 115, 3, 115, 5, 115, 1871, 10, 115, 3, 115, 3, 115, 7, 115,
	1875, 10, 115, 12, 115, 14, 115, 1878, 11, 115, 3, 115, 7, 115, 1881, 10,
	115, 12, 115, 14, 115, 1884, 11, 115, 3, 115, 3, 115, 5, 115, 1888, 10,
	115, 3, 116, 3, 116, 3, 116, 3, 116, 7, 116, 1894, 10, 116, 12, 116, 14,
	116, 1897, 11, 116, 3, 117, 3, 117, 3, 118, 3, 118, 3, 118, 3, 118, 7,
	118, 1905, 10, 118, 12, 118, 14, 118, 1908, 11, 118, 3, 118, 3, 118, 3,
	118, 3, 119, 3, 119, 5, 119, 1915, 10, 119, 3, 119, 3, 119, 3, 119, 3,
	120, 3, 120, 3, 120, 3, 120, 5, 120, 1924, 10, 120, 3, 120, 5, 120, 1927,
	10, 120, 3, 120, 7, 120, 1930, 10, 120, 12, 120, 14, 120, 1933, 11, 120,
	3, 120, 3, 120, 3, 120, 3, 120, 7, 120, 1939, 10, 120, 12, 120, 14, 120,
	1942, 11, 120, 3, 120, 3, 120, 3, 121, 3, 121, 3, 121, 3, 122, 3, 122,
	3, 122, 3, 123, 3, 123, 3, 123, 3, 124, 3, 124, 3, 124, 5, 124, 1958, 10,
	124, 3, 124, 7, 124, 1961, 10, 124, 12, 124, 14, 124, 1964, 11, 124, 3,
	124, 3, 124, 5, 124, 1968, 10, 124, 3, 124, 3, 124, 3, 125, 3, 125, 3,
	125, 5, 125, 1975, 10, 125, 3, 125, 3, 125, 3, 125, 3, 126, 3, 126, 3,
	126, 5, 126, 1983, 10, 126, 5, 126, 1985, 10, 126, 3, 126, 3, 126, 5, 126,
	1989, 10, 126, 3, 127, 3, 127, 7, 127, 1993, 10, 127, 12, 127, 14, 127,
	1996, 11, 127, 3, 127, 3, 127, 3, 128, 3, 128, 3, 128, 7, 128, 2003, 10,
	128, 12, 128, 14, 128, 2006, 11, 128, 3, 128, 3, 128, 3, 128, 3, 129, 3,
	129, 3, 129, 3, 129, 3, 129, 7, 129, 2016, 10, 129, 12, 129, 14, 129, 2019,
	11, 129, 3, 129, 3, 129, 3, 129, 3, 130, 3, 130, 3, 130, 7, 130, 2027,
	10, 130, 12, 130, 14, 130, 2030, 11, 130, 3, 130, 3, 130, 3, 130, 3, 131,
	3, 131, 3, 131, 3, 131, 3, 131, 6, 131, 2040, 10, 131, 13, 131, 14, 131,
	2041, 3, 132, 3, 132, 3, 132, 3, 132, 7, 132, 2048, 10, 132, 12, 132, 14,
	132, 2051, 11, 132, 3, 132, 3, 132, 7, 132, 2055, 10, 132, 12, 132, 14,
	132, 2058, 11, 132, 3, 132, 3, 132, 3, 132, 3, 133, 3, 133, 3, 133, 5,
	133, 2066, 10, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 7, 133, 2073,
	10, 133, 12, 133, 14, 133, 2076, 11, 133, 3, 133, 3, 133, 3, 133, 5, 133,
	2081, 10, 133, 3, 134, 3, 134, 3, 134, 3, 134, 5, 134, 2087, 10, 134, 3,
	134, 3, 134, 5, 134, 2091, 10, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3,
	134, 7, 134, 2098, 10, 134, 12, 134, 14, 134, 2101, 11, 134, 3, 134, 3,
	134, 3, 134, 5, 134, 2106, 10, 134, 3, 135, 3, 135, 3, 135, 7, 135, 2111,
	10, 135, 12, 135, 14, 135, 2114, 11, 135, 3, 135, 3, 135, 3, 135, 3, 136,
	3, 136, 3, 136, 3, 136, 7, 136, 2123, 10, 136, 12, 136, 14, 136, 2126,
	11, 136, 3, 136, 3, 136, 3, 136, 7, 136, 2131, 10, 136, 12, 136, 14, 136,
	2134, 11, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136, 7, 136,
	2142, 10, 136, 12, 136, 14, 136, 2145, 11, 136, 3, 136, 3, 136, 3, 136,
	6, 136, 2150, 10, 136, 13, 136, 14, 136, 2151, 5, 136, 2154, 10, 136, 3,
	137, 3, 137, 3, 137, 3, 137, 5, 137, 2160, 10, 137, 3, 137, 3, 137, 7,
	137, 2164, 10, 137, 12, 137, 14, 137, 2167, 11, 137, 3, 137, 3, 137, 3,
	137, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3,
	138, 5, 138, 2181, 10, 138, 3, 139, 3, 139, 3, 139, 7, 139, 2186, 10, 139,
	12, 139, 14, 139, 2189, 11, 139, 3, 139, 3, 139, 3, 140, 3, 140, 3, 141,
	3, 141, 3, 141, 3, 141, 7, 141, 2199, 10, 141, 12, 141, 14, 141, 2202,
	11, 141, 3, 141, 3, 141, 3, 141, 3, 142, 3, 142, 3, 142, 3, 142, 7, 142,
	2211, 10, 142, 12, 142, 14, 142, 2214, 11, 142, 3, 142, 3, 142, 3, 143,
	3, 143, 3, 144, 3, 144, 7, 144, 2222, 10, 144, 12, 144, 14, 144, 2225,
	11, 144, 3, 144, 3, 144, 3, 144, 7, 144, 2230, 10, 144, 12, 144, 14, 144,
	2233, 11, 144, 3, 144, 3, 144, 7, 144, 2237, 10, 144, 12, 144, 14, 144,
	2240, 11, 144, 3, 144, 3, 144, 3, 145, 3, 145, 3, 146, 3, 146, 3, 147,
	3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147,
	3, 147, 5, 147, 2259, 10, 147, 3, 148, 3, 148, 5, 148, 2263, 10, 148, 3,
	149, 3, 149, 3, 149, 3, 150, 3, 150, 3, 150, 3, 150, 3, 150, 3, 151, 3,
	151, 3, 151, 3, 151, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 153, 3,
	153, 3, 153, 3, 153, 3, 153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3,
	155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 156, 3, 156, 3, 156, 3, 156, 3,
	156, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 2308, 10,
	157, 3, 158, 3, 158, 3, 158, 3, 158, 5, 158, 2314, 10, 158, 3, 158, 5,
	158, 2317, 10, 158, 3, 158, 7, 158, 2320, 10, 158, 12, 158, 14, 158, 2323,
	11, 158, 3, 158, 3, 158, 3, 158, 3, 159, 3, 159, 3, 160, 5, 160, 2331,
	10, 160, 3, 160, 3, 160, 3, 160, 7, 160, 2336, 10, 160, 12, 160, 14, 160,
	2339, 11, 160, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161,
	3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161,
	5, 161, 2357, 10, 161, 3, 162, 3, 162, 3, 163, 3, 163, 5, 163, 2363, 10,
	163, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 5, 164, 2370, 10, 164, 3,
	164, 5, 164, 2373, 10, 164, 3, 165, 3, 165, 3, 166, 3, 166, 3, 167, 3,
	167, 3, 168, 3, 168, 3, 169, 3, 169, 3, 170, 3, 170, 3, 171, 3, 171, 3,
	172, 3, 172, 5, 172, 2391, 10, 172, 3, 173, 3, 173, 5, 173, 2395, 10, 173,
	3, 174, 3, 174, 5, 174, 2399, 10, 174, 3, 175, 3, 175, 5, 175, 2403, 10,
	175, 3, 176, 3, 176, 5, 176, 2407, 10, 176, 3, 177, 3, 177, 5, 177, 2411,
	10, 177, 3, 178, 3, 178, 5, 178, 2415, 10, 178, 3, 179, 3, 179, 3, 180,
	3, 180, 3, 181, 3, 181, 3, 181, 5, 181, 2424, 10, 181, 3, 182, 3, 182,
	3, 183, 3, 183, 7, 183, 2430, 10, 183, 12, 183, 14, 183, 2433, 11, 183,
	3, 184, 3, 184, 7, 184, 2437, 10, 184, 12, 184, 14, 184, 2440, 11, 184,
	3, 185, 7, 185, 2443, 10, 185, 12, 185, 14, 185, 2446, 11, 185, 3, 185,
	3, 185, 3, 186, 3, 186, 3, 187, 3, 187, 3, 188, 3, 188, 7, 188, 2456, 10,
	188, 12, 188, 14, 188, 2459, 11, 188, 3, 189, 7, 189, 2462, 10, 189, 12,
	189, 14, 189, 2465, 11, 189, 3, 189, 3, 189, 3, 189, 2, 3, 156, 190, 2,
	4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76,
	78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110,
	112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140,
	142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170,
	172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200,
	202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230,
	232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260,
	262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290,
	292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320,
	322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350,
	352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 2, 13,
	4, 2, 23, 23, 25, 25, 3, 2, 20, 21, 3, 2, 15, 18, 3, 2, 83, 86, 4, 2, 10,
	13, 36, 37, 3, 2, 56, 57, 4, 2, 3, 8, 29, 29, 3, 2, 51, 52, 3, 2, 53, 55,
	3, 2, 90, 91, 4, 2, 38, 38, 96, 96, 2, 2682, 2, 379, 3, 2, 2, 2, 4, 386,
	3, 2, 2, 2, 6, 405, 3, 2, 2, 2, 8, 420, 3, 2, 2, 2, 10, 422, 3, 2, 2, 2,
	12, 436, 3, 2, 2, 2, 14, 460, 3, 2, 2, 2, 16, 468, 3, 2, 2, 2, 18, 482,
	3, 2, 2, 2, 20, 485, 3, 2, 2, 2, 22, 511, 3, 2, 2, 2, 24, 522, 3, 2, 2,
	2, 26, 538, 3, 2, 2, 2, 28, 553, 3, 2, 2, 2, 30, 592, 3, 2, 2, 2, 32, 613,
	3, 2, 2, 2, 34, 626, 3, 2, 2, 2, 36, 629, 3, 2, 2, 2, 38, 645, 3, 2, 2,
	2, 40, 660, 3, 2, 2, 2, 42, 698, 3, 2, 2, 2, 44, 728, 3, 2, 2, 2, 46, 730,
	3, 2, 2, 2, 48, 734, 3, 2, 2, 2, 50, 770, 3, 2, 2, 2, 52, 786, 3, 2, 2,
	2, 54, 801, 3, 2, 2, 2, 56, 839, 3, 2, 2, 2, 58, 855, 3, 2, 2, 2, 60, 869,
	3, 2, 2, 2, 62, 879, 3, 2, 2, 2, 64, 899, 3, 2, 2, 2, 66, 918, 3, 2, 2,
	2, 68, 961, 3, 2, 2, 2, 70, 978, 3, 2, 2, 2, 72, 1004, 3, 2, 2, 2, 74,
	1007, 3, 2, 2, 2, 76, 1025, 3, 2, 2, 2, 78, 1060, 3, 2, 2, 2, 80, 1090,
	3, 2, 2, 2, 82, 1096, 3, 2, 2, 2, 84, 1102, 3, 2, 2, 2, 86, 1107, 3, 2,
	2, 2, 88, 1112, 3, 2, 2, 2, 90, 1123, 3, 2, 2, 2, 92, 1134, 3, 2, 2, 2,
	94, 1171, 3, 2, 2, 2, 96, 1173, 3, 2, 2, 2, 98, 1183, 3, 2, 2, 2, 100,
	1208, 3, 2, 2, 2, 102, 1229, 3, 2, 2, 2, 104, 1231, 3, 2, 2, 2, 106, 1241,
	3, 2, 2, 2, 108, 1252, 3, 2, 2, 2, 110, 1262, 3, 2, 2, 2, 112, 1282, 3,
	2, 2, 2, 114, 1308, 3, 2, 2, 2, 116, 1323, 3, 2, 2, 2, 118, 1333, 3, 2,
	2, 2, 120, 1337, 3, 2, 2, 2, 122, 1375, 3, 2, 2, 2, 124, 1377, 3, 2, 2,
	2, 126, 1406, 3, 2, 2, 2, 128, 1417, 3, 2, 2, 2, 130, 1427, 3, 2, 2, 2,
	132, 1432, 3, 2, 2, 2, 134, 1442, 3, 2, 2, 2, 136, 1447, 3, 2, 2, 2, 138,
	1451, 3, 2, 2, 2, 140, 1464, 3, 2, 2, 2, 142, 1477, 3, 2, 2, 2, 144, 1482,
	3, 2, 2, 2, 146, 1485, 3, 2, 2, 2, 148, 1494, 3, 2, 2, 2, 150, 1501, 3,
	2, 2, 2, 152, 1503, 3, 2, 2, 2, 154, 1524, 3, 2, 2, 2, 156, 1546, 3, 2,
	2, 2, 158, 1605, 3, 2, 2, 2, 160, 1621, 3, 2, 2, 2, 162, 1635, 3, 2, 2,
	2, 164, 1644, 3, 2, 2, 2, 166, 1646, 3, 2, 2, 2, 168, 1655, 3, 2, 2, 2,
	170, 1659, 3, 2, 2, 2, 172, 1670, 3, 2, 2, 2, 174, 1677, 3, 2, 2, 2, 176,
	1679, 3, 2, 2, 2, 178, 1682, 3, 2, 2, 2, 180, 1687, 3, 2, 2, 2, 182, 1690,
	3, 2, 2, 2, 184, 1692, 3, 2, 2, 2, 186, 1699, 3, 2, 2, 2, 188, 1708, 3,
	2, 2, 2, 190, 1721, 3, 2, 2, 2, 192, 1725, 3, 2, 2, 2, 194, 1728, 3, 2,
	2, 2, 196, 1736, 3, 2, 2, 2, 198, 1741, 3, 2, 2, 2, 200, 1750, 3, 2, 2,
	2, 202, 1760, 3, 2, 2, 2, 204, 1765, 3, 2, 2, 2, 206, 1777, 3, 2, 2, 2,
	208, 1789, 3, 2, 2, 2, 210, 1798, 3, 2, 2, 2, 212, 1800, 3, 2, 2, 2, 214,
	1804, 3, 2, 2, 2, 216, 1807, 3, 2, 2, 2, 218, 1817, 3, 2, 2, 2, 220, 1822,
	3, 2, 2, 2, 222, 1837, 3, 2, 2, 2, 224, 1846, 3, 2, 2, 2, 226, 1851, 3,
	2, 2, 2, 228, 1887, 3, 2, 2, 2, 230, 1889, 3, 2, 2, 2, 232, 1898, 3, 2,
	2, 2, 234, 1900, 3, 2, 2, 2, 236, 1912, 3, 2, 2, 2, 238, 1919, 3, 2, 2,
	2, 240, 1945, 3, 2, 2, 2, 242, 1948, 3, 2, 2, 2, 244, 1951, 3, 2, 2, 2,
	246, 1954, 3, 2, 2, 2, 248, 1971, 3, 2, 2, 2, 250, 1984, 3, 2, 2, 2, 252,
	1990, 3, 2, 2, 2, 254, 1999, 3, 2, 2, 2, 256, 2010, 3, 2, 2, 2, 258, 2023,
	3, 2, 2, 2, 260, 2034, 3, 2, 2, 2, 262, 2043, 3, 2, 2, 2, 264, 2062, 3,
	2, 2, 2, 266, 2082, 3, 2, 2, 2, 268, 2107, 3, 2, 2, 2, 270, 2153, 3, 2,
	2, 2, 272, 2159, 3, 2, 2, 2, 274, 2180, 3, 2, 2, 2, 276, 2182, 3, 2, 2,
	2, 278, 2192, 3, 2, 2, 2, 280, 2194, 3, 2, 2, 2, 282, 2206, 3, 2, 2, 2,
	284, 2217, 3, 2, 2, 2, 286, 2219, 3, 2, 2, 2, 288, 2243, 3, 2, 2, 2, 290,
	2245, 3, 2, 2, 2, 292, 2258, 3, 2, 2, 2, 294, 2262, 3, 2, 2, 2, 296, 2264,
	3, 2, 2, 2, 298, 2267, 3, 2, 2, 2, 300, 2272, 3, 2, 2, 2, 302, 2276, 3,
	2, 2, 2, 304, 2281, 3, 2, 2, 2, 306, 2286, 3, 2, 2, 2, 308, 2291, 3, 2,
	2, 2, 310, 2296, 3, 2, 2, 2, 312, 2307, 3, 2, 2, 2, 314, 2309, 3, 2, 2,
	2, 316, 2327, 3, 2, 2, 2, 318, 2330, 3, 2, 2, 2, 320, 2356, 3, 2, 2, 2,
	322, 2358, 3, 2, 2, 2, 324, 2362, 3, 2, 2, 2, 326, 2369, 3, 2, 2, 2, 328,
	2374, 3, 2, 2, 2, 330, 2376, 3, 2, 2, 2, 332, 2378, 3, 2, 2, 2, 334, 2380,
	3, 2, 2, 2, 336, 2382, 3, 2, 2, 2, 338, 2384, 3, 2, 2, 2, 340, 2386, 3,
	2, 2, 2, 342, 2388, 3, 2, 2, 2, 344, 2392, 3, 2, 2, 2, 346, 2396, 3, 2,
	2, 2, 348, 2400, 3, 2, 2, 2, 350, 2404, 3, 2, 2, 2, 352, 2408, 3, 2, 2,
	2, 354, 2412, 3, 2, 2, 2, 356, 2416, 3, 2, 2, 2, 358, 2418, 3, 2, 2, 2,
	360, 2423, 3, 2, 2, 2, 362, 2425, 3, 2, 2, 2, 364, 2427, 3, 2, 2, 2, 366,
	2434, 3, 2, 2, 2, 368, 2444, 3, 2, 2, 2, 370, 2449, 3, 2, 2, 2, 372, 2451,
	3, 2, 2, 2, 374, 2453, 3, 2, 2, 2, 376, 2463, 3, 2, 2, 2, 378, 380, 5,
	4, 3, 2, 379, 378, 3, 2, 2, 2, 380, 381, 3, 2, 2, 2, 381, 379, 3, 2, 2,
	2, 381, 382, 3, 2, 2, 2, 382, 3, 3, 2, 2, 2, 383, 385, 7, 96, 2, 2, 384,
	383, 3, 2, 2, 2, 385, 388, 3, 2, 2, 2, 386, 384, 3, 2, 2, 2, 386, 387,
	3, 2, 2, 2, 387, 390, 3, 2, 2, 2, 388, 386, 3, 2, 2, 2, 389, 391, 5, 164,
	83, 2, 390, 389, 3, 2, 2, 2, 390, 391, 3, 2, 2, 2, 391, 392, 3, 2, 2, 2,
	392, 396, 5, 6, 4, 2, 393, 395, 7, 96, 2, 2, 394, 393, 3, 2, 2, 2, 395,
	398, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 396, 397, 3, 2, 2, 2, 397, 402,
	3, 2, 2, 2, 398, 396, 3, 2, 2, 2, 399, 401, 5, 8, 5, 2, 400, 399, 3, 2,
	2, 2, 401, 404, 3, 2, 2, 2, 402, 400, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2,
	403, 5, 3, 2, 2, 2, 404, 402, 3, 2, 2, 2, 405, 406, 7, 26, 2, 2, 406, 407,
	5, 218, 110, 2, 407, 408, 5, 362, 182, 2, 408, 7, 3, 2, 2, 2, 409, 421,
	5, 10, 6, 2, 410, 421, 5, 30, 16, 2, 411, 421, 5, 68, 35, 2, 412, 421,
	5, 60, 31, 2, 413, 421, 5, 28, 15, 2, 414, 421, 5, 24, 13, 2, 415, 421,
	5, 26, 14, 2, 416, 421, 5, 20, 11, 2, 417, 421, 5, 16, 9, 2, 418, 421,
	5, 18, 10, 2, 419, 421, 7, 96, 2, 2, 420, 409, 3, 2, 2, 2, 420, 410, 3,
	2, 2, 2, 420, 411, 3, 2, 2, 2, 420, 412, 3, 2, 2, 2, 420, 413, 3, 2, 2,
	2, 420, 414, 3, 2, 2, 2, 420, 415, 3, 2, 2, 2, 420, 416, 3, 2, 2, 2, 420,
	417, 3, 2, 2, 2, 420, 418, 3, 2, 2, 2, 420, 419, 3, 2, 2, 2, 421, 9, 3,
	2, 2, 2, 422, 423, 7, 25, 2, 2, 423, 429, 5, 366, 184, 2, 424, 428, 5,
	12, 7, 2, 425, 428, 5, 14, 8, 2, 426, 428, 7, 96, 2, 2, 427, 424, 3, 2,
	2, 2, 427, 425, 3, 2, 2, 2, 427, 426, 3, 2, 2, 2, 428, 431, 3, 2, 2, 2,
	429, 427, 3, 2, 2, 2, 429, 430, 3, 2, 2, 2, 430, 432, 3, 2, 2, 2, 431,
	429, 3, 2, 2, 2, 432, 433, 5, 368, 185, 2, 433, 434, 5, 362, 182, 2, 434,
	11, 3, 2, 2, 2, 435, 437, 5, 164, 83, 2, 436, 435, 3, 2, 2, 2, 436, 437,
	3, 2, 2, 2, 437, 446, 3, 2, 2, 2, 438, 440, 5, 358, 180, 2, 439, 441, 7,
	48, 2, 2, 440, 439, 3, 2, 2, 2, 440, 441, 3, 2, 2, 2, 441, 444, 3, 2, 2,
	2, 442, 444, 7, 92, 2, 2, 443, 438, 3, 2, 2, 2, 443, 442, 3, 2, 2, 2, 444,
	445, 3, 2, 2, 2, 445, 447, 7, 45, 2, 2, 446, 443, 3, 2, 2, 2, 446, 447,
	3, 2, 2, 2, 447, 456, 3, 2, 2, 2, 448, 450, 5, 218, 110, 2, 449, 451, 5,
	276, 139, 2, 450, 449, 3, 2, 2, 2, 450, 451, 3, 2, 2, 2, 451, 457, 3, 2,
	2, 2, 452, 454, 5, 218, 110, 2, 453, 452, 3, 2, 2, 2, 453, 454, 3, 2, 2,
	2, 454, 455, 3, 2, 2, 2, 455, 457, 5, 276, 139, 2, 456, 448, 3, 2, 2, 2,
	456, 453, 3, 2, 2, 2, 457, 458, 3, 2, 2, 2, 458, 459, 5, 362, 182, 2, 459,
	13, 3, 2, 2, 2, 460, 462, 5, 358, 180, 2, 461, 463, 7, 48, 2, 2, 462, 461,
	3, 2, 2, 2, 462, 463, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 465, 7, 45,
	2, 2, 465, 466, 5, 294, 148, 2, 466, 467, 5, 362, 182, 2, 467, 15, 3, 2,
	2, 2, 468, 470, 5, 358, 180, 2, 469, 471, 7, 48, 2, 2, 470, 469, 3, 2,
	2, 2, 470, 471, 3, 2, 2, 2, 471, 472, 3, 2, 2, 2, 472, 476, 7, 45, 2, 2,
	473, 475, 7, 96, 2, 2, 474, 473, 3, 2, 2, 2, 475, 478, 3, 2, 2, 2, 476,
	474, 3, 2, 2, 2, 476, 477, 3, 2, 2, 2, 477, 479, 3, 2, 2, 2, 478, 476,
	3, 2, 2, 2, 479, 480, 5, 294, 148, 2, 480, 481, 5, 362, 182, 2, 481, 17,
	3, 2, 2, 2, 482, 483, 7, 93, 2, 2, 483, 19, 3, 2, 2, 2, 484, 486, 5, 164,
	83, 2, 485, 484, 3, 2, 2, 2, 485, 486, 3, 2, 2, 2, 486, 487, 3, 2, 2, 2,
	487, 489, 5, 358, 180, 2, 488, 490, 7, 48, 2, 2, 489, 488, 3, 2, 2, 2,
	489, 490, 3, 2, 2, 2, 490, 491, 3, 2, 2, 2, 491, 495, 7, 45, 2, 2, 492,
	494, 7, 96, 2, 2, 493, 492, 3, 2, 2, 2, 494, 497, 3, 2, 2, 2, 495, 493,
	3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496, 498, 3, 2, 2, 2, 497, 495, 3, 2,
	2, 2, 498, 499, 5, 374, 188, 2, 499, 500, 7, 45, 2, 2, 500, 501, 5, 376,
	189, 2, 501, 505, 5, 366, 184, 2, 502, 504, 5, 22, 12, 2, 503, 502, 3,
	2, 2, 2, 504, 507, 3, 2, 2, 2, 505, 503, 3, 2, 2, 2, 505, 506, 3, 2, 2,
	2, 506, 508, 3, 2, 2, 2, 507, 505, 3, 2, 2, 2, 508, 509, 5, 368, 185, 2,
	509, 510, 5, 362, 182, 2, 510, 21, 3, 2, 2, 2, 511, 517, 5, 358, 180, 2,
	512, 514, 7, 45, 2, 2, 513, 515, 5, 348, 175, 2, 514, 513, 3, 2, 2, 2,
	514, 515, 3, 2, 2, 2, 515, 516, 3, 2, 2, 2, 516, 518, 5, 290, 146, 2, 517,
	512, 3, 2, 2, 2, 517, 518, 3, 2, 2, 2, 518, 519, 3, 2, 2, 2, 519, 520,
	5, 362, 182, 2, 520, 23, 3, 2, 2, 2, 521, 523, 5, 164, 83, 2, 522, 521,
	3, 2, 2, 2, 522, 523, 3, 2, 2, 2, 523, 524, 3, 2, 2, 2, 524, 525, 5, 358,
	180, 2, 525, 533, 7, 48, 2, 2, 526, 527, 7, 45, 2, 2, 527, 534, 5, 156,
	79, 2, 528, 531, 5, 294, 148, 2, 529, 530, 7, 45, 2, 2, 530, 532, 5, 156,
	79, 2, 531, 529, 3, 2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 534, 3, 2, 2, 2,
	533, 526, 3, 2, 2, 2, 533, 528, 3, 2, 2, 2, 534, 535, 3, 2, 2, 2, 535,
	536, 5, 362, 182, 2, 536, 25, 3, 2, 2, 2, 537, 539, 5, 164, 83, 2, 538,
	537, 3, 2, 2, 2, 538, 539, 3, 2, 2, 2, 539, 540, 3, 2, 2, 2, 540, 548,
	5, 358, 180, 2, 541, 542, 7, 45, 2, 2, 542, 549, 5, 156, 79, 2, 543, 546,
	5, 294, 148, 2, 544, 545, 7, 45, 2, 2, 545, 547, 5, 156, 79, 2, 546, 544,
	3, 2, 2, 2, 546, 547, 3, 2, 2, 2, 547, 549, 3, 2, 2, 2, 548, 541, 3, 2,
	2, 2, 548, 543, 3, 2, 2, 2, 549, 550, 3, 2, 2, 2, 550, 551, 5, 362, 182,
	2, 551, 27, 3, 2, 2, 2, 552, 554, 5, 164, 83, 2, 553, 552, 3, 2, 2, 2,
	553, 554, 3, 2, 2, 2, 554, 561, 3, 2, 2, 2, 555, 562, 5, 358, 180, 2, 556,
	557, 5, 374, 188, 2, 557, 558, 5, 358, 180, 2, 558, 559, 5, 222, 112, 2,
	559, 560, 5, 376, 189, 2, 560, 562, 3, 2, 2, 2, 561, 555, 3, 2, 2, 2, 561,
	556, 3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563, 564, 7, 45, 2, 2, 564, 565,
	5, 370, 186, 2, 565, 566, 5, 88, 45, 2, 566, 568, 9, 2, 2, 2, 567, 569,
	7, 48, 2, 2, 568, 567, 3, 2, 2, 2, 568, 569, 3, 2, 2, 2, 569, 571, 3, 2,
	2, 2, 570, 572, 7, 47, 2, 2, 571, 570, 3, 2, 2, 2, 571, 572, 3, 2, 2, 2,
	572, 576, 3, 2, 2, 2, 573, 575, 7, 96, 2, 2, 574, 573, 3, 2, 2, 2, 575,
	578, 3, 2, 2, 2, 576, 574, 3, 2, 2, 2, 576, 577, 3, 2, 2, 2, 577, 579,
	3, 2, 2, 2, 578, 576, 3, 2, 2, 2, 579, 580, 5, 90, 46, 2, 580, 581, 5,
	372, 187, 2, 581, 585, 5, 366, 184, 2, 582, 584, 5, 94, 48, 2, 583, 582,
	3, 2, 2, 2, 584, 587, 3, 2, 2, 2, 585, 583, 3, 2, 2, 2, 585, 586, 3, 2,
	2, 2, 586, 588, 3, 2, 2, 2, 587, 585, 3, 2, 2, 2, 588, 589, 5, 368, 185,
	2, 589, 590, 5, 362, 182, 2, 590, 29, 3, 2, 2, 2, 591, 593, 5, 164, 83,
	2, 592, 591, 3, 2, 2, 2, 592, 593, 3, 2, 2, 2, 593, 600, 3, 2, 2, 2, 594,
	601, 5, 358, 180, 2, 595, 596, 5, 374, 188, 2, 596, 597, 5, 358, 180, 2,
	597, 598, 5, 222, 112, 2, 598, 599, 5, 376, 189, 2, 599, 601, 3, 2, 2,
	2, 600, 594, 3, 2, 2, 2, 600, 595, 3, 2, 2, 2, 601, 603, 3, 2, 2, 2, 602,
	604, 7, 48, 2, 2, 603, 602, 3, 2, 2, 2, 603, 604, 3, 2, 2, 2, 604, 605,
	3, 2, 2, 2, 605, 609, 7, 45, 2, 2, 606, 610, 5, 42, 22, 2, 607, 610, 5,
	32, 17, 2, 608, 610, 5, 48, 25, 2, 609, 606, 3, 2, 2, 2, 609, 607, 3, 2,
	2, 2, 609, 608, 3, 2, 2, 2, 610, 611, 3, 2, 2, 2, 611, 612, 5, 362, 182,
	2, 612, 31, 3, 2, 2, 2, 613, 617, 5, 366, 184, 2, 614, 616, 5, 34, 18,
	2, 615, 614, 3, 2, 2, 2, 616, 619, 3, 2, 2, 2, 617, 615, 3, 2, 2, 2, 617,
	618, 3, 2, 2, 2, 618, 620, 3, 2, 2, 2, 619, 617, 3, 2, 2, 2, 620, 621,
	5, 368, 185, 2, 621, 33, 3, 2, 2, 2, 622, 627, 5, 40, 21, 2, 623, 627,
	5, 36, 19, 2, 624, 627, 5, 38, 20, 2, 625, 627, 7, 96, 2, 2, 626, 622,
	3, 2, 2, 2, 626, 623, 3, 2, 2, 2, 626, 624, 3, 2, 2, 2, 626, 625, 3, 2,
	2, 2, 627, 35, 3, 2, 2, 2, 628, 630, 5, 164, 83, 2, 629, 628, 3, 2, 2,
	2, 629, 630, 3, 2, 2, 2, 630, 631, 3, 2, 2, 2, 631, 632, 5, 358, 180, 2,
	632, 640, 7, 48, 2, 2, 633, 634, 7, 45, 2, 2, 634, 641, 5, 156, 79, 2,
	635, 638, 5, 294, 148, 2, 636, 637, 7, 45, 2, 2, 637, 639, 5, 156, 79,
	2, 638, 636, 3, 2, 2, 2, 638, 639, 3, 2, 2, 2, 639, 641, 3, 2, 2, 2, 640,
	633, 3, 2, 2, 2, 640, 635, 3, 2, 2, 2, 641, 642, 3, 2, 2, 2, 642, 643,
	5, 362, 182, 2, 643, 37, 3, 2, 2, 2, 644, 646, 5, 164, 83, 2, 645, 644,
	3, 2, 2, 2, 645, 646, 3, 2, 2, 2, 646, 647, 3, 2, 2, 2, 647, 655, 5, 358,
	180, 2, 648, 649, 7, 45, 2, 2, 649, 656, 5, 156, 79, 2, 650, 653, 5, 294,
	148, 2, 651, 652, 7, 45, 2, 2, 652, 654, 5, 156, 79, 2, 653, 651, 3, 2,
	2, 2, 653, 654, 3, 2, 2, 2, 654, 656, 3, 2, 2, 2, 655, 648, 3, 2, 2, 2,
	655, 650, 3, 2, 2, 2, 656, 657, 3, 2, 2, 2, 657, 658, 5, 362, 182, 2, 658,
	39, 3, 2, 2, 2, 659, 661, 5, 164, 83, 2, 660, 659, 3, 2, 2, 2, 660, 661,
	3, 2, 2, 2, 661, 668, 3, 2, 2, 2, 662, 669, 5, 358, 180, 2, 663, 664, 5,
	374, 188, 2, 664, 665, 5, 358, 180, 2, 665, 666, 5, 222, 112, 2, 666, 667,
	5, 376, 189, 2, 667, 669, 3, 2, 2, 2, 668, 662, 3, 2, 2, 2, 668, 663, 3,
	2, 2, 2, 669, 670, 3, 2, 2, 2, 670, 671, 7, 45, 2, 2, 671, 672, 5, 370,
	186, 2, 672, 673, 5, 88, 45, 2, 673, 675, 9, 2, 2, 2, 674, 676, 7, 48,
	2, 2, 675, 674, 3, 2, 2, 2, 675, 676, 3, 2, 2, 2, 676, 678, 3, 2, 2, 2,
	677, 679, 7, 47, 2, 2, 678, 677, 3, 2, 2, 2, 678, 679, 3, 2, 2, 2, 679,
	683, 3, 2, 2, 2, 680, 682, 7, 96, 2, 2, 681, 680, 3, 2, 2, 2, 682, 685,
	3, 2, 2, 2, 683, 681, 3, 2, 2, 2, 683, 684, 3, 2, 2, 2, 684, 686, 3, 2,
	2, 2, 685, 683, 3, 2, 2, 2, 686, 687, 5, 90, 46, 2, 687, 688, 5, 372, 187,
	2, 688, 692, 5, 366, 184, 2, 689, 691, 5, 94, 48, 2, 690, 689, 3, 2, 2,
	2, 691, 694, 3, 2, 2, 2, 692, 690, 3, 2, 2, 2, 692, 693, 3, 2, 2, 2, 693,
	695, 3, 2, 2, 2, 694, 692, 3, 2, 2, 2, 695, 696, 5, 368, 185, 2, 696, 697,
	5, 362, 182, 2, 697, 41, 3, 2, 2, 2, 698, 708, 7, 49, 2, 2, 699, 701, 7,
	46, 2, 2, 700, 699, 3, 2, 2, 2, 700, 701, 3, 2, 2, 2, 701, 702, 3, 2, 2,
	2, 702, 706, 5, 358, 180, 2, 703, 704, 5, 364, 183, 2, 704, 705, 5, 358,
	180, 2, 705, 707, 3, 2, 2, 2, 706, 703, 3, 2, 2, 2, 706, 707, 3, 2, 2,
	2, 707, 709, 3, 2, 2, 2, 708, 700, 3, 2, 2, 2, 708, 709, 3, 2, 2, 2, 709,
	710, 3, 2, 2, 2, 710, 714, 5, 366, 184, 2, 711, 713, 5, 44, 23, 2, 712,
	711, 3, 2, 2, 2, 713, 716, 3, 2, 2, 2, 714, 712, 3, 2, 2, 2, 714, 715,
	3, 2, 2, 2, 715, 717, 3, 2, 2, 2, 716, 714, 3, 2, 2, 2, 717, 718, 5, 368,
	185, 2, 718, 43, 3, 2, 2, 2, 719, 729, 5, 46, 24, 2, 720, 729, 5, 54, 28,
	2, 721, 729, 5, 50, 26, 2, 722, 729, 5, 52, 27, 2, 723, 729, 5, 58, 30,
	2, 724, 729, 5, 66, 34, 2, 725, 729, 5, 62, 32, 2, 726, 729, 5, 64, 33,
	2, 727, 729, 7, 96, 2, 2, 728, 719, 3, 2, 2, 2, 728, 720, 3, 2, 2, 2, 728,
	721, 3, 2, 2, 2, 728, 722, 3, 2, 2, 2, 728, 723, 3, 2, 2, 2, 728, 724,
	3, 2, 2, 2, 728, 725, 3, 2, 2, 2, 728, 726, 3, 2, 2, 2, 728, 727, 3, 2,
	2, 2, 729, 45, 3, 2, 2, 2, 730, 731, 5, 294, 148, 2, 731, 732, 5, 362,
	182, 2, 732, 47, 3, 2, 2, 2, 733, 735, 5, 164, 83, 2, 734, 733, 3, 2, 2,
	2, 734, 735, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2, 736, 737, 5, 370, 186, 2,
	737, 738, 5, 88, 45, 2, 738, 739, 7, 25, 2, 2, 739, 741, 7, 49, 2, 2, 740,
	742, 7, 46, 2, 2, 741, 740, 3, 2, 2, 2, 741, 742, 3, 2, 2, 2, 742, 749,
	3, 2, 2, 2, 743, 747, 5, 358, 180, 2, 744, 745, 5, 364, 183, 2, 745, 746,
	5, 358, 180, 2, 746, 748, 3, 2, 2, 2, 747, 744, 3, 2, 2, 2, 747, 748, 3,
	2, 2, 2, 748, 750, 3, 2, 2, 2, 749, 743, 3, 2, 2, 2, 749, 750, 3, 2, 2,
	2, 750, 751, 3, 2, 2, 2, 751, 758, 5, 372, 187, 2, 752, 754, 5, 370, 186,
	2, 753, 755, 5, 162, 82, 2, 754, 753, 3, 2, 2, 2, 754, 755, 3, 2, 2, 2,
	755, 756, 3, 2, 2, 2, 756, 757, 5, 372, 187, 2, 757, 759, 3, 2, 2, 2, 758,
	752, 3, 2, 2, 2, 758, 759, 3, 2, 2, 2, 759, 760, 3, 2, 2, 2, 760, 764,
	5, 366, 184, 2, 761, 763, 5, 94, 48, 2, 762, 761, 3, 2, 2, 2, 763, 766,
	3, 2, 2, 2, 764, 762, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2, 765, 767, 3, 2,
	2, 2, 766, 764, 3, 2, 2, 2, 767, 768, 5, 368, 185, 2, 768, 49, 3, 2, 2,
	2, 769, 771, 5, 164, 83, 2, 770, 769, 3, 2, 2, 2, 770, 771, 3, 2, 2, 2,
	771, 772, 3, 2, 2, 2, 772, 773, 5, 358, 180, 2, 773, 781, 7, 48, 2, 2,
	774, 775, 7, 45, 2, 2, 775, 782, 5, 156, 79, 2, 776, 779, 5, 294, 148,
	2, 777, 778, 7, 45, 2, 2, 778, 780, 5, 156, 79, 2, 779, 777, 3, 2, 2, 2,
	779, 780, 3, 2, 2, 2, 780, 782, 3, 2, 2, 2, 781, 774, 3, 2, 2, 2, 781,
	776, 3, 2, 2, 2, 782, 783, 3, 2, 2, 2, 783, 784, 5, 362, 182, 2, 784, 51,
	3, 2, 2, 2, 785, 787, 5, 164, 83, 2, 786, 785, 3, 2, 2, 2, 786, 787, 3,
	2, 2, 2, 787, 788, 3, 2, 2, 2, 788, 796, 5, 358, 180, 2, 789, 790, 7, 45,
	2, 2, 790, 797, 5, 156, 79, 2, 791, 794, 5, 294, 148, 2, 792, 793, 7, 45,
	2, 2, 793, 795, 5, 156, 79, 2, 794, 792, 3, 2, 2, 2, 794, 795, 3, 2, 2,
	2, 795, 797, 3, 2, 2, 2, 796, 789, 3, 2, 2, 2, 796, 791, 3, 2, 2, 2, 797,
	798, 3, 2, 2, 2, 798, 799, 5, 362, 182, 2, 799, 53, 3, 2, 2, 2, 800, 802,
	5, 164, 83, 2, 801, 800, 3, 2, 2, 2, 801, 802, 3, 2, 2, 2, 802, 809, 3,
	2, 2, 2, 803, 810, 5, 358, 180, 2, 804, 805, 5, 374, 188, 2, 805, 806,
	5, 358, 180, 2, 806, 807, 5, 222, 112, 2, 807, 808, 5, 376, 189, 2, 808,
	810, 3, 2, 2, 2, 809, 803, 3, 2, 2, 2, 809, 804, 3, 2, 2, 2, 810, 811,
	3, 2, 2, 2, 811, 812, 7, 45, 2, 2, 812, 813, 5, 370, 186, 2, 813, 814,
	5, 88, 45, 2, 814, 816, 9, 2, 2, 2, 815, 817, 7, 48, 2, 2, 816, 815, 3,
	2, 2, 2, 816, 817, 3, 2, 2, 2, 817, 819, 3, 2, 2, 2, 818, 820, 7, 47, 2,
	2, 819, 818, 3, 2, 2, 2, 819, 820, 3, 2, 2, 2, 820, 824, 3, 2, 2, 2, 821,
	823, 7, 96, 2, 2, 822, 821, 3, 2, 2, 2, 823, 826, 3, 2, 2, 2, 824, 822,
	3, 2, 2, 2, 824, 825, 3, 2, 2, 2, 825, 827, 3, 2, 2, 2, 826, 824, 3, 2,
	2, 2, 827, 828, 5, 90, 46, 2, 828, 829, 5, 372, 187, 2, 829, 833, 5, 366,
	184, 2, 830, 832, 5, 94, 48, 2, 831, 830, 3, 2, 2, 2, 832, 835, 3, 2, 2,
	2, 833, 831, 3, 2, 2, 2, 833, 834, 3, 2, 2, 2, 834, 836, 3, 2, 2, 2, 835,
	833, 3, 2, 2, 2, 836, 837, 5, 368, 185, 2, 837, 838, 5, 362, 182, 2, 838,
	55, 3, 2, 2, 2, 839, 844, 5, 358, 180, 2, 840, 841, 5, 370, 186, 2, 841,
	842, 5, 358, 180, 2, 842, 843, 5, 372, 187, 2, 843, 845, 3, 2, 2, 2, 844,
	840, 3, 2, 2, 2, 844, 845, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 848,
	5, 366, 184, 2, 847, 849, 5, 94, 48, 2, 848, 847, 3, 2, 2, 2, 849, 850,
	3, 2, 2, 2, 850, 848, 3, 2, 2, 2, 850, 851, 3, 2, 2, 2, 851, 852, 3, 2,
	2, 2, 852, 853, 5, 368, 185, 2, 853, 854, 5, 362, 182, 2, 854, 57, 3, 2,
	2, 2, 855, 856, 5, 358, 180, 2, 856, 857, 7, 48, 2, 2, 857, 858, 5, 374,
	188, 2, 858, 859, 7, 25, 2, 2, 859, 860, 5, 376, 189, 2, 860, 861, 5, 218,
	110, 2, 861, 862, 5, 362, 182, 2, 862, 59, 3, 2, 2, 2, 863, 870, 5, 358,
	180, 2, 864, 865, 5, 374, 188, 2, 865, 866, 5, 358, 180, 2, 866, 867, 5,
	222, 112, 2, 867, 868, 5, 376, 189, 2, 868, 870, 3, 2, 2, 2, 869, 863,
	3, 2, 2, 2, 869, 864, 3, 2, 2, 2, 870, 871, 3, 2, 2, 2, 871, 874, 7, 9,
	2, 2, 872, 875, 5, 48, 25, 2, 873, 875, 5, 42, 22, 2, 874, 872, 3, 2, 2,
	2, 874, 873, 3, 2, 2, 2, 875, 876, 3, 2, 2, 2, 876, 877, 5, 362, 182, 2,
	877, 61, 3, 2, 2, 2, 878, 880, 5, 164, 83, 2, 879, 878, 3, 2, 2, 2, 879,
	880, 3, 2, 2, 2, 880, 881, 3, 2, 2, 2, 881, 883, 7, 19, 2, 2, 882, 884,
	7, 92, 2, 2, 883, 882, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2, 884, 885, 3, 2,
	2, 2, 885, 886, 5, 358, 180, 2, 886, 894, 7, 48, 2, 2, 887, 888, 7, 45,
	2, 2, 888, 895, 5, 156, 79, 2, 889, 892, 5, 294, 148, 2, 890, 891, 7, 45,
	2, 2, 891, 893, 5, 156, 79, 2, 892, 890, 3, 2, 2, 2, 892, 893, 3, 2, 2,
	2, 893, 895, 3, 2, 2, 2, 894, 887, 3, 2, 2, 2, 894, 889, 3, 2, 2, 2, 895,
	896, 3, 2, 2, 2, 896, 897, 5, 362, 182, 2, 897, 63, 3, 2, 2, 2, 898, 900,
	5, 164, 83, 2, 899, 898, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2, 900, 901, 3,
	2, 2, 2, 901, 903, 7, 19, 2, 2, 902, 904, 7, 92, 2, 2, 903, 902, 3, 2,
	2, 2, 903, 904, 3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 913, 5, 358, 180,
	2, 906, 907, 7, 45, 2, 2, 907, 914, 5, 156, 79, 2, 908, 911, 5, 294, 148,
	2, 909, 910, 7, 45, 2, 2, 910, 912, 5, 156, 79, 2, 911, 909, 3, 2, 2, 2,
	911, 912, 3, 2, 2, 2, 912, 914, 3, 2, 2, 2, 913, 906, 3, 2, 2, 2, 913,
	908, 3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915, 916, 5, 362, 182, 2, 916, 65,
	3, 2, 2, 2, 917, 919, 5, 164, 83, 2, 918, 917, 3, 2, 2, 2, 918, 919, 3,
	2, 2, 2, 919, 920, 3, 2, 2, 2, 920, 922, 7, 19, 2, 2, 921, 923, 7, 92,
	2, 2, 922, 921, 3, 2, 2, 2, 922, 923, 3, 2, 2, 2, 923, 930, 3, 2, 2, 2,
	924, 931, 5, 358, 180, 2, 925, 926, 5, 374, 188, 2, 926, 927, 5, 358, 180,
	2, 927, 928, 5, 222, 112, 2, 928, 929, 5, 376, 189, 2, 929, 931, 3, 2,
	2, 2, 930, 924, 3, 2, 2, 2, 930, 925, 3, 2, 2, 2, 931, 932, 3, 2, 2, 2,
	932, 933, 7, 45, 2, 2, 933, 934, 5, 370, 186, 2, 934, 935, 5, 88, 45, 2,
	935, 937, 9, 2, 2, 2, 936, 938, 7, 48, 2, 2, 937, 936, 3, 2, 2, 2, 937,
	938, 3, 2, 2, 2, 938, 940, 3, 2, 2, 2, 939, 941, 7, 47, 2, 2, 940, 939,
	3, 2, 2, 2, 940, 941, 3, 2, 2, 2, 941, 945, 3, 2, 2, 2, 942, 944, 7, 96,
	2, 2, 943, 942, 3, 2, 2, 2, 944, 947, 3, 2, 2, 2, 945, 943, 3, 2, 2, 2,
	945, 946, 3, 2, 2, 2, 946, 948, 3, 2, 2, 2, 947, 945, 3, 2, 2, 2, 948,
	949, 5, 90, 46, 2, 949, 950, 5, 372, 187, 2, 950, 954, 5, 366, 184, 2,
	951, 953, 5, 94, 48, 2, 952, 951, 3, 2, 2, 2, 953, 956, 3, 2, 2, 2, 954,
	952, 3, 2, 2, 2, 954, 955, 3, 2, 2, 2, 955, 957, 3, 2, 2, 2, 956, 954,
	3, 2, 2, 2, 957, 958, 5, 368, 185, 2, 958, 959, 5, 362, 182, 2, 959, 67,
	3, 2, 2, 2, 960, 962, 5, 164, 83, 2, 961, 960, 3, 2, 2, 2, 961, 962, 3,
	2, 2, 2, 962, 969, 3, 2, 2, 2, 963, 970, 5, 358, 180, 2, 964, 965, 5, 374,
	188, 2, 965, 966, 5, 358, 180, 2, 966, 967, 5, 222, 112, 2, 967, 968, 5,
	376, 189, 2, 968, 970, 3, 2, 2, 2, 969, 963, 3, 2, 2, 2, 969, 964, 3, 2,
	2, 2, 970, 972, 3, 2, 2, 2, 971, 973, 7, 48, 2, 2, 972, 971, 3, 2, 2, 2,
	972, 973, 3, 2, 2, 2, 973, 974, 3, 2, 2, 2, 974, 975, 7, 45, 2, 2, 975,
	976, 5, 70, 36, 2, 976, 977, 5, 362, 182, 2, 977, 69, 3, 2, 2, 2, 978,
	979, 7, 49, 2, 2, 979, 989, 7, 49, 2, 2, 980, 982, 7, 46, 2, 2, 981, 980,
	3, 2, 2, 2, 981, 982, 3, 2, 2, 2, 982, 983, 3, 2, 2, 2, 983, 987, 5, 358,
	180, 2, 984, 985, 5, 364, 183, 2, 985, 986, 5, 358, 180, 2, 986, 988, 3,
	2, 2, 2, 987, 984, 3, 2, 2, 2, 987, 988, 3, 2, 2, 2, 988, 990, 3, 2, 2,
	2, 989, 981, 3, 2, 2, 2, 989, 990, 3, 2, 2, 2, 990, 991, 3, 2, 2, 2, 991,
	995, 5, 366, 184, 2, 992, 994, 5, 72, 37, 2, 993, 992, 3, 2, 2, 2, 994,
	997, 3, 2, 2, 2, 995, 993, 3, 2, 2, 2, 995, 996, 3, 2, 2, 2, 996, 998,
	3, 2, 2, 2, 997, 995, 3, 2, 2, 2, 998, 999, 5, 368, 185, 2, 999, 71, 3,
	2, 2, 2, 1000, 1005, 5, 46, 24, 2, 1001, 1005, 5, 76, 39, 2, 1002, 1005,
	5, 74, 38, 2, 1003, 1005, 7, 96, 2, 2, 1004, 1000, 3, 2, 2, 2, 1004, 1001,
	3, 2, 2, 2, 1004, 1002, 3, 2, 2, 2, 1004, 1003, 3, 2, 2, 2, 1005, 73, 3,
	2, 2, 2, 1006, 1008, 5, 164, 83, 2, 1007, 1006, 3, 2, 2, 2, 1007, 1008,
	3, 2, 2, 2, 1008, 1009, 3, 2, 2, 2, 1009, 1011, 5, 358, 180, 2, 1010, 1012,
	7, 48, 2, 2, 1011, 1010, 3, 2, 2, 2, 1011, 1012, 3, 2, 2, 2, 1012, 1020,
	3, 2, 2, 2, 1013, 1014, 7, 45, 2, 2, 1014, 1021, 5, 156, 79, 2, 1015, 1018,
	5, 294, 148, 2, 1016, 1017, 7, 45, 2, 2, 1017, 1019, 5, 156, 79, 2, 1018,
	1016, 3, 2, 2, 2, 1018, 1019, 3, 2, 2, 2, 1019, 1021, 3, 2, 2, 2, 1020,
	1013, 3, 2, 2, 2, 1020, 1015, 3, 2, 2, 2, 1021, 1022, 3, 2, 2, 2, 1022,
	1023, 5, 362, 182, 2, 1023, 75, 3, 2, 2, 2, 1024, 1026, 5, 164, 83, 2,
	1025, 1024, 3, 2, 2, 2, 1025, 1026, 3, 2, 2, 2, 1026, 1033, 3, 2, 2, 2,
	1027, 1034, 5, 358, 180, 2, 1028, 1029, 5, 374, 188, 2, 1029, 1030, 5,
	358, 180, 2, 1030, 1031, 5, 222, 112, 2, 1031, 1032, 5, 376, 189, 2, 1032,
	1034, 3, 2, 2, 2, 1033, 1027, 3, 2, 2, 2, 1033, 1028, 3, 2, 2, 2, 1034,
	1035, 3, 2, 2, 2, 1035, 1036, 5, 370, 186, 2, 1036, 1037, 5, 88, 45, 2,
	1037, 1039, 9, 2, 2, 2, 1038, 1040, 7, 48, 2, 2, 1039, 1038, 3, 2, 2, 2,
	1039, 1040, 3, 2, 2, 2, 1040, 1042, 3, 2, 2, 2, 1041, 1043, 7, 47, 2, 2,
	1042, 1041, 3, 2, 2, 2, 1042, 1043, 3, 2, 2, 2, 1043, 1047, 3, 2, 2, 2,
	1044, 1046, 7, 96, 2, 2, 1045, 1044, 3, 2, 2, 2, 1046, 1049, 3, 2, 2, 2,
	1047, 1045, 3, 2, 2, 2, 1047, 1048, 3, 2, 2, 2, 1048, 1050, 3, 2, 2, 2,
	1049, 1047, 3, 2, 2, 2, 1050, 1051, 5, 90, 46, 2, 1051, 1052, 5, 372, 187,
	2, 1052, 1053, 5, 362, 182, 2, 1053, 77, 3, 2, 2, 2, 1054, 1061, 5, 358,
	180, 2, 1055, 1056, 5, 374, 188, 2, 1056, 1057, 5, 358, 180, 2, 1057, 1058,
	5, 222, 112, 2, 1058, 1059, 5, 376, 189, 2, 1059, 1061, 3, 2, 2, 2, 1060,
	1054, 3, 2, 2, 2, 1060, 1055, 3, 2, 2, 2, 1061, 1062, 3, 2, 2, 2, 1062,
	1063, 7, 45, 2, 2, 1063, 1064, 5, 370, 186, 2, 1064, 1065, 5, 88, 45, 2,
	1065, 1067, 9, 2, 2, 2, 1066, 1068, 7, 48, 2, 2, 1067, 1066, 3, 2, 2, 2,
	1067, 1068, 3, 2, 2, 2, 1068, 1070, 3, 2, 2, 2, 1069, 1071, 7, 47, 2, 2,
	1070, 1069, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1075, 3, 2, 2, 2,
	1072, 1074, 7, 96, 2, 2, 1073, 1072, 3, 2, 2, 2, 1074, 1077, 3, 2, 2, 2,
	1075, 1073, 3, 2, 2, 2, 1075, 1076, 3, 2, 2, 2, 1076, 1078, 3, 2, 2, 2,
	1077, 1075, 3, 2, 2, 2, 1078, 1079, 5, 90, 46, 2, 1079, 1080, 5, 372, 187,
	2, 1080, 1084, 5, 366, 184, 2, 1081, 1083, 5, 94, 48, 2, 1082, 1081, 3,
	2, 2, 2, 1083, 1086, 3, 2, 2, 2, 1084, 1082, 3, 2, 2, 2, 1084, 1085, 3,
	2, 2, 2, 1085, 1087, 3, 2, 2, 2, 1086, 1084, 3, 2, 2, 2, 1087, 1088, 5,
	368, 185, 2, 1088, 1089, 5, 362, 182, 2, 1089, 79, 3, 2, 2, 2, 1090, 1092,
	7, 26, 2, 2, 1091, 1093, 5, 152, 77, 2, 1092, 1091, 3, 2, 2, 2, 1092, 1093,
	3, 2, 2, 2, 1093, 1094, 3, 2, 2, 2, 1094, 1095, 5, 362, 182, 2, 1095, 81,
	3, 2, 2, 2, 1096, 1098, 7, 24, 2, 2, 1097, 1099, 5, 152, 77, 2, 1098, 1097,
	3, 2, 2, 2, 1098, 1099, 3, 2, 2, 2, 1099, 1100, 3, 2, 2, 2, 1100, 1101,
	5, 362, 182, 2, 1101, 83, 3, 2, 2, 2, 1102, 1103, 7, 47, 2, 2, 1103, 1104,
	7, 26, 2, 2, 1104, 1105, 5, 152, 77, 2, 1105, 1106, 5, 362, 182, 2, 1106,
	85, 3, 2, 2, 2, 1107, 1108, 7, 47, 2, 2, 1108, 1109, 7, 26, 2, 2, 1109,
	1110, 5, 362, 182, 2, 1110, 87, 3, 2, 2, 2, 1111, 1113, 5, 92, 47, 2, 1112,
	1111, 3, 2, 2, 2, 1112, 1113, 3, 2, 2, 2, 1113, 1119, 3, 2, 2, 2, 1114,
	1115, 5, 364, 183, 2, 1115, 1116, 5, 92, 47, 2, 1116, 1118, 3, 2, 2, 2,
	1117, 1114, 3, 2, 2, 2, 1118, 1121, 3, 2, 2, 2, 1119, 1117, 3, 2, 2, 2,
	1119, 1120, 3, 2, 2, 2, 1120, 89, 3, 2, 2, 2, 1121, 1119, 3, 2, 2, 2, 1122,
	1124, 5, 92, 47, 2, 1123, 1122, 3, 2, 2, 2, 1123, 1124, 3, 2, 2, 2, 1124,
	1130, 3, 2, 2, 2, 1125, 1126, 5, 364, 183, 2, 1126, 1127, 5, 92, 47, 2,
	1127, 1129, 3, 2, 2, 2, 1128, 1125, 3, 2, 2, 2, 1129, 1132, 3, 2, 2, 2,
	1130, 1128, 3, 2, 2, 2, 1130, 1131, 3, 2, 2, 2, 1131, 91, 3, 2, 2, 2, 1132,
	1130, 3, 2, 2, 2, 1133, 1135, 5, 164, 83, 2, 1134, 1133, 3, 2, 2, 2, 1134,
	1135, 3, 2, 2, 2, 1135, 1136, 3, 2, 2, 2, 1136, 1138, 5, 358, 180, 2, 1137,
	1139, 7, 48, 2, 2, 1138, 1137, 3, 2, 2, 2, 1138, 1139, 3, 2, 2, 2, 1139,
	1141, 3, 2, 2, 2, 1140, 1142, 9, 3, 2, 2, 1141, 1140, 3, 2, 2, 2, 1141,
	1142, 3, 2, 2, 2, 1142, 1143, 3, 2, 2, 2, 1143, 1146, 5, 294, 148, 2, 1144,
	1145, 7, 45, 2, 2, 1145, 1147, 5, 156, 79, 2, 1146, 1144, 3, 2, 2, 2, 1146,
	1147, 3, 2, 2, 2, 1147, 93, 3, 2, 2, 2, 1148, 1172, 5, 80, 41, 2, 1149,
	1172, 5, 82, 42, 2, 1150, 1172, 5, 84, 43, 2, 1151, 1172, 5, 86, 44, 2,
	1152, 1172, 5, 96, 49, 2, 1153, 1172, 5, 102, 52, 2, 1154, 1172, 5, 110,
	56, 2, 1155, 1172, 5, 112, 57, 2, 1156, 1172, 5, 114, 58, 2, 1157, 1172,
	5, 118, 60, 2, 1158, 1172, 5, 120, 61, 2, 1159, 1172, 5, 124, 63, 2, 1160,
	1172, 5, 122, 62, 2, 1161, 1172, 5, 130, 66, 2, 1162, 1172, 5, 78, 40,
	2, 1163, 1172, 5, 134, 68, 2, 1164, 1172, 5, 136, 69, 2, 1165, 1172, 5,
	138, 70, 2, 1166, 1172, 5, 140, 71, 2, 1167, 1172, 5, 142, 72, 2, 1168,
	1172, 5, 144, 73, 2, 1169, 1172, 5, 146, 74, 2, 1170, 1172, 7, 96, 2, 2,
	1171, 1148, 3, 2, 2, 2, 1171, 1149, 3, 2, 2, 2, 1171, 1150, 3, 2, 2, 2,
	1171, 1151, 3, 2, 2, 2, 1171, 1152, 3, 2, 2, 2, 1171, 1153, 3, 2, 2, 2,
	1171, 1154, 3, 2, 2, 2, 1171, 1155, 3, 2, 2, 2, 1171, 1156, 3, 2, 2, 2,
	1171, 1157, 3, 2, 2, 2, 1171, 1158, 3, 2, 2, 2, 1171, 1159, 3, 2, 2, 2,
	1171, 1160, 3, 2, 2, 2, 1171, 1161, 3, 2, 2, 2, 1171, 1162, 3, 2, 2, 2,
	1171, 1163, 3, 2, 2, 2, 1171, 1164, 3, 2, 2, 2, 1171, 1165, 3, 2, 2, 2,
	1171, 1166, 3, 2, 2, 2, 1171, 1167, 3, 2, 2, 2, 1171, 1168, 3, 2, 2, 2,
	1171, 1169, 3, 2, 2, 2, 1171, 1170, 3, 2, 2, 2, 1172, 95, 3, 2, 2, 2, 1173,
	1174, 7, 46, 2, 2, 1174, 1175, 5, 156, 79, 2, 1175, 1177, 7, 45, 2, 2,
	1176, 1178, 5, 98, 50, 2, 1177, 1176, 3, 2, 2, 2, 1178, 1179, 3, 2, 2,
	2, 1179, 1177, 3, 2, 2, 2, 1179, 1180, 3, 2, 2, 2, 1180, 1181, 3, 2, 2,
	2, 1181, 1182, 5, 362, 182, 2, 1182, 97, 3, 2, 2, 2, 1183, 1189, 5, 100,
	51, 2, 1184, 1185, 5, 364, 183, 2, 1185, 1186, 5, 100, 51, 2, 1186, 1188,
	3, 2, 2, 2, 1187, 1184, 3, 2, 2, 2, 1188, 1191, 3, 2, 2, 2, 1189, 1187,
	3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190, 1192, 3, 2, 2, 2, 1191, 1189,
	3, 2, 2, 2, 1192, 1196, 5, 366, 184, 2, 1193, 1195, 5, 94, 48, 2, 1194,
	1193, 3, 2, 2, 2, 1195, 1198, 3, 2, 2, 2, 1196, 1194, 3, 2, 2, 2, 1196,
	1197, 3, 2, 2, 2, 1197, 1199, 3, 2, 2, 2, 1198, 1196, 3, 2, 2, 2, 1199,
	1200, 5, 368, 185, 2, 1200, 99, 3, 2, 2, 2, 1201, 1209, 7, 92, 2, 2, 1202,
	1209, 5, 156, 79, 2, 1203, 1206, 5, 358, 180, 2, 1204, 1206, 7, 92, 2,
	2, 1205, 1203, 3, 2, 2, 2, 1205, 1204, 3, 2, 2, 2, 1206, 1207, 3, 2, 2,
	2, 1207, 1209, 5, 294, 148, 2, 1208, 1201, 3, 2, 2, 2, 1208, 1202, 3, 2,
	2, 2, 1208, 1205, 3, 2, 2, 2, 1209, 101, 3, 2, 2, 2, 1210, 1214, 5, 106,
	54, 2, 1211, 1213, 5, 108, 55, 2, 1212, 1211, 3, 2, 2, 2, 1213, 1216, 3,
	2, 2, 2, 1214, 1212, 3, 2, 2, 2, 1214, 1215, 3, 2, 2, 2, 1215, 1217, 3,
	2, 2, 2, 1216, 1214, 3, 2, 2, 2, 1217, 1218, 5, 104, 53, 2, 1218, 1219,
	5, 362, 182, 2, 1219, 1230, 3, 2, 2, 2, 1220, 1224, 5, 106, 54, 2, 1221,
	1223, 5, 108, 55, 2, 1222, 1221, 3, 2, 2, 2, 1223, 1226, 3, 2, 2, 2, 1224,
	1222, 3, 2, 2, 2, 1224, 1225, 3, 2, 2, 2, 1225, 1227, 3, 2, 2, 2, 1226,
	1224, 3, 2, 2, 2, 1227, 1228, 5, 362, 182, 2, 1228, 1230, 3, 2, 2, 2, 1229,
	1210, 3, 2, 2, 2, 1229, 1220, 3, 2, 2, 2, 1230, 103, 3, 2, 2, 2, 1231,
	1232, 7, 92, 2, 2, 1232, 1236, 5, 366, 184, 2, 1233, 1235, 5, 94, 48, 2,
	1234, 1233, 3, 2, 2, 2, 1235, 1238, 3, 2, 2, 2, 1236, 1234, 3, 2, 2, 2,
	1236, 1237, 3, 2, 2, 2, 1237, 1239, 3, 2, 2, 2, 1238, 1236, 3, 2, 2, 2,
	1239, 1240, 5, 368, 185, 2, 1240, 105, 3, 2, 2, 2, 1241, 1242, 7, 46, 2,
	2, 1242, 1243, 5, 156, 79, 2, 1243, 1247, 5, 366, 184, 2, 1244, 1246, 5,
	94, 48, 2, 1245, 1244, 3, 2, 2, 2, 1246, 1249, 3, 2, 2, 2, 1247, 1245,
	3, 2, 2, 2, 1247, 1248, 3, 2, 2, 2, 1248, 1250, 3, 2, 2, 2, 1249, 1247,
	3, 2, 2, 2, 1250, 1251, 5, 368, 185, 2, 1251, 107, 3, 2, 2, 2, 1252, 1253,
	5, 156, 79, 2, 1253, 1257, 5, 366, 184, 2, 1254, 1256, 5, 94, 48, 2, 1255,
	1254, 3, 2, 2, 2, 1256, 1259, 3, 2, 2, 2, 1257, 1255, 3, 2, 2, 2, 1257,
	1258, 3, 2, 2, 2, 1258, 1260, 3, 2, 2, 2, 1259, 1257, 3, 2, 2, 2, 1260,
	1261, 5, 368, 185, 2, 1261, 109, 3, 2, 2, 2, 1262, 1263, 7, 47, 2, 2, 1263,
	1265, 5, 358, 180, 2, 1264, 1266, 7, 48, 2, 2, 1265, 1264, 3, 2, 2, 2,
	1265, 1266, 3, 2, 2, 2, 1266, 1267, 3, 2, 2, 2, 1267, 1268, 7, 45, 2, 2,
	1268, 1269, 5, 132, 67, 2, 1269, 1273, 5, 366, 184, 2, 1270, 1272, 5, 94,
	48, 2, 1271, 1270, 3, 2, 2, 2, 1272, 1275, 3, 2, 2, 2, 1273, 1271, 3, 2,
	2, 2, 1273, 1274, 3, 2, 2, 2, 1274, 1276, 3, 2, 2, 2, 1275, 1273, 3, 2,
	2, 2, 1276, 1278, 5, 368, 185, 2, 1277, 1279, 5, 116, 59, 2, 1278, 1277,
	3, 2, 2, 2, 1278, 1279, 3, 2, 2, 2, 1279, 1280, 3, 2, 2, 2, 1280, 1281,
	5, 362, 182, 2, 1281, 111, 3, 2, 2, 2, 1282, 1287, 7, 47, 2, 2, 1283, 1284,
	5, 374, 188, 2, 1284, 1285, 5, 358, 180, 2, 1285, 1286, 5, 376, 189, 2,
	1286, 1288, 3, 2, 2, 2, 1287, 1283, 3, 2, 2, 2, 1287, 1288, 3, 2, 2, 2,
	1288, 1289, 3, 2, 2, 2, 1289, 1291, 5, 358, 180, 2, 1290, 1292, 7, 48,
	2, 2, 1291, 1290, 3, 2, 2, 2, 1291, 1292, 3, 2, 2, 2, 1292, 1293, 3, 2,
	2, 2, 1293, 1294, 7, 45, 2, 2, 1294, 1295, 5, 156, 79, 2, 1295, 1299, 5,
	366, 184, 2, 1296, 1298, 5, 94, 48, 2, 1297, 1296, 3, 2, 2, 2, 1298, 1301,
	3, 2, 2, 2, 1299, 1297, 3, 2, 2, 2, 1299, 1300, 3, 2, 2, 2, 1300, 1302,
	3, 2, 2, 2, 1301, 1299, 3, 2, 2, 2, 1302, 1304, 5, 368, 185, 2, 1303, 1305,
	5, 116, 59, 2, 1304, 1303, 3, 2, 2, 2, 1304, 1305, 3, 2, 2, 2, 1305, 1306,
	3, 2, 2, 2, 1306, 1307, 5, 362, 182, 2, 1307, 113, 3, 2, 2, 2, 1308, 1309,
	7, 47, 2, 2, 1309, 1310, 5, 156, 79, 2, 1310, 1314, 5, 366, 184, 2, 1311,
	1313, 5, 94, 48, 2, 1312, 1311, 3, 2, 2, 2, 1313, 1316, 3, 2, 2, 2, 1314,
	1312, 3, 2, 2, 2, 1314, 1315, 3, 2, 2, 2, 1315, 1317, 3, 2, 2, 2, 1316,
	1314, 3, 2, 2, 2, 1317, 1319, 5, 368, 185, 2, 1318, 1320, 5, 116, 59, 2,
	1319, 1318, 3, 2, 2, 2, 1319, 1320, 3, 2, 2, 2, 1320, 1321, 3, 2, 2, 2,
	1321, 1322, 5, 362, 182, 2, 1322, 115, 3, 2, 2, 2, 1323, 1324, 7, 92, 2,
	2, 1324, 1328, 5, 366, 184, 2, 1325, 1327, 5, 94, 48, 2, 1326, 1325, 3,
	2, 2, 2, 1327, 1330, 3, 2, 2, 2, 1328, 1326, 3, 2, 2, 2, 1328, 1329, 3,
	2, 2, 2, 1329, 1331, 3, 2, 2, 2, 1330, 1328, 3, 2, 2, 2, 1331, 1332, 5,
	368, 185, 2, 1332, 117, 3, 2, 2, 2, 1333, 1334, 7, 50, 2, 2, 1334, 1335,
	7, 47, 2, 2, 1335, 1336, 5, 362, 182, 2, 1336, 119, 3, 2, 2, 2, 1337, 1338,
	7, 25, 2, 2, 1338, 1339, 7, 47, 2, 2, 1339, 1340, 5, 362, 182, 2, 1340,
	121, 3, 2, 2, 2, 1341, 1342, 7, 48, 2, 2, 1342, 1346, 5, 366, 184, 2, 1343,
	1345, 5, 94, 48, 2, 1344, 1343, 3, 2, 2, 2, 1345, 1348, 3, 2, 2, 2, 1346,
	1344, 3, 2, 2, 2, 1346, 1347, 3, 2, 2, 2, 1347, 1349, 3, 2, 2, 2, 1348,
	1346, 3, 2, 2, 2, 1349, 1353, 5, 368, 185, 2, 1350, 1352, 5, 126, 64, 2,
	1351, 1350, 3, 2, 2, 2, 1352, 1355, 3, 2, 2, 2, 1353, 1351, 3, 2, 2, 2,
	1353, 1354, 3, 2, 2, 2, 1354, 1356, 3, 2, 2, 2, 1355, 1353, 3, 2, 2, 2,
	1356, 1357, 5, 128, 65, 2, 1357, 1358, 5, 362, 182, 2, 1358, 1376, 3, 2,
	2, 2, 1359, 1360, 7, 48, 2, 2, 1360, 1364, 5, 366, 184, 2, 1361, 1363,
	5, 94, 48, 2, 1362, 1361, 3, 2, 2, 2, 1363, 1366, 3, 2, 2, 2, 1364, 1362,
	3, 2, 2, 2, 1364, 1365, 3, 2, 2, 2, 1365, 1367, 3, 2, 2, 2, 1366, 1364,
	3, 2, 2, 2, 1367, 1369, 5, 368, 185, 2, 1368, 1370, 5, 126, 64, 2, 1369,
	1368, 3, 2, 2, 2, 1370, 1371, 3, 2, 2, 2, 1371, 1369, 3, 2, 2, 2, 1371,
	1372, 3, 2, 2, 2, 1372, 1373, 3, 2, 2, 2, 1373, 1374, 5, 362, 182, 2, 1374,
	1376, 3, 2, 2, 2, 1375, 1341, 3, 2, 2, 2, 1375, 1359, 3, 2, 2, 2, 1376,
	123, 3, 2, 2, 2, 1377, 1378, 7, 48, 2, 2, 1378, 1384, 5, 150, 76, 2, 1379,
	1380, 5, 364, 183, 2, 1380, 1381, 5, 150, 76, 2, 1381, 1383, 3, 2, 2, 2,
	1382, 1379, 3, 2, 2, 2, 1383, 1386, 3, 2, 2, 2, 1384, 1382, 3, 2, 2, 2,
	1384, 1385, 3, 2, 2, 2, 1385, 1388, 3, 2, 2, 2, 1386, 1384, 3, 2, 2, 2,
	1387, 1389, 7, 48, 2, 2, 1388, 1387, 3, 2, 2, 2, 1388, 1389, 3, 2, 2, 2,
	1389, 1390, 3, 2, 2, 2, 1390, 1391, 7, 45, 2, 2, 1391, 1392, 5, 152, 77,
	2, 1392, 1396, 5, 366, 184, 2, 1393, 1395, 5, 94, 48, 2, 1394, 1393, 3,
	2, 2, 2, 1395, 1398, 3, 2, 2, 2, 1396, 1394, 3, 2, 2, 2, 1396, 1397, 3,
	2, 2, 2, 1397, 1399, 3, 2, 2, 2, 1398, 1396, 3, 2, 2, 2, 1399, 1400, 5,
	368, 185, 2, 1400, 1401, 5, 362, 182, 2, 1401, 125, 3, 2, 2, 2, 1402, 1407,
	5, 358, 180, 2, 1403, 1404, 5, 358, 180, 2, 1404, 1405, 5, 294, 148, 2,
	1405, 1407, 3, 2, 2, 2, 1406, 1402, 3, 2, 2, 2, 1406, 1403, 3, 2, 2, 2,
	1407, 1408, 3, 2, 2, 2, 1408, 1412, 5, 366, 184, 2, 1409, 1411, 5, 94,
	48, 2, 1410, 1409, 3, 2, 2, 2, 1411, 1414, 3, 2, 2, 2, 1412, 1410, 3, 2,
	2, 2, 1412, 1413, 3, 2, 2, 2, 1413, 1415, 3, 2, 2, 2, 1414, 1412, 3, 2,
	2, 2, 1415, 1416, 5, 368, 185, 2, 1416, 127, 3, 2, 2, 2, 1417, 1418, 7,
	92, 2, 2, 1418, 1422, 5, 366, 184, 2, 1419, 1421, 5, 94, 48, 2, 1420, 1419,
	3, 2, 2, 2, 1421, 1424, 3, 2, 2, 2, 1422, 1420, 3, 2, 2, 2, 1422, 1423,
	3, 2, 2, 2, 1423, 1425, 3, 2, 2, 2, 1424, 1422, 3, 2, 2, 2, 1425, 1426,
	5, 368, 185, 2, 1426, 129, 3, 2, 2, 2, 1427, 1428, 7, 48, 2, 2, 1428, 1429,
	7, 26, 2, 2, 1429, 1430, 5, 156, 79, 2, 1430, 1431, 5, 362, 182, 2, 1431,
	131, 3, 2, 2, 2, 1432, 1433, 5, 156, 79, 2, 1433, 1438, 9, 4, 2, 2, 1434,
	1435, 5, 370, 186, 2, 1435, 1436, 5, 156, 79, 2, 1436, 1437, 5, 372, 187,
	2, 1437, 1439, 3, 2, 2, 2, 1438, 1434, 3, 2, 2, 2, 1438, 1439, 3, 2, 2,
	2, 1439, 1440, 3, 2, 2, 2, 1440, 1441, 5, 156, 79, 2, 1441, 133, 3, 2,
	2, 2, 1442, 1443, 5, 358, 180, 2, 1443, 1444, 7, 48, 2, 2, 1444, 1445,
	5, 294, 148, 2, 1445, 1446, 5, 362, 182, 2, 1446, 135, 3, 2, 2, 2, 1447,
	1448, 5, 358, 180, 2, 1448, 1449, 5, 294, 148, 2, 1449, 1450, 5, 362, 182,
	2, 1450, 137, 3, 2, 2, 2, 1451, 1457, 5, 148, 75, 2, 1452, 1453, 5, 364,
	183, 2, 1453, 1454, 5, 148, 75, 2, 1454, 1456, 3, 2, 2, 2, 1455, 1452,
	3, 2, 2, 2, 1456, 1459, 3, 2, 2, 2, 1457, 1455, 3, 2, 2, 2, 1457, 1458,
	3, 2, 2, 2, 1458, 1460, 3, 2, 2, 2, 1459, 1457, 3, 2, 2, 2, 1460, 1461,
	7, 45, 2, 2, 1461, 1462, 5, 152, 77, 2, 1462, 1463, 5, 362, 182, 2, 1463,
	139, 3, 2, 2, 2, 1464, 1470, 5, 150, 76, 2, 1465, 1466, 5, 364, 183, 2,
	1466, 1467, 5, 150, 76, 2, 1467, 1469, 3, 2, 2, 2, 1468, 1465, 3, 2, 2,
	2, 1469, 1472, 3, 2, 2, 2, 1470, 1468, 3, 2, 2, 2, 1470, 1471, 3, 2, 2,
	2, 1471, 1473, 3, 2, 2, 2, 1472, 1470, 3, 2, 2, 2, 1473, 1474, 7, 45, 2,
	2, 1474, 1475, 5, 152, 77, 2, 1475, 1476, 5, 362, 182, 2, 1476, 141, 3,
	2, 2, 2, 1477, 1478, 5, 152, 77, 2, 1478, 1479, 5, 346, 174, 2, 1479, 1480,
	5, 152, 77, 2, 1480, 1481, 5, 362, 182, 2, 1481, 143, 3, 2, 2, 2, 1482,
	1483, 5, 156, 79, 2, 1483, 1484, 5, 362, 182, 2, 1484, 145, 3, 2, 2, 2,
	1485, 1486, 5, 172, 87, 2, 1486, 1487, 5, 362, 182, 2, 1487, 147, 3, 2,
	2, 2, 1488, 1489, 5, 358, 180, 2, 1489, 1491, 7, 48, 2, 2, 1490, 1492,
	5, 294, 148, 2, 1491, 1490, 3, 2, 2, 2, 1491, 1492, 3, 2, 2, 2, 1492, 1495,
	3, 2, 2, 2, 1493, 1495, 7, 92, 2, 2, 1494, 1488, 3, 2, 2, 2, 1494, 1493,
	3, 2, 2, 2, 1495, 149, 3, 2, 2, 2, 1496, 1498, 5, 358, 180, 2, 1497, 1499,
	5, 294, 148, 2, 1498, 1497, 3, 2, 2, 2, 1498, 1499, 3, 2, 2, 2, 1499, 1502,
	3, 2, 2, 2, 1500, 1502, 7, 92, 2, 2, 1501, 1496, 3, 2, 2, 2, 1501, 1500,
	3, 2, 2, 2, 1502, 151, 3, 2, 2, 2, 1503, 1509, 5, 156, 79, 2, 1504, 1505,
	5, 364, 183, 2, 1505, 1506, 5, 156, 79, 2, 1506, 1508, 3, 2, 2, 2, 1507,
	1504, 3, 2, 2, 2, 1508, 1511, 3, 2, 2, 2, 1509, 1507, 3, 2, 2, 2, 1509,
	1510, 3, 2, 2, 2, 1510, 153, 3, 2, 2, 2, 1511, 1509, 3, 2, 2, 2, 1512,
	1513, 5, 374, 188, 2, 1513, 1514, 5, 358, 180, 2, 1514, 1515, 5, 226, 114,
	2, 1515, 1516, 5, 376, 189, 2, 1516, 1525, 3, 2, 2, 2, 1517, 1525, 5, 358,
	180, 2, 1518, 1525, 7, 92, 2, 2, 1519, 1520, 5, 370, 186, 2, 1520, 1521,
	5, 156, 79, 2, 1521, 1522, 5, 372, 187, 2, 1522, 1525, 3, 2, 2, 2, 1523,
	1525, 5, 274, 138, 2, 1524, 1512, 3, 2, 2, 2, 1524, 1517, 3, 2, 2, 2, 1524,
	1518, 3, 2, 2, 2, 1524, 1519, 3, 2, 2, 2, 1524, 1523, 3, 2, 2, 2, 1525,
	155, 3, 2, 2, 2, 1526, 1527, 8, 79, 1, 2, 1527, 1547, 5, 246, 124, 2, 1528,
	1547, 5, 154, 78, 2, 1529, 1547, 5, 186, 94, 2, 1530, 1547, 5, 180, 91,
	2, 1531, 1547, 5, 176, 89, 2, 1532, 1547, 5, 204, 103, 2, 1533, 1547, 5,
	206, 104, 2, 1534, 1547, 5, 228, 115, 2, 1535, 1547, 5, 238, 120, 2, 1536,
	1547, 5, 232, 117, 2, 1537, 1547, 5, 240, 121, 2, 1538, 1547, 5, 244, 123,
	2, 1539, 1547, 5, 242, 122, 2, 1540, 1547, 5, 252, 127, 2, 1541, 1547,
	5, 260, 131, 2, 1542, 1547, 5, 264, 133, 2, 1543, 1547, 5, 266, 134, 2,
	1544, 1547, 5, 270, 136, 2, 1545, 1547, 5, 188, 95, 2, 1546, 1526, 3, 2,
	2, 2, 1546, 1528, 3, 2, 2, 2, 1546, 1529, 3, 2, 2, 2, 1546, 1530, 3, 2,
	2, 2, 1546, 1531, 3, 2, 2, 2, 1546, 1532, 3, 2, 2, 2, 1546, 1533, 3, 2,
	2, 2, 1546, 1534, 3, 2, 2, 2, 1546, 1535, 3, 2, 2, 2, 1546, 1536, 3, 2,
	2, 2, 1546, 1537, 3, 2, 2, 2, 1546, 1538, 3, 2, 2, 2, 1546, 1539, 3, 2,
	2, 2, 1546, 1540, 3, 2, 2, 2, 1546, 1541, 3, 2, 2, 2, 1546, 1542, 3, 2,
	2, 2, 1546, 1543, 3, 2, 2, 2, 1546, 1544, 3, 2, 2, 2, 1546, 1545, 3, 2,
	2, 2, 1547, 1602, 3, 2, 2, 2, 1548, 1549, 12, 12, 2, 2, 1549, 1550, 5,
	182, 92, 2, 1550, 1551, 5, 156, 79, 13, 1551, 1601, 3, 2, 2, 2, 1552, 1553,
	12, 11, 2, 2, 1553, 1554, 5, 352, 177, 2, 1554, 1555, 5, 156, 79, 12, 1555,
	1601, 3, 2, 2, 2, 1556, 1557, 12, 10, 2, 2, 1557, 1558, 5, 350, 176, 2,
	1558, 1559, 5, 156, 79, 11, 1559, 1601, 3, 2, 2, 2, 1560, 1561, 12, 9,
	2, 2, 1561, 1562, 5, 348, 175, 2, 1562, 1563, 5, 156, 79, 10, 1563, 1601,
	3, 2, 2, 2, 1564, 1565, 12, 8, 2, 2, 1565, 1566, 5, 326, 164, 2, 1566,
	1567, 5, 156, 79, 9, 1567, 1601, 3, 2, 2, 2, 1568, 1569, 12, 5, 2, 2, 1569,
	1570, 5, 340, 171, 2, 1570, 1571, 5, 156, 79, 6, 1571, 1601, 3, 2, 2, 2,
	1572, 1573, 12, 4, 2, 2, 1573, 1574, 5, 342, 172, 2, 1574, 1575, 5, 156,
	79, 5, 1575, 1601, 3, 2, 2, 2, 1576, 1577, 12, 3, 2, 2, 1577, 1578, 5,
	344, 173, 2, 1578, 1579, 5, 156, 79, 4, 1579, 1601, 3, 2, 2, 2, 1580, 1581,
	12, 21, 2, 2, 1581, 1601, 7, 48, 2, 2, 1582, 1583, 12, 20, 2, 2, 1583,
	1601, 7, 46, 2, 2, 1584, 1585, 12, 19, 2, 2, 1585, 1601, 5, 190, 96, 2,
	1586, 1587, 12, 18, 2, 2, 1587, 1601, 5, 174, 88, 2, 1588, 1589, 12, 16,
	2, 2, 1589, 1601, 5, 180, 91, 2, 1590, 1591, 12, 15, 2, 2, 1591, 1601,
	5, 184, 93, 2, 1592, 1593, 12, 14, 2, 2, 1593, 1601, 5, 178, 90, 2, 1594,
	1595, 12, 13, 2, 2, 1595, 1601, 5, 158, 80, 2, 1596, 1597, 12, 7, 2, 2,
	1597, 1601, 5, 192, 97, 2, 1598, 1599, 12, 6, 2, 2, 1599, 1601, 5, 194,
	98, 2, 1600, 1548, 3, 2, 2, 2, 1600, 1552, 3, 2, 2, 2, 1600, 1556, 3, 2,
	2, 2, 1600, 1560, 3, 2, 2, 2, 1600, 1564, 3, 2, 2, 2, 1600, 1568, 3, 2,
	2, 2, 1600, 1572, 3, 2, 2, 2, 1600, 1576, 3, 2, 2, 2, 1600, 1580, 3, 2,
	2, 2, 1600, 1582, 3, 2, 2, 2, 1600, 1584, 3, 2, 2, 2, 1600, 1586, 3, 2,
	2, 2, 1600, 1588, 3, 2, 2, 2, 1600, 1590, 3, 2, 2, 2, 1600, 1592, 3, 2,
	2, 2, 1600, 1594, 3, 2, 2, 2, 1600, 1596, 3, 2, 2, 2, 1600, 1598, 3, 2,
	2, 2, 1601, 1604, 3, 2, 2, 2, 1602, 1600, 3, 2, 2, 2, 1602, 1603, 3, 2,
	2, 2, 1603, 157, 3, 2, 2, 2, 1604, 1602, 3, 2, 2, 2, 1605, 1607, 5, 354,
	178, 2, 1606, 1608, 7, 96, 2, 2, 1607, 1606, 3, 2, 2, 2, 1607, 1608, 3,
	2, 2, 2, 1608, 1615, 3, 2, 2, 2, 1609, 1616, 5, 358, 180, 2, 1610, 1611,
	5, 374, 188, 2, 1611, 1612, 5, 358, 180, 2, 1612, 1613, 5, 226, 114, 2,
	1613, 1614, 5, 376, 189, 2, 1614, 1616, 3, 2, 2, 2, 1615, 1609, 3, 2, 2,
	2, 1615, 1610, 3, 2, 2, 2, 1616, 1619, 3, 2, 2, 2, 1617, 1620, 5, 174,
	88, 2, 1618, 1620, 5, 184, 93, 2, 1619, 1617, 3, 2, 2, 2, 1619, 1618, 3,
	2, 2, 2, 1619, 1620, 3, 2, 2, 2, 1620, 159, 3, 2, 2, 2, 1621, 1631, 5,
	370, 186, 2, 1622, 1628, 5, 156, 79, 2, 1623, 1624, 5, 364, 183, 2, 1624,
	1625, 5, 156, 79, 2, 1625, 1627, 3, 2, 2, 2, 1626, 1623, 3, 2, 2, 2, 1627,
	1630, 3, 2, 2, 2, 1628, 1626, 3, 2, 2, 2, 1628, 1629, 3, 2, 2, 2, 1629,
	1632, 3, 2, 2, 2, 1630, 1628, 3, 2, 2, 2, 1631, 1622, 3, 2, 2, 2, 1631,
	1632, 3, 2, 2, 2, 1632, 1633, 3, 2, 2, 2, 1633, 1634, 5, 372, 187, 2, 1634,
	161, 3, 2, 2, 2, 1635, 1641, 5, 156, 79, 2, 1636, 1637, 5, 364, 183, 2,
	1637, 1638, 5, 156, 79, 2, 1638, 1640, 3, 2, 2, 2, 1639, 1636, 3, 2, 2,
	2, 1640, 1643, 3, 2, 2, 2, 1641, 1639, 3, 2, 2, 2, 1641, 1642, 3, 2, 2,
	2, 1642, 163, 3, 2, 2, 2, 1643, 1641, 3, 2, 2, 2, 1644, 1645, 5, 166, 84,
	2, 1645, 165, 3, 2, 2, 2, 1646, 1647, 5, 168, 85, 2, 1647, 167, 3, 2, 2,
	2, 1648, 1651, 5, 170, 86, 2, 1649, 1651, 5, 172, 87, 2, 1650, 1648, 3,
	2, 2, 2, 1650, 1649, 3, 2, 2, 2, 1651, 1653, 3, 2, 2, 2, 1652, 1654, 7,
	96, 2, 2, 1653, 1652, 3, 2, 2, 2, 1653, 1654, 3, 2, 2, 2, 1654, 1656, 3,
	2, 2, 2, 1655, 1650, 3, 2, 2, 2, 1656, 1657, 3, 2, 2, 2, 1657, 1655, 3,
	2, 2, 2, 1657, 1658, 3, 2, 2, 2, 1658, 169, 3, 2, 2, 2, 1659, 1663, 7,
	60, 2, 2, 1660, 1661, 5, 358, 180, 2, 1661, 1662, 7, 25, 2, 2, 1662, 1664,
	3, 2, 2, 2, 1663, 1660, 3, 2, 2, 2, 1663, 1664, 3, 2, 2, 2, 1664, 1665,
	3, 2, 2, 2, 1665, 1668, 5, 358, 180, 2, 1666, 1669, 5, 160, 81, 2, 1667,
	1669, 5, 228, 115, 2, 1668, 1666, 3, 2, 2, 2, 1668, 1667, 3, 2, 2, 2, 1668,
	1669, 3, 2, 2, 2, 1669, 171, 3, 2, 2, 2, 1670, 1673, 7, 60, 2, 2, 1671,
	1674, 5, 276, 139, 2, 1672, 1674, 5, 282, 142, 2, 1673, 1671, 3, 2, 2,
	2, 1673, 1672, 3, 2, 2, 2, 1674, 173, 3, 2, 2, 2, 1675, 1678, 5, 160, 81,
	2, 1676, 1678, 5, 228, 115, 2, 1677, 1675, 3, 2, 2, 2, 1677, 1676, 3, 2,
	2, 2, 1678, 175, 3, 2, 2, 2, 1679, 1680, 7, 27, 2, 2, 1680, 1681, 5, 156,
	79, 2, 1681, 177, 3, 2, 2, 2, 1682, 1685, 7, 27, 2, 2, 1683, 1686, 5, 160,
	81, 2, 1684, 1686, 5, 228, 115, 2, 1685, 1683, 3, 2, 2, 2, 1685, 1684,
	3, 2, 2, 2, 1686, 179, 3, 2, 2, 2, 1687, 1688, 7, 28, 2, 2, 1688, 1689,
	5, 156, 79, 2, 1689, 181, 3, 2, 2, 2, 1690, 1691, 7, 28, 2, 2, 1691, 183,
	3, 2, 2, 2, 1692, 1695, 5, 374, 188, 2, 1693, 1696, 5, 210, 106, 2, 1694,
	1696, 5, 156, 79, 2, 1695, 1693, 3, 2, 2, 2, 1695, 1694, 3, 2, 2, 2, 1696,
	1697, 3, 2, 2, 2, 1697, 1698, 5, 376, 189, 2, 1698, 185, 3, 2, 2, 2, 1699,
	1700, 5, 294, 148, 2, 1700, 1704, 5, 366, 184, 2, 1701, 1705, 5, 196, 99,
	2, 1702, 1705, 5, 200, 101, 2, 1703, 1705, 5, 202, 102, 2, 1704, 1701,
	3, 2, 2, 2, 1704, 1702, 3, 2, 2, 2, 1704, 1703, 3, 2, 2, 2, 1704, 1705,
	3, 2, 2, 2, 1705, 1706, 3, 2, 2, 2, 1706, 1707, 5, 368, 185, 2, 1707, 187,
	3, 2, 2, 2, 1708, 1709, 5, 294, 148, 2, 1709, 1711, 5, 370, 186, 2, 1710,
	1712, 7, 96, 2, 2, 1711, 1710, 3, 2, 2, 2, 1711, 1712, 3, 2, 2, 2, 1712,
	1714, 3, 2, 2, 2, 1713, 1715, 5, 162, 82, 2, 1714, 1713, 3, 2, 2, 2, 1714,
	1715, 3, 2, 2, 2, 1715, 1717, 3, 2, 2, 2, 1716, 1718, 7, 96, 2, 2, 1717,
	1716, 3, 2, 2, 2, 1717, 1718, 3, 2, 2, 2, 1718, 1719, 3, 2, 2, 2, 1719,
	1720, 5, 372, 187, 2, 1720, 189, 3, 2, 2, 2, 1721, 1722, 7, 46, 2, 2, 1722,
	1723, 7, 46, 2, 2, 1723, 1724, 5, 156, 79, 2, 1724, 191, 3, 2, 2, 2, 1725,
	1726, 5, 294, 148, 2, 1726, 1727, 7, 48, 2, 2, 1727, 193, 3, 2, 2, 2, 1728,
	1729, 5, 294, 148, 2, 1729, 1730, 7, 46, 2, 2, 1730, 195, 3, 2, 2, 2, 1731,
	1732, 5, 198, 100, 2, 1732, 1733, 5, 362, 182, 2, 1733, 1735, 3, 2, 2,
	2, 1734, 1731, 3, 2, 2, 2, 1735, 1738, 3, 2, 2, 2, 1736, 1734, 3, 2, 2,
	2, 1736, 1737, 3, 2, 2, 2, 1737, 1739, 3, 2, 2, 2, 1738, 1736, 3, 2, 2,
	2, 1739, 1740, 5, 198, 100, 2, 1740, 197, 3, 2, 2, 2, 1741, 1742, 5, 220,
	111, 2, 1742, 1743, 7, 29, 2, 2, 1743, 1744, 5, 156, 79, 2, 1744, 199,
	3, 2, 2, 2, 1745, 1746, 5, 156, 79, 2, 1746, 1747, 5, 362, 182, 2, 1747,
	1749, 3, 2, 2, 2, 1748, 1745, 3, 2, 2, 2, 1749, 1752, 3, 2, 2, 2, 1750,
	1748, 3, 2, 2, 2, 1750, 1751, 3, 2, 2, 2, 1751, 1753, 3, 2, 2, 2, 1752,
	1750, 3, 2, 2, 2, 1753, 1754, 5, 156, 79, 2, 1754, 201, 3, 2, 2, 2, 1755,
	1756, 5, 208, 105, 2, 1756, 1757, 5, 362, 182, 2, 1757, 1759, 3, 2, 2,
	2, 1758, 1755, 3, 2, 2, 2, 1759, 1762, 3, 2, 2, 2, 1760, 1758, 3, 2, 2,
	2, 1760, 1761, 3, 2, 2, 2, 1761, 1763, 3, 2, 2, 2, 1762, 1760, 3, 2, 2,
	2, 1763, 1764, 5, 208, 105, 2, 1764, 203, 3, 2, 2, 2, 1765, 1771, 5, 366,
	184, 2, 1766, 1767, 5, 156, 79, 2, 1767, 1768, 5, 362, 182, 2, 1768, 1770,
	3, 2, 2, 2, 1769, 1766, 3, 2, 2, 2, 1770, 1773, 3, 2, 2, 2, 1771, 1769,
	3, 2, 2, 2, 1771, 1772, 3, 2, 2, 2, 1772, 1774, 3, 2, 2, 2, 1773, 1771,
	3, 2, 2, 2, 1774, 1775, 5, 156, 79, 2, 1775, 1776, 5, 368, 185, 2, 1776,
	205, 3, 2, 2, 2, 1777, 1783, 5, 366, 184, 2, 1778, 1779, 5, 208, 105, 2,
	1779, 1780, 5, 362, 182, 2, 1780, 1782, 3, 2, 2, 2, 1781, 1778, 3, 2, 2,
	2, 1782, 1785, 3, 2, 2, 2, 1783, 1781, 3, 2, 2, 2, 1783, 1784, 3, 2, 2,
	2, 1784, 1786, 3, 2, 2, 2, 1785, 1783, 3, 2, 2, 2, 1786, 1787, 5, 208,
	105, 2, 1787, 1788, 5, 368, 185, 2, 1788, 207, 3, 2, 2, 2, 1789, 1790,
	5, 374, 188, 2, 1790, 1791, 5, 156, 79, 2, 1791, 1792, 5, 376, 189, 2,
	1792, 1793, 7, 29, 2, 2, 1793, 1794, 5, 156, 79, 2, 1794, 209, 3, 2, 2,
	2, 1795, 1799, 5, 214, 108, 2, 1796, 1799, 5, 216, 109, 2, 1797, 1799,
	5, 212, 107, 2, 1798, 1795, 3, 2, 2, 2, 1798, 1796, 3, 2, 2, 2, 1798, 1797,
	3, 2, 2, 2, 1799, 211, 3, 2, 2, 2, 1800, 1801, 5, 156, 79, 2, 1801, 1802,
	9, 4, 2, 2, 1802, 1803, 5, 156, 79, 2, 1803, 213, 3, 2, 2, 2, 1804, 1805,
	5, 156, 79, 2, 1805, 1806, 9, 4, 2, 2, 1806, 215, 3, 2, 2, 2, 1807, 1808,
	9, 4, 2, 2, 1808, 1809, 5, 156, 79, 2, 1809, 217, 3, 2, 2, 2, 1810, 1811,
	5, 358, 180, 2, 1811, 1813, 5, 354, 178, 2, 1812, 1814, 7, 96, 2, 2, 1813,
	1812, 3, 2, 2, 2, 1813, 1814, 3, 2, 2, 2, 1814, 1816, 3, 2, 2, 2, 1815,
	1810, 3, 2, 2, 2, 1816, 1819, 3, 2, 2, 2, 1817, 1815, 3, 2, 2, 2, 1817,
	1818, 3, 2, 2, 2, 1818, 1820, 3, 2, 2, 2, 1819, 1817, 3, 2, 2, 2, 1820,
	1821, 5, 358, 180, 2, 1821, 219, 3, 2, 2, 2, 1822, 1831, 5, 358, 180, 2,
	1823, 1825, 5, 354, 178, 2, 1824, 1826, 7, 96, 2, 2, 1825, 1824, 3, 2,
	2, 2, 1825, 1826, 3, 2, 2, 2, 1826, 1827, 3, 2, 2, 2, 1827, 1828, 5, 358,
	180, 2, 1828, 1830, 3, 2, 2, 2, 1829, 1823, 3, 2, 2, 2, 1830, 1833, 3,
	2, 2, 2, 1831, 1829, 3, 2, 2, 2, 1831, 1832, 3, 2, 2, 2, 1832, 221, 3,
	2, 2, 2, 1833, 1831, 3, 2, 2, 2, 1834, 1836, 5, 224, 113, 2, 1835, 1834,
	3, 2, 2, 2, 1836, 1839, 3, 2, 2, 2, 1837, 1835, 3, 2, 2, 2, 1837, 1838,
	3, 2, 2, 2, 1838, 223, 3, 2, 2, 2, 1839, 1837, 3, 2, 2, 2, 1840, 1847,
	5, 358, 180, 2, 1841, 1842, 5, 370, 186, 2, 1842, 1843, 5, 358, 180, 2,
	1843, 1844, 5, 358, 180, 2, 1844, 1845, 5, 372, 187, 2, 1845, 1847, 3,
	2, 2, 2, 1846, 1840, 3, 2, 2, 2, 1846, 1841, 3, 2, 2, 2, 1847, 225, 3,
	2, 2, 2, 1848, 1850, 5, 294, 148, 2, 1849, 1848, 3, 2, 2, 2, 1850, 1853,
	3, 2, 2, 2, 1851, 1849, 3, 2, 2, 2, 1851, 1852, 3, 2, 2, 2, 1852, 227,
	3, 2, 2, 2, 1853, 1851, 3, 2, 2, 2, 1854, 1856, 5, 366, 184, 2, 1855, 1857,
	5, 230, 116, 2, 1856, 1855, 3, 2, 2, 2, 1856, 1857, 3, 2, 2, 2, 1857, 1858,
	3, 2, 2, 2, 1858, 1862, 9, 2, 2, 2, 1859, 1861, 7, 96, 2, 2, 1860, 1859,
	3, 2, 2, 2, 1861, 1864, 3, 2, 2, 2, 1862, 1860, 3, 2, 2, 2, 1862, 1863,
	3, 2, 2, 2, 1863, 1865, 3, 2, 2, 2, 1864, 1862, 3, 2, 2, 2, 1865, 1866,
	5, 152, 77, 2, 1866, 1867, 5, 368, 185, 2, 1867, 1888, 3, 2, 2, 2, 1868,
	1870, 5, 366, 184, 2, 1869, 1871, 5, 230, 116, 2, 1870, 1869, 3, 2, 2,
	2, 1870, 1871, 3, 2, 2, 2, 1871, 1872, 3, 2, 2, 2, 1872, 1876, 9, 2, 2,
	2, 1873, 1875, 7, 96, 2, 2, 1874, 1873, 3, 2, 2, 2, 1875, 1878, 3, 2, 2,
	2, 1876, 1874, 3, 2, 2, 2, 1876, 1877, 3, 2, 2, 2, 1877, 1882, 3, 2, 2,
	2, 1878, 1876, 3, 2, 2, 2, 1879, 1881, 5, 94, 48, 2, 1880, 1879, 3, 2,
	2, 2, 1881, 1884, 3, 2, 2, 2, 1882, 1880, 3, 2, 2, 2, 1882, 1883, 3, 2,
	2, 2, 1883, 1885, 3, 2, 2, 2, 1884, 1882, 3, 2, 2, 2, 1885, 1886, 5, 368,
	185, 2, 1886, 1888, 3, 2, 2, 2, 1887, 1854, 3, 2, 2, 2, 1887, 1868, 3,
	2, 2, 2, 1888, 229, 3, 2, 2, 2, 1889, 1895, 5, 358, 180, 2, 1890, 1891,
	5, 364, 183, 2, 1891, 1892, 5, 358, 180, 2, 1892, 1894, 3, 2, 2, 2, 1893,
	1890, 3, 2, 2, 2, 1894, 1897, 3, 2, 2, 2, 1895, 1893, 3, 2, 2, 2, 1895,
	1896, 3, 2, 2, 2, 1896, 231, 3, 2, 2, 2, 1897, 1895, 3, 2, 2, 2, 1898,
	1899, 5, 234, 118, 2, 1899, 233, 3, 2, 2, 2, 1900, 1906, 5, 366, 184, 2,
	1901, 1902, 5, 236, 119, 2, 1902, 1903, 5, 362, 182, 2, 1903, 1905, 3,
	2, 2, 2, 1904, 1901, 3, 2, 2, 2, 1905, 1908, 3, 2, 2, 2, 1906, 1904, 3,
	2, 2, 2, 1906, 1907, 3, 2, 2, 2, 1907, 1909, 3, 2, 2, 2, 1908, 1906, 3,
	2, 2, 2, 1909, 1910, 5, 236, 119, 2, 1910, 1911, 5, 368, 185, 2, 1911,
	235, 3, 2, 2, 2, 1912, 1914, 5, 220, 111, 2, 1913, 1915, 7, 48, 2, 2, 1914,
	1913, 3, 2, 2, 2, 1914, 1915, 3, 2, 2, 2, 1915, 1916, 3, 2, 2, 2, 1916,
	1917, 7, 45, 2, 2, 1917, 1918, 5, 156, 79, 2, 1918, 237, 3, 2, 2, 2, 1919,
	1920, 5, 370, 186, 2, 1920, 1921, 5, 88, 45, 2, 1921, 1923, 9, 2, 2, 2,
	1922, 1924, 7, 48, 2, 2, 1923, 1922, 3, 2, 2, 2, 1923, 1924, 3, 2, 2, 2,
	1924, 1926, 3, 2, 2, 2, 1925, 1927, 7, 47, 2, 2, 1926, 1925, 3, 2, 2, 2,
	1926, 1927, 3, 2, 2, 2, 1927, 1931, 3, 2, 2, 2, 1928, 1930, 7, 96, 2, 2,
	1929, 1928, 3, 2, 2, 2, 1930, 1933, 3, 2, 2, 2, 1931, 1929, 3, 2, 2, 2,
	1931, 1932, 3, 2, 2, 2, 1932, 1934, 3, 2, 2, 2, 1933, 1931, 3, 2, 2, 2,
	1934, 1935, 5, 90, 46, 2, 1935, 1936, 5, 372, 187, 2, 1936, 1940, 5, 366,
	184, 2, 1937, 1939, 5, 94, 48, 2, 1938, 1937, 3, 2, 2, 2, 1939, 1942, 3,
	2, 2, 2, 1940, 1938, 3, 2, 2, 2, 1940, 1941, 3, 2, 2, 2, 1941, 1943, 3,
	2, 2, 2, 1942, 1940, 3, 2, 2, 2, 1943, 1944, 5, 368, 185, 2, 1944, 239,
	3, 2, 2, 2, 1945, 1946, 5, 348, 175, 2, 1946, 1947, 5, 156, 79, 2, 1947,
	241, 3, 2, 2, 2, 1948, 1949, 5, 356, 179, 2, 1949, 1950, 5, 156, 79, 2,
	1950, 243, 3, 2, 2, 2, 1951, 1952, 5, 332, 167, 2, 1952, 1953, 5, 156,
	79, 2, 1953, 245, 3, 2, 2, 2, 1954, 1955, 5, 248, 125, 2, 1955, 1957, 7,
	25, 2, 2, 1956, 1958, 7, 96, 2, 2, 1957, 1956, 3, 2, 2, 2, 1957, 1958,
	3, 2, 2, 2, 1958, 1962, 3, 2, 2, 2, 1959, 1961, 5, 250, 126, 2, 1960, 1959,
	3, 2, 2, 2, 1961, 1964, 3, 2, 2, 2, 1962, 1960, 3, 2, 2, 2, 1962, 1963,
	3, 2, 2, 2, 1963, 1965, 3, 2, 2, 2, 1964, 1962, 3, 2, 2, 2, 1965, 1967,
	5, 358, 180, 2, 1966, 1968, 7, 96, 2, 2, 1967, 1966, 3, 2, 2, 2, 1967,
	1968, 3, 2, 2, 2, 1968, 1969, 3, 2, 2, 2, 1969, 1970, 5, 156, 79, 2, 1970,
	247, 3, 2, 2, 2, 1971, 1972, 7, 47, 2, 2, 1972, 1974, 5, 358, 180, 2, 1973,
	1975, 7, 48, 2, 2, 1974, 1973, 3, 2, 2, 2, 1974, 1975, 3, 2, 2, 2, 1975,
	1976, 3, 2, 2, 2, 1976, 1977, 7, 45, 2, 2, 1977, 1978, 5, 156, 79, 2, 1978,
	249, 3, 2, 2, 2, 1979, 1985, 5, 248, 125, 2, 1980, 1982, 5, 358, 180, 2,
	1981, 1983, 5, 156, 79, 2, 1982, 1981, 3, 2, 2, 2, 1982, 1983, 3, 2, 2,
	2, 1983, 1985, 3, 2, 2, 2, 1984, 1979, 3, 2, 2, 2, 1984, 1980, 3, 2, 2,
	2, 1985, 1986, 3, 2, 2, 2, 1986, 1988, 7, 25, 2, 2, 1987, 1989, 7, 96,
	2, 2, 1988, 1987, 3, 2, 2, 2, 1988, 1989, 3, 2, 2, 2, 1989, 251, 3, 2,
	2, 2, 1990, 1994, 5, 256, 129, 2, 1991, 1993, 5, 258, 130, 2, 1992, 1991,
	3, 2, 2, 2, 1993, 1996, 3, 2, 2, 2, 1994, 1992, 3, 2, 2, 2, 1994, 1995,
	3, 2, 2, 2, 1995, 1997, 3, 2, 2, 2, 1996, 1994, 3, 2, 2, 2, 1997, 1998,
	5, 254, 128, 2, 1998, 253, 3, 2, 2, 2, 1999, 2000, 7, 92, 2, 2, 2000, 2004,
	5, 366, 184, 2, 2001, 2003, 5, 94, 48, 2, 2002, 2001, 3, 2, 2, 2, 2003,
	2006, 3, 2, 2, 2, 2004, 2002, 3, 2, 2, 2, 2004, 2005, 3, 2, 2, 2, 2005,
	2007, 3, 2, 2, 2, 2006, 2004, 3, 2, 2, 2, 2007, 2008, 5, 152, 77, 2, 2008,
	2009, 5, 368, 185, 2, 2009, 255, 3, 2, 2, 2, 2010, 2011, 7, 46, 2, 2, 2011,
	2012, 7, 25, 2, 2, 2012, 2013, 5, 156, 79, 2, 2013, 2017, 5, 366, 184,
	2, 2014, 2016, 5, 94, 48, 2, 2015, 2014, 3, 2, 2, 2, 2016, 2019, 3, 2,
	2, 2, 2017, 2015, 3, 2, 2, 2, 2017, 2018, 3, 2, 2, 2, 2018, 2020, 3, 2,
	2, 2, 2019, 2017, 3, 2, 2, 2, 2020, 2021, 5, 152, 77, 2, 2021, 2022, 5,
	368, 185, 2, 2022, 257, 3, 2, 2, 2, 2023, 2024, 5, 156, 79, 2, 2024, 2028,
	5, 366, 184, 2, 2025, 2027, 5, 94, 48, 2, 2026, 2025, 3, 2, 2, 2, 2027,
	2030, 3, 2, 2, 2, 2028, 2026, 3, 2, 2, 2, 2028, 2029, 3, 2, 2, 2, 2029,
	2031, 3, 2, 2, 2, 2030, 2028, 3, 2, 2, 2, 2031, 2032, 5, 152, 77, 2, 2032,
	2033, 5, 368, 185, 2, 2033, 259, 3, 2, 2, 2, 2034, 2035, 7, 46, 2, 2, 2035,
	2036, 5, 156, 79, 2, 2036, 2037, 7, 45, 2, 2, 2037, 2039, 7, 25, 2, 2,
	2038, 2040, 5, 262, 132, 2, 2039, 2038, 3, 2, 2, 2, 2040, 2041, 3, 2, 2,
	2, 2041, 2039, 3, 2, 2, 2, 2041, 2042, 3, 2, 2, 2, 2042, 261, 3, 2, 2,
	2, 2043, 2049, 5, 100, 51, 2, 2044, 2045, 5, 364, 183, 2, 2045, 2046, 5,
	100, 51, 2, 2046, 2048, 3, 2, 2, 2, 2047, 2044, 3, 2, 2, 2, 2048, 2051,
	3, 2, 2, 2, 2049, 2047, 3, 2, 2, 2, 2049, 2050, 3, 2, 2, 2, 2050, 2052,
	3, 2, 2, 2, 2051, 2049, 3, 2, 2, 2, 2052, 2056, 5, 366, 184, 2, 2053, 2055,
	5, 94, 48, 2, 2054, 2053, 3, 2, 2, 2, 2055, 2058, 3, 2, 2, 2, 2056, 2054,
	3, 2, 2, 2, 2056, 2057, 3, 2, 2, 2, 2057, 2059, 3, 2, 2, 2, 2058, 2056,
	3, 2, 2, 2, 2059, 2060, 5, 152, 77, 2, 2060, 2061, 5, 368, 185, 2, 2061,
	263, 3, 2, 2, 2, 2062, 2063, 7, 47, 2, 2, 2063, 2065, 5, 358, 180, 2, 2064,
	2066, 7, 48, 2, 2, 2065, 2064, 3, 2, 2, 2, 2065, 2066, 3, 2, 2, 2, 2066,
	2067, 3, 2, 2, 2, 2067, 2068, 7, 45, 2, 2, 2068, 2069, 5, 132, 67, 2, 2069,
	2070, 7, 25, 2, 2, 2070, 2074, 5, 366, 184, 2, 2071, 2073, 5, 94, 48, 2,
	2072, 2071, 3, 2, 2, 2, 2073, 2076, 3, 2, 2, 2, 2074, 2072, 3, 2, 2, 2,
	2074, 2075, 3, 2, 2, 2, 2075, 2077, 3, 2, 2, 2, 2076, 2074, 3, 2, 2, 2,
	2077, 2078, 5, 152, 77, 2, 2078, 2080, 5, 368, 185, 2, 2079, 2081, 5, 268,
	135, 2, 2080, 2079, 3, 2, 2, 2, 2080, 2081, 3, 2, 2, 2, 2081, 265, 3, 2,
	2, 2, 2082, 2086, 7, 47, 2, 2, 2083, 2084, 5, 358, 180, 2, 2084, 2085,
	7, 45, 2, 2, 2085, 2087, 3, 2, 2, 2, 2086, 2083, 3, 2, 2, 2, 2086, 2087,
	3, 2, 2, 2, 2087, 2088, 3, 2, 2, 2, 2088, 2090, 5, 358, 180, 2, 2089, 2091,
	7, 48, 2, 2, 2090, 2089, 3, 2, 2, 2, 2090, 2091, 3, 2, 2, 2, 2091, 2092,
	3, 2, 2, 2, 2092, 2093, 7, 45, 2, 2, 2093, 2094, 5, 156, 79, 2, 2094, 2095,
	7, 25, 2, 2, 2095, 2099, 5, 366, 184, 2, 2096, 2098, 5, 94, 48, 2, 2097,
	2096, 3, 2, 2, 2, 2098, 2101, 3, 2, 2, 2, 2099, 2097, 3, 2, 2, 2, 2099,
	2100, 3, 2, 2, 2, 2100, 2102, 3, 2, 2, 2, 2101, 2099, 3, 2, 2, 2, 2102,
	2103, 5, 152, 77, 2, 2103, 2105, 5, 368, 185, 2, 2104, 2106, 5, 268, 135,
	2, 2105, 2104, 3, 2, 2, 2, 2105, 2106, 3, 2, 2, 2, 2106, 267, 3, 2, 2,
	2, 2107, 2108, 7, 92, 2, 2, 2108, 2112, 5, 366, 184, 2, 2109, 2111, 5,
	94, 48, 2, 2110, 2109, 3, 2, 2, 2, 2111, 2114, 3, 2, 2, 2, 2112, 2110,
	3, 2, 2, 2, 2112, 2113, 3, 2, 2, 2, 2113, 2115, 3, 2, 2, 2, 2114, 2112,
	3, 2, 2, 2, 2115, 2116, 5, 152, 77, 2, 2116, 2117, 5, 368, 185, 2, 2117,
	269, 3, 2, 2, 2, 2118, 2119, 7, 48, 2, 2, 2119, 2120, 7, 25, 2, 2, 2120,
	2124, 5, 366, 184, 2, 2121, 2123, 5, 94, 48, 2, 2122, 2121, 3, 2, 2, 2,
	2123, 2126, 3, 2, 2, 2, 2124, 2122, 3, 2, 2, 2, 2124, 2125, 3, 2, 2, 2,
	2125, 2127, 3, 2, 2, 2, 2126, 2124, 3, 2, 2, 2, 2127, 2128, 5, 152, 77,
	2, 2128, 2132, 5, 368, 185, 2, 2129, 2131, 5, 272, 137, 2, 2130, 2129,
	3, 2, 2, 2, 2131, 2134, 3, 2, 2, 2, 2132, 2130, 3, 2, 2, 2, 2132, 2133,
	3, 2, 2, 2, 2133, 2135, 3, 2, 2, 2, 2134, 2132, 3, 2, 2, 2, 2135, 2136,
	5, 128, 65, 2, 2136, 2154, 3, 2, 2, 2, 2137, 2138, 7, 48, 2, 2, 2138, 2139,
	7, 25, 2, 2, 2139, 2143, 5, 366, 184, 2, 2140, 2142, 5, 94, 48, 2, 2141,
	2140, 3, 2, 2, 2, 2142, 2145, 3, 2, 2, 2, 2143, 2141, 3, 2, 2, 2, 2143,
	2144, 3, 2, 2, 2, 2144, 2146, 3, 2, 2, 2, 2145, 2143, 3, 2, 2, 2, 2146,
	2147, 5, 152, 77, 2, 2147, 2149, 5, 368, 185, 2, 2148, 2150, 5, 272, 137,
	2, 2149, 2148, 3, 2, 2, 2, 2150, 2151, 3, 2, 2, 2, 2151, 2149, 3, 2, 2,
	2, 2151, 2152, 3, 2, 2, 2, 2152, 2154, 3, 2, 2, 2, 2153, 2118, 3, 2, 2,
	2, 2153, 2137, 3, 2, 2, 2, 2154, 271, 3, 2, 2, 2, 2155, 2160, 5, 358, 180,
	2, 2156, 2157, 5, 358, 180, 2, 2157, 2158, 5, 294, 148, 2, 2158, 2160,
	3, 2, 2, 2, 2159, 2155, 3, 2, 2, 2, 2159, 2156, 3, 2, 2, 2, 2160, 2161,
	3, 2, 2, 2, 2161, 2165, 5, 366, 184, 2, 2162, 2164, 5, 94, 48, 2, 2163,
	2162, 3, 2, 2, 2, 2164, 2167, 3, 2, 2, 2, 2165, 2163, 3, 2, 2, 2, 2165,
	2166, 3, 2, 2, 2, 2166, 2168, 3, 2, 2, 2, 2167, 2165, 3, 2, 2, 2, 2168,
	2169, 5, 152, 77, 2, 2169, 2170, 5, 368, 185, 2, 2170, 273, 3, 2, 2, 2,
	2171, 2181, 5, 288, 145, 2, 2172, 2181, 5, 290, 146, 2, 2173, 2181, 5,
	282, 142, 2, 2174, 2181, 5, 276, 139, 2, 2175, 2181, 7, 89, 2, 2, 2176,
	2181, 7, 79, 2, 2, 2177, 2181, 7, 80, 2, 2, 2178, 2181, 5, 322, 162, 2,
	2179, 2181, 7, 81, 2, 2, 2180, 2171, 3, 2, 2, 2, 2180, 2172, 3, 2, 2, 2,
	2180, 2173, 3, 2, 2, 2, 2180, 2174, 3, 2, 2, 2, 2180, 2175, 3, 2, 2, 2,
	2180, 2176, 3, 2, 2, 2, 2180, 2177, 3, 2, 2, 2, 2180, 2178, 3, 2, 2, 2,
	2180, 2179, 3, 2, 2, 2, 2181, 275, 3, 2, 2, 2, 2182, 2187, 7, 88, 2, 2,
	2183, 2186, 5, 278, 140, 2, 2184, 2186, 5, 280, 141, 2, 2185, 2183, 3,
	2, 2, 2, 2185, 2184, 3, 2, 2, 2, 2186, 2189, 3, 2, 2, 2, 2187, 2185, 3,
	2, 2, 2, 2187, 2188, 3, 2, 2, 2, 2188, 2190, 3, 2, 2, 2, 2189, 2187, 3,
	2, 2, 2, 2190, 2191, 7, 98, 2, 2, 2191, 277, 3, 2, 2, 2, 2192, 2193, 7,
	100, 2, 2, 2193, 279, 3, 2, 2, 2, 2194, 2200, 7, 99, 2, 2, 2195, 2196,
	5, 156, 79, 2, 2196, 2197, 5, 362, 182, 2, 2197, 2199, 3, 2, 2, 2, 2198,
	2195, 3, 2, 2, 2, 2199, 2202, 3, 2, 2, 2, 2200, 2198, 3, 2, 2, 2, 2200,
	2201, 3, 2, 2, 2, 2201, 2203, 3, 2, 2, 2, 2202, 2200, 3, 2, 2, 2, 2203,
	2204, 5, 156, 79, 2, 2204, 2205, 7, 42, 2, 2, 2205, 281, 3, 2, 2, 2, 2206,
	2212, 7, 87, 2, 2, 2207, 2211, 5, 284, 143, 2, 2208, 2211, 5, 286, 144,
	2, 2209, 2211, 7, 102, 2, 2, 2210, 2207, 3, 2, 2, 2, 2210, 2208, 3, 2,
	2, 2, 2210, 2209, 3, 2, 2, 2, 2211, 2214, 3, 2, 2, 2, 2212, 2210, 3, 2,
	2, 2, 2212, 2213, 3, 2, 2, 2, 2213, 2215, 3, 2, 2, 2, 2214, 2212, 3, 2,
	2, 2, 2215, 2216, 7, 101, 2, 2, 2216, 283, 3, 2, 2, 2, 2217, 2218, 7, 104,
	2, 2, 2218, 285, 3, 2, 2, 2, 2219, 2223, 7, 103, 2, 2, 2220, 2222, 7, 96,
	2, 2, 2221, 2220, 3, 2, 2, 2, 2222, 2225, 3, 2, 2, 2, 2223, 2221, 3, 2,
	2, 2, 2223, 2224, 3, 2, 2, 2, 2224, 2231, 3, 2, 2, 2, 2225, 2223, 3, 2,
	2, 2, 2226, 2227, 5, 156, 79, 2, 2227, 2228, 5, 362, 182, 2, 2228, 2230,
	3, 2, 2, 2, 2229, 2226, 3, 2, 2, 2, 2230, 2233, 3, 2, 2, 2, 2231, 2229,
	3, 2, 2, 2, 2231, 2232, 3, 2, 2, 2, 2232, 2234, 3, 2, 2, 2, 2233, 2231,
	3, 2, 2, 2, 2234, 2238, 5, 156, 79, 2, 2235, 2237, 7, 96, 2, 2, 2236, 2235,
	3, 2, 2, 2, 2237, 2240, 3, 2, 2, 2, 2238, 2236, 3, 2, 2, 2, 2238, 2239,
	3, 2, 2, 2, 2239, 2241, 3, 2, 2, 2, 2240, 2238, 3, 2, 2, 2, 2241, 2242,
	7, 42, 2, 2, 2242, 287, 3, 2, 2, 2, 2243, 2244, 7, 82, 2, 2, 2244, 289,
	3, 2, 2, 2, 2245, 2246, 9, 5, 2, 2, 2246, 291, 3, 2, 2, 2, 2247, 2259,
	5, 316, 159, 2, 2248, 2259, 5, 298, 150, 2, 2249, 2259, 5, 300, 151, 2,
	2250, 2259, 5, 302, 152, 2, 2251, 2259, 5, 304, 153, 2, 2252, 2259, 5,
	306, 154, 2, 2253, 2259, 5, 308, 155, 2, 2254, 2259, 5, 310, 156, 2, 2255,
	2259, 5, 320, 161, 2, 2256, 2259, 5, 312, 157, 2, 2257, 2259, 5, 314, 158,
	2, 2258, 2247, 3, 2, 2, 2, 2258, 2248, 3, 2, 2, 2, 2258, 2249, 3, 2, 2,
	2, 2258, 2250, 3, 2, 2, 2, 2258, 2251, 3, 2, 2, 2, 2258, 2252, 3, 2, 2,
	2, 2258, 2253, 3, 2, 2, 2, 2258, 2254, 3, 2, 2, 2, 2258, 2255, 3, 2, 2,
	2, 2258, 2256, 3, 2, 2, 2, 2258, 2257, 3, 2, 2, 2, 2259, 293, 3, 2, 2,
	2, 2260, 2263, 5, 292, 147, 2, 2261, 2263, 5, 296, 149, 2, 2262, 2260,
	3, 2, 2, 2, 2262, 2261, 3, 2, 2, 2, 2263, 295, 3, 2, 2, 2, 2264, 2265,
	7, 46, 2, 2, 2265, 2266, 5, 292, 147, 2, 2266, 297, 3, 2, 2, 2, 2267, 2268,
	5, 374, 188, 2, 2268, 2269, 7, 22, 2, 2, 2269, 2270, 5, 376, 189, 2, 2270,
	2271, 5, 294, 148, 2, 2271, 299, 3, 2, 2, 2, 2272, 2273, 5, 374, 188, 2,
	2273, 2274, 5, 376, 189, 2, 2274, 2275, 5, 294, 148, 2, 2275, 301, 3, 2,
	2, 2, 2276, 2277, 5, 374, 188, 2, 2277, 2278, 5, 294, 148, 2, 2278, 2279,
	5, 376, 189, 2, 2279, 2280, 7, 92, 2, 2, 2280, 303, 3, 2, 2, 2, 2281, 2282,
	5, 374, 188, 2, 2282, 2283, 5, 294, 148, 2, 2283, 2284, 5, 376, 189, 2,
	2284, 2285, 5, 294, 148, 2, 2285, 305, 3, 2, 2, 2, 2286, 2287, 5, 374,
	188, 2, 2287, 2288, 7, 37, 2, 2, 2288, 2289, 5, 376, 189, 2, 2289, 2290,
	5, 294, 148, 2, 2290, 307, 3, 2, 2, 2, 2291, 2292, 5, 374, 188, 2, 2292,
	2293, 7, 36, 2, 2, 2293, 2294, 5, 376, 189, 2, 2294, 2295, 5, 294, 148,
	2, 2295, 309, 3, 2, 2, 2, 2296, 2297, 5, 374, 188, 2, 2297, 2298, 7, 50,
	2, 2, 2298, 2299, 5, 376, 189, 2, 2299, 2300, 5, 294, 148, 2, 2300, 311,
	3, 2, 2, 2, 2301, 2308, 5, 218, 110, 2, 2302, 2303, 5, 374, 188, 2, 2303,
	2304, 5, 218, 110, 2, 2304, 2305, 5, 226, 114, 2, 2305, 2306, 5, 376, 189,
	2, 2306, 2308, 3, 2, 2, 2, 2307, 2301, 3, 2, 2, 2, 2307, 2302, 3, 2, 2,
	2, 2308, 313, 3, 2, 2, 2, 2309, 2310, 5, 370, 186, 2, 2310, 2311, 5, 318,
	160, 2, 2311, 2313, 9, 2, 2, 2, 2312, 2314, 7, 48, 2, 2, 2313, 2312, 3,
	2, 2, 2, 2313, 2314, 3, 2, 2, 2, 2314, 2316, 3, 2, 2, 2, 2315, 2317, 7,
	47, 2, 2, 2316, 2315, 3, 2, 2, 2, 2316, 2317, 3, 2, 2, 2, 2317, 2321, 3,
	2, 2, 2, 2318, 2320, 7, 96, 2, 2, 2319, 2318, 3, 2, 2, 2, 2320, 2323, 3,
	2, 2, 2, 2321, 2319, 3, 2, 2, 2, 2321, 2322, 3, 2, 2, 2, 2322, 2324, 3,
	2, 2, 2, 2323, 2321, 3, 2, 2, 2, 2324, 2325, 5, 318, 160, 2, 2325, 2326,
	5, 372, 187, 2, 2326, 315, 3, 2, 2, 2, 2327, 2328, 7, 77, 2, 2, 2328, 317,
	3, 2, 2, 2, 2329, 2331, 5, 294, 148, 2, 2330, 2329, 3, 2, 2, 2, 2330, 2331,
	3, 2, 2, 2, 2331, 2337, 3, 2, 2, 2, 2332, 2333, 5, 364, 183, 2, 2333, 2334,
	5, 294, 148, 2, 2334, 2336, 3, 2, 2, 2, 2335, 2332, 3, 2, 2, 2, 2336, 2339,
	3, 2, 2, 2, 2337, 2335, 3, 2, 2, 2, 2337, 2338, 3, 2, 2, 2, 2338, 319,
	3, 2, 2, 2, 2339, 2337, 3, 2, 2, 2, 2340, 2357, 7, 61, 2, 2, 2341, 2357,
	7, 62, 2, 2, 2342, 2357, 7, 63, 2, 2, 2343, 2357, 7, 64, 2, 2, 2344, 2357,
	7, 65, 2, 2, 2345, 2357, 7, 66, 2, 2, 2346, 2357, 7, 67, 2, 2, 2347, 2357,
	7, 68, 2, 2, 2348, 2357, 7, 69, 2, 2, 2349, 2357, 7, 70, 2, 2, 2350, 2357,
	7, 71, 2, 2, 2351, 2357, 7, 72, 2, 2, 2352, 2357, 7, 73, 2, 2, 2353, 2357,
	7, 74, 2, 2, 2354, 2357, 7, 75, 2, 2, 2355, 2357, 7, 76, 2, 2, 2356, 2340,
	3, 2, 2, 2, 2356, 2341, 3, 2, 2, 2, 2356, 2342, 3, 2, 2, 2, 2356, 2343,
	3, 2, 2, 2, 2356, 2344, 3, 2, 2, 2, 2356, 2345, 3, 2, 2, 2, 2356, 2346,
	3, 2, 2, 2, 2356, 2347, 3, 2, 2, 2, 2356, 2348, 3, 2, 2, 2, 2356, 2349,
	3, 2, 2, 2, 2356, 2350, 3, 2, 2, 2, 2356, 2351, 3, 2, 2, 2, 2356, 2352,
	3, 2, 2, 2, 2356, 2353, 3, 2, 2, 2, 2356, 2354, 3, 2, 2, 2, 2356, 2355,
	3, 2, 2, 2, 2357, 321, 3, 2, 2, 2, 2358, 2359, 7, 78, 2, 2, 2359, 323,
	3, 2, 2, 2, 2360, 2363, 7, 79, 2, 2, 2361, 2363, 7, 80, 2, 2, 2362, 2360,
	3, 2, 2, 2, 2362, 2361, 3, 2, 2, 2, 2363, 325, 3, 2, 2, 2, 2364, 2370,
	5, 328, 165, 2, 2365, 2370, 5, 330, 166, 2, 2366, 2370, 5, 334, 168, 2,
	2367, 2370, 5, 336, 169, 2, 2368, 2370, 5, 338, 170, 2, 2369, 2364, 3,
	2, 2, 2, 2369, 2365, 3, 2, 2, 2, 2369, 2366, 3, 2, 2, 2, 2369, 2367, 3,
	2, 2, 2, 2369, 2368, 3, 2, 2, 2, 2370, 2372, 3, 2, 2, 2, 2371, 2373, 7,
	96, 2, 2, 2372, 2371, 3, 2, 2, 2, 2372, 2373, 3, 2, 2, 2, 2373, 327, 3,
	2, 2, 2, 2374, 2375, 7, 32, 2, 2, 2375, 329, 3, 2, 2, 2, 2376, 2377, 7,
	33, 2, 2, 2377, 331, 3, 2, 2, 2, 2378, 2379, 7, 35, 2, 2, 2379, 333, 3,
	2, 2, 2, 2380, 2381, 7, 34, 2, 2, 2381, 335, 3, 2, 2, 2, 2382, 2383, 7,
	30, 2, 2, 2383, 337, 3, 2, 2, 2, 2384, 2385, 7, 31, 2, 2, 2385, 339, 3,
	2, 2, 2, 2386, 2387, 7, 14, 2, 2, 2387, 341, 3, 2, 2, 2, 2388, 2390, 9,
	6, 2, 2, 2389, 2391, 7, 96, 2, 2, 2390, 2389, 3, 2, 2, 2, 2390, 2391, 3,
	2, 2, 2, 2391, 343, 3, 2, 2, 2, 2392, 2394, 9, 7, 2, 2, 2393, 2395, 7,
	96, 2, 2, 2394, 2393, 3, 2, 2, 2, 2394, 2395, 3, 2, 2, 2, 2395, 345, 3,
	2, 2, 2, 2396, 2398, 9, 8, 2, 2, 2397, 2399, 7, 96, 2, 2, 2398, 2397, 3,
	2, 2, 2, 2398, 2399, 3, 2, 2, 2, 2399, 347, 3, 2, 2, 2, 2400, 2402, 9,
	9, 2, 2, 2401, 2403, 7, 96, 2, 2, 2402, 2401, 3, 2, 2, 2, 2402, 2403, 3,
	2, 2, 2, 2403, 349, 3, 2, 2, 2, 2404, 2406, 9, 10, 2, 2, 2405, 2407, 7,
	96, 2, 2, 2406, 2405, 3, 2, 2, 2, 2406, 2407, 3, 2, 2, 2, 2407, 351, 3,
	2, 2, 2, 2408, 2410, 7, 58, 2, 2, 2409, 2411, 7, 96, 2, 2, 2410, 2409,
	3, 2, 2, 2, 2410, 2411, 3, 2, 2, 2, 2411, 353, 3, 2, 2, 2, 2412, 2414,
	7, 19, 2, 2, 2413, 2415, 7, 96, 2, 2, 2414, 2413, 3, 2, 2, 2, 2414, 2415,
	3, 2, 2, 2, 2415, 355, 3, 2, 2, 2, 2416, 2417, 7, 50, 2, 2, 2417, 357,
	3, 2, 2, 2, 2418, 2419, 5, 360, 181, 2, 2419, 359, 3, 2, 2, 2, 2420, 2424,
	9, 11, 2, 2, 2421, 2424, 5, 320, 161, 2, 2422, 2424, 5, 316, 159, 2, 2423,
	2420, 3, 2, 2, 2, 2423, 2421, 3, 2, 2, 2, 2423, 2422, 3, 2, 2, 2, 2424,
	361, 3, 2, 2, 2, 2425, 2426, 9, 12, 2, 2, 2426, 363, 3, 2, 2, 2, 2427,
	2431, 7, 22, 2, 2, 2428, 2430, 7, 96, 2, 2, 2429, 2428, 3, 2, 2, 2, 2430,
	2433, 3, 2, 2, 2, 2431, 2429, 3, 2, 2, 2, 2431, 2432, 3, 2, 2, 2, 2432,
	365, 3, 2, 2, 2, 2433, 2431, 3, 2, 2, 2, 2434, 2438, 7, 41, 2, 2, 2435,
	2437, 7, 96, 2, 2, 2436, 2435, 3, 2, 2, 2, 2437, 2440, 3, 2, 2, 2, 2438,
	2436, 3, 2, 2, 2, 2438, 2439, 3, 2, 2, 2, 2439, 367, 3, 2, 2, 2, 2440,
	2438, 3, 2, 2, 2, 2441, 2443, 7, 96, 2, 2, 2442, 2441, 3, 2, 2, 2, 2443,
	2446, 3, 2, 2, 2, 2444, 2442, 3, 2, 2, 2, 2444, 2445, 3, 2, 2, 2, 2445,
	2447, 3, 2, 2, 2, 2446, 2444, 3, 2, 2, 2, 2447, 2448, 7, 42, 2, 2, 2448,
	369, 3, 2, 2, 2, 2449, 2450, 7, 39, 2, 2, 2450, 371, 3, 2, 2, 2, 2451,
	2452, 7, 40, 2, 2, 2452, 373, 3, 2, 2, 2, 2453, 2457, 7, 43, 2, 2, 2454,
	2456, 7, 96, 2, 2, 2455, 2454, 3, 2, 2, 2, 2456, 2459, 3, 2, 2, 2, 2457,
	2455, 3, 2, 2, 2, 2457, 2458, 3, 2, 2, 2, 2458, 375, 3, 2, 2, 2, 2459,
	2457, 3, 2, 2, 2, 2460, 2462, 7, 96, 2, 2, 2461, 2460, 3, 2, 2, 2, 2462,
	2465, 3, 2, 2, 2, 2463, 2461, 3, 2, 2, 2, 2463, 2464, 3, 2, 2, 2, 2464,
	2466, 3, 2, 2, 2, 2465, 2463, 3, 2, 2, 2, 2466, 2467, 7, 44, 2, 2, 2467,
	377, 3, 2, 2, 2, 284, 381, 386, 390, 396, 402, 420, 427, 429, 436, 440,
	443, 446, 450, 453, 456, 462, 470, 476, 485, 489, 495, 505, 514, 517, 522,
	531, 533, 538, 546, 548, 553, 561, 568, 571, 576, 585, 592, 600, 603, 609,
	617, 626, 629, 638, 640, 645, 653, 655, 660, 668, 675, 678, 683, 692, 700,
	706, 708, 714, 728, 734, 741, 747, 749, 754, 758, 764, 770, 779, 781, 786,
	794, 796, 801, 809, 816, 819, 824, 833, 844, 850, 869, 874, 879, 883, 892,
	894, 899, 903, 911, 913, 918, 922, 930, 937, 940, 945, 954, 961, 969, 972,
	981, 987, 989, 995, 1004, 1007, 1011, 1018, 1020, 1025, 1033, 1039, 1042,
	1047, 1060, 1067, 1070, 1075, 1084, 1092, 1098, 1112, 1119, 1123, 1130,
	1134, 1138, 1141, 1146, 1171, 1179, 1189, 1196, 1205, 1208, 1214, 1224,
	1229, 1236, 1247, 1257, 1265, 1273, 1278, 1287, 1291, 1299, 1304, 1314,
	1319, 1328, 1346, 1353, 1364, 1371, 1375, 1384, 1388, 1396, 1406, 1412,
	1422, 1438, 1457, 1470, 1491, 1494, 1498, 1501, 1509, 1524, 1546, 1600,
	1602, 1607, 1615, 1619, 1628, 1631, 1641, 1650, 1653, 1657, 1663, 1668,
	1673, 1677, 1685, 1695, 1704, 1711, 1714, 1717, 1736, 1750, 1760, 1771,
	1783, 1798, 1813, 1817, 1825, 1831, 1837, 1846, 1851, 1856, 1862, 1870,
	1876, 1882, 1887, 1895, 1906, 1914, 1923, 1926, 1931, 1940, 1957, 1962,
	1967, 1974, 1982, 1984, 1988, 1994, 2004, 2017, 2028, 2041, 2049, 2056,
	2065, 2074, 2080, 2086, 2090, 2099, 2105, 2112, 2124, 2132, 2143, 2151,
	2153, 2159, 2165, 2180, 2185, 2187, 2200, 2210, 2212, 2223, 2231, 2238,
	2258, 2262, 2307, 2313, 2316, 2321, 2330, 2337, 2356, 2362, 2369, 2372,
	2390, 2394, 2398, 2402, 2406, 2410, 2414, 2423, 2431, 2438, 2444, 2457,
	2463,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "':='", "'=='", "'<='",
	"'>='", "'><'", "'<>'", "'...'", "'..<'", "'..>'", "'..'", "'.'", "',,,'",
	"',,'", "','", "'->>'", "'<<-'", "'->'", "'<-'", "'~>'", "'<~'", "'='",
	"'<<'", "'>>'", "'&&'", "'||'", "'^^'", "'~~'", "'<'", "'>'", "';'", "'('",
	"')'", "'{'", "'}'", "'['", "']'", "':'", "'?'", "'@'", "'!'", "'$'", "'~'",
	"'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'`'", "'#'", "'i8'",
	"'u8'", "'i16'", "'u16'", "'i32'", "'u32'", "'i64'", "'u64'", "'f32'",
	"'f64'", "'chr'", "'str'", "'bool'", "'int'", "'num'", "'byte'", "'any'",
	"'nil'", "'true'", "'false'", "'undef'", "", "", "", "", "", "", "", "",
	"", "", "'_'",
}
var symbolicNames = []string{
	"", "Add_Equal", "Sub_Equal", "Mul_Equal", "Div_Equal", "Mod_Equal", "Pow_Equal",
	"Colon_Equal", "Equal_Equal", "Less_Equal", "Greater_Equal", "Not_Equal",
	"Combine_Equal", "Dot_Dot_Dot", "Dot_Dot_Less", "Dot_Dot_Greater", "Dot_Dot",
	"Dot", "Comma_Comma_Comma", "Comma_Comma", "Comma", "Right_Flow", "Left_Flow",
	"Right_Arrow", "Left_Arrow", "Right_Wave", "Left_Wave", "Equal", "Less_Less",
	"Greater_Greater", "And_And", "Or_Or", "Caret_Caret", "Tilde_Tilde", "Less",
	"Greater", "Semi", "Left_Paren", "Right_Paren", "Left_Brace", "Right_Brace",
	"Left_Brack", "Right_Brack", "Colon", "Question", "At", "Bang", "Coin",
	"Tilde", "Add", "Sub", "Mul", "Div", "Mod", "And", "Or", "Caret", "Grave",
	"Sharp", "TypeI8", "TypeU8", "TypeI16", "TypeU16", "TypeI32", "TypeU32",
	"TypeI64", "TypeU64", "TypeF32", "TypeF64", "TypeChr", "TypeStr", "TypeBool",
	"TypeInt", "TypeNum", "TypeByte", "TypeAny", "NilLiteral", "TrueLiteral",
	"FalseLiteral", "UndefinedLiteral", "FloatLiteral", "DecimalLiteral", "BinaryLiteral",
	"OctalLiteral", "HexLiteral", "Quote_Quote_Quote_Open", "Quote_Open", "CharLiteral",
	"IDPrivate", "IDPublic", "Discard", "Comment_Tag", "Comment_Block", "Comment_Line",
	"New_Line", "WS", "Quote_Close", "String_Template_Open", "TextLiteral",
	"Quote_Quote_Quote_Close", "Raw_Quote", "Raw_String_Template_Open", "RawTextLiteral",
}

var ruleNames = []string{
	"program", "statement", "exportStatement", "namespaceSupportStatement",
	"importStatement", "importSubStatement", "typeAliasStatement", "typeRedefineStatement",
	"typeTagStatement", "enumStatement", "enumSupportStatement", "namespaceVariableStatement",
	"namespaceConstantStatement", "namespaceFunctionStatement", "packageStatement",
	"packageStaticStatement", "packageStaticSupportStatement", "packageStaticVariableStatement",
	"packageStaticConstantStatement", "packageStaticFunctionStatement", "packageFieldStatement",
	"packageSupportStatement", "includeStatement", "packageNewStatement", "packageVariableStatement",
	"packageConstantStatement", "packageFunctionStatement", "packageControlSubStatement",
	"packageEventStatement", "implementStatement", "overrideVariableStatement",
	"overrideConstantStatement", "overrideFunctionStatement", "protocolStatement",
	"protocolSubStatement", "protocolSupportStatement", "protocolVariableStatement",
	"protocolFunctionStatement", "functionStatement", "returnStatement", "returnAsyncStatement",
	"yieldReturnStatement", "yieldBreakStatement", "parameterClauseIn", "parameterClauseOut",
	"parameter", "functionSupportStatement", "judgeCaseStatement", "caseStatement",
	"caseExprStatement", "judgeStatement", "judgeElseStatement", "judgeIfStatement",
	"judgeElseIfStatement", "loopStatement", "loopEachStatement", "loopCaseStatement",
	"loopElseStatement", "loopJumpStatement", "loopContinueStatement", "checkStatement",
	"usingStatement", "checkErrorStatement", "checkFinallyStatment", "checkReportStatement",
	"iteratorStatement", "variableDeclaredStatement", "constantDeclaredStatement",
	"varStatement", "bindStatement", "assignStatement", "expressionStatement",
	"annotationStatement", "varId", "constId", "tupleExpression", "primaryExpression",
	"expression", "callExpression", "tuple", "expressionList", "annotationSupport",
	"annotation", "annotationList", "annotationItem", "annotationString", "callFunc",
	"callAsync", "callAwait", "callChannel", "transfer", "callElement", "callPkg",
	"callNew", "orElse", "typeConversion", "typeCheck", "pkgAssign", "pkgAssignElement",
	"listAssign", "dictionaryAssign", "list", "dictionary", "dictionaryElement",
	"slice", "sliceFull", "sliceStart", "sliceEnd", "nameSpaceItem", "name",
	"templateDefine", "templateDefineItem", "templateCall", "lambda", "lambdaIn",
	"pkgAnonymous", "pkgAnonymousAssign", "pkgAnonymousAssignElement", "functionExpression",
	"plusMinus", "negate", "bitwiseNotExpression", "linq", "linqHeadItem",
	"linqItem", "judgeExpression", "judgeExpressionElseStatement", "judgeExpressionIfStatement",
	"judgeExpressionElseIfStatement", "judgeCaseExpression", "caseExpressionStatement",
	"loopExpression", "loopEachExpression", "loopElseExpression", "checkExpression",
	"checkErrorExpression", "dataStatement", "stringExpr", "stringContent",
	"stringTemplate", "rawStringExpr", "rawStringContent", "rawStringTemplate",
	"floatExpr", "integerExpr", "typeNotNull", "typeType", "typeNullable",
	"typeArray", "typeList", "typeSet", "typeDictionary", "typeStack", "typeQueue",
	"typeChannel", "typePackage", "typeFunction", "typeAny", "typeFunctionParameterClause",
	"typeBasic", "nilExpr", "boolExpr", "bitwise", "bitwiseAnd", "bitwiseOr",
	"bitwiseNot", "bitwiseXor", "bitwiseLeftShift", "bitwiseRightShift", "compareCombine",
	"compare", "logic", "assign", "add", "mul", "pow", "call", "wave", "id",
	"idItem", "end", "more", "left_brace", "right_brace", "left_paren", "right_paren",
	"left_brack", "right_brack",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type FeelParser struct {
	*antlr.BaseParser
}

func NewFeelParser(input antlr.TokenStream) *FeelParser {
	this := new(FeelParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "FeelParser.g4"

	return this
}

// FeelParser tokens.
const (
	FeelParserEOF                      = antlr.TokenEOF
	FeelParserAdd_Equal                = 1
	FeelParserSub_Equal                = 2
	FeelParserMul_Equal                = 3
	FeelParserDiv_Equal                = 4
	FeelParserMod_Equal                = 5
	FeelParserPow_Equal                = 6
	FeelParserColon_Equal              = 7
	FeelParserEqual_Equal              = 8
	FeelParserLess_Equal               = 9
	FeelParserGreater_Equal            = 10
	FeelParserNot_Equal                = 11
	FeelParserCombine_Equal            = 12
	FeelParserDot_Dot_Dot              = 13
	FeelParserDot_Dot_Less             = 14
	FeelParserDot_Dot_Greater          = 15
	FeelParserDot_Dot                  = 16
	FeelParserDot                      = 17
	FeelParserComma_Comma_Comma        = 18
	FeelParserComma_Comma              = 19
	FeelParserComma                    = 20
	FeelParserRight_Flow               = 21
	FeelParserLeft_Flow                = 22
	FeelParserRight_Arrow              = 23
	FeelParserLeft_Arrow               = 24
	FeelParserRight_Wave               = 25
	FeelParserLeft_Wave                = 26
	FeelParserEqual                    = 27
	FeelParserLess_Less                = 28
	FeelParserGreater_Greater          = 29
	FeelParserAnd_And                  = 30
	FeelParserOr_Or                    = 31
	FeelParserCaret_Caret              = 32
	FeelParserTilde_Tilde              = 33
	FeelParserLess                     = 34
	FeelParserGreater                  = 35
	FeelParserSemi                     = 36
	FeelParserLeft_Paren               = 37
	FeelParserRight_Paren              = 38
	FeelParserLeft_Brace               = 39
	FeelParserRight_Brace              = 40
	FeelParserLeft_Brack               = 41
	FeelParserRight_Brack              = 42
	FeelParserColon                    = 43
	FeelParserQuestion                 = 44
	FeelParserAt                       = 45
	FeelParserBang                     = 46
	FeelParserCoin                     = 47
	FeelParserTilde                    = 48
	FeelParserAdd                      = 49
	FeelParserSub                      = 50
	FeelParserMul                      = 51
	FeelParserDiv                      = 52
	FeelParserMod                      = 53
	FeelParserAnd                      = 54
	FeelParserOr                       = 55
	FeelParserCaret                    = 56
	FeelParserGrave                    = 57
	FeelParserSharp                    = 58
	FeelParserTypeI8                   = 59
	FeelParserTypeU8                   = 60
	FeelParserTypeI16                  = 61
	FeelParserTypeU16                  = 62
	FeelParserTypeI32                  = 63
	FeelParserTypeU32                  = 64
	FeelParserTypeI64                  = 65
	FeelParserTypeU64                  = 66
	FeelParserTypeF32                  = 67
	FeelParserTypeF64                  = 68
	FeelParserTypeChr                  = 69
	FeelParserTypeStr                  = 70
	FeelParserTypeBool                 = 71
	FeelParserTypeInt                  = 72
	FeelParserTypeNum                  = 73
	FeelParserTypeByte                 = 74
	FeelParserTypeAny                  = 75
	FeelParserNilLiteral               = 76
	FeelParserTrueLiteral              = 77
	FeelParserFalseLiteral             = 78
	FeelParserUndefinedLiteral         = 79
	FeelParserFloatLiteral             = 80
	FeelParserDecimalLiteral           = 81
	FeelParserBinaryLiteral            = 82
	FeelParserOctalLiteral             = 83
	FeelParserHexLiteral               = 84
	FeelParserQuote_Quote_Quote_Open   = 85
	FeelParserQuote_Open               = 86
	FeelParserCharLiteral              = 87
	FeelParserIDPrivate                = 88
	FeelParserIDPublic                 = 89
	FeelParserDiscard                  = 90
	FeelParserComment_Tag              = 91
	FeelParserComment_Block            = 92
	FeelParserComment_Line             = 93
	FeelParserNew_Line                 = 94
	FeelParserWS                       = 95
	FeelParserQuote_Close              = 96
	FeelParserString_Template_Open     = 97
	FeelParserTextLiteral              = 98
	FeelParserQuote_Quote_Quote_Close  = 99
	FeelParserRaw_Quote                = 100
	FeelParserRaw_String_Template_Open = 101
	FeelParserRawTextLiteral           = 102
)

// FeelParser rules.
const (
	FeelParserRULE_program                        = 0
	FeelParserRULE_statement                      = 1
	FeelParserRULE_exportStatement                = 2
	FeelParserRULE_namespaceSupportStatement      = 3
	FeelParserRULE_importStatement                = 4
	FeelParserRULE_importSubStatement             = 5
	FeelParserRULE_typeAliasStatement             = 6
	FeelParserRULE_typeRedefineStatement          = 7
	FeelParserRULE_typeTagStatement               = 8
	FeelParserRULE_enumStatement                  = 9
	FeelParserRULE_enumSupportStatement           = 10
	FeelParserRULE_namespaceVariableStatement     = 11
	FeelParserRULE_namespaceConstantStatement     = 12
	FeelParserRULE_namespaceFunctionStatement     = 13
	FeelParserRULE_packageStatement               = 14
	FeelParserRULE_packageStaticStatement         = 15
	FeelParserRULE_packageStaticSupportStatement  = 16
	FeelParserRULE_packageStaticVariableStatement = 17
	FeelParserRULE_packageStaticConstantStatement = 18
	FeelParserRULE_packageStaticFunctionStatement = 19
	FeelParserRULE_packageFieldStatement          = 20
	FeelParserRULE_packageSupportStatement        = 21
	FeelParserRULE_includeStatement               = 22
	FeelParserRULE_packageNewStatement            = 23
	FeelParserRULE_packageVariableStatement       = 24
	FeelParserRULE_packageConstantStatement       = 25
	FeelParserRULE_packageFunctionStatement       = 26
	FeelParserRULE_packageControlSubStatement     = 27
	FeelParserRULE_packageEventStatement          = 28
	FeelParserRULE_implementStatement             = 29
	FeelParserRULE_overrideVariableStatement      = 30
	FeelParserRULE_overrideConstantStatement      = 31
	FeelParserRULE_overrideFunctionStatement      = 32
	FeelParserRULE_protocolStatement              = 33
	FeelParserRULE_protocolSubStatement           = 34
	FeelParserRULE_protocolSupportStatement       = 35
	FeelParserRULE_protocolVariableStatement      = 36
	FeelParserRULE_protocolFunctionStatement      = 37
	FeelParserRULE_functionStatement              = 38
	FeelParserRULE_returnStatement                = 39
	FeelParserRULE_returnAsyncStatement           = 40
	FeelParserRULE_yieldReturnStatement           = 41
	FeelParserRULE_yieldBreakStatement            = 42
	FeelParserRULE_parameterClauseIn              = 43
	FeelParserRULE_parameterClauseOut             = 44
	FeelParserRULE_parameter                      = 45
	FeelParserRULE_functionSupportStatement       = 46
	FeelParserRULE_judgeCaseStatement             = 47
	FeelParserRULE_caseStatement                  = 48
	FeelParserRULE_caseExprStatement              = 49
	FeelParserRULE_judgeStatement                 = 50
	FeelParserRULE_judgeElseStatement             = 51
	FeelParserRULE_judgeIfStatement               = 52
	FeelParserRULE_judgeElseIfStatement           = 53
	FeelParserRULE_loopStatement                  = 54
	FeelParserRULE_loopEachStatement              = 55
	FeelParserRULE_loopCaseStatement              = 56
	FeelParserRULE_loopElseStatement              = 57
	FeelParserRULE_loopJumpStatement              = 58
	FeelParserRULE_loopContinueStatement          = 59
	FeelParserRULE_checkStatement                 = 60
	FeelParserRULE_usingStatement                 = 61
	FeelParserRULE_checkErrorStatement            = 62
	FeelParserRULE_checkFinallyStatment           = 63
	FeelParserRULE_checkReportStatement           = 64
	FeelParserRULE_iteratorStatement              = 65
	FeelParserRULE_variableDeclaredStatement      = 66
	FeelParserRULE_constantDeclaredStatement      = 67
	FeelParserRULE_varStatement                   = 68
	FeelParserRULE_bindStatement                  = 69
	FeelParserRULE_assignStatement                = 70
	FeelParserRULE_expressionStatement            = 71
	FeelParserRULE_annotationStatement            = 72
	FeelParserRULE_varId                          = 73
	FeelParserRULE_constId                        = 74
	FeelParserRULE_tupleExpression                = 75
	FeelParserRULE_primaryExpression              = 76
	FeelParserRULE_expression                     = 77
	FeelParserRULE_callExpression                 = 78
	FeelParserRULE_tuple                          = 79
	FeelParserRULE_expressionList                 = 80
	FeelParserRULE_annotationSupport              = 81
	FeelParserRULE_annotation                     = 82
	FeelParserRULE_annotationList                 = 83
	FeelParserRULE_annotationItem                 = 84
	FeelParserRULE_annotationString               = 85
	FeelParserRULE_callFunc                       = 86
	FeelParserRULE_callAsync                      = 87
	FeelParserRULE_callAwait                      = 88
	FeelParserRULE_callChannel                    = 89
	FeelParserRULE_transfer                       = 90
	FeelParserRULE_callElement                    = 91
	FeelParserRULE_callPkg                        = 92
	FeelParserRULE_callNew                        = 93
	FeelParserRULE_orElse                         = 94
	FeelParserRULE_typeConversion                 = 95
	FeelParserRULE_typeCheck                      = 96
	FeelParserRULE_pkgAssign                      = 97
	FeelParserRULE_pkgAssignElement               = 98
	FeelParserRULE_listAssign                     = 99
	FeelParserRULE_dictionaryAssign               = 100
	FeelParserRULE_list                           = 101
	FeelParserRULE_dictionary                     = 102
	FeelParserRULE_dictionaryElement              = 103
	FeelParserRULE_slice                          = 104
	FeelParserRULE_sliceFull                      = 105
	FeelParserRULE_sliceStart                     = 106
	FeelParserRULE_sliceEnd                       = 107
	FeelParserRULE_nameSpaceItem                  = 108
	FeelParserRULE_name                           = 109
	FeelParserRULE_templateDefine                 = 110
	FeelParserRULE_templateDefineItem             = 111
	FeelParserRULE_templateCall                   = 112
	FeelParserRULE_lambda                         = 113
	FeelParserRULE_lambdaIn                       = 114
	FeelParserRULE_pkgAnonymous                   = 115
	FeelParserRULE_pkgAnonymousAssign             = 116
	FeelParserRULE_pkgAnonymousAssignElement      = 117
	FeelParserRULE_functionExpression             = 118
	FeelParserRULE_plusMinus                      = 119
	FeelParserRULE_negate                         = 120
	FeelParserRULE_bitwiseNotExpression           = 121
	FeelParserRULE_linq                           = 122
	FeelParserRULE_linqHeadItem                   = 123
	FeelParserRULE_linqItem                       = 124
	FeelParserRULE_judgeExpression                = 125
	FeelParserRULE_judgeExpressionElseStatement   = 126
	FeelParserRULE_judgeExpressionIfStatement     = 127
	FeelParserRULE_judgeExpressionElseIfStatement = 128
	FeelParserRULE_judgeCaseExpression            = 129
	FeelParserRULE_caseExpressionStatement        = 130
	FeelParserRULE_loopExpression                 = 131
	FeelParserRULE_loopEachExpression             = 132
	FeelParserRULE_loopElseExpression             = 133
	FeelParserRULE_checkExpression                = 134
	FeelParserRULE_checkErrorExpression           = 135
	FeelParserRULE_dataStatement                  = 136
	FeelParserRULE_stringExpr                     = 137
	FeelParserRULE_stringContent                  = 138
	FeelParserRULE_stringTemplate                 = 139
	FeelParserRULE_rawStringExpr                  = 140
	FeelParserRULE_rawStringContent               = 141
	FeelParserRULE_rawStringTemplate              = 142
	FeelParserRULE_floatExpr                      = 143
	FeelParserRULE_integerExpr                    = 144
	FeelParserRULE_typeNotNull                    = 145
	FeelParserRULE_typeType                       = 146
	FeelParserRULE_typeNullable                   = 147
	FeelParserRULE_typeArray                      = 148
	FeelParserRULE_typeList                       = 149
	FeelParserRULE_typeSet                        = 150
	FeelParserRULE_typeDictionary                 = 151
	FeelParserRULE_typeStack                      = 152
	FeelParserRULE_typeQueue                      = 153
	FeelParserRULE_typeChannel                    = 154
	FeelParserRULE_typePackage                    = 155
	FeelParserRULE_typeFunction                   = 156
	FeelParserRULE_typeAny                        = 157
	FeelParserRULE_typeFunctionParameterClause    = 158
	FeelParserRULE_typeBasic                      = 159
	FeelParserRULE_nilExpr                        = 160
	FeelParserRULE_boolExpr                       = 161
	FeelParserRULE_bitwise                        = 162
	FeelParserRULE_bitwiseAnd                     = 163
	FeelParserRULE_bitwiseOr                      = 164
	FeelParserRULE_bitwiseNot                     = 165
	FeelParserRULE_bitwiseXor                     = 166
	FeelParserRULE_bitwiseLeftShift               = 167
	FeelParserRULE_bitwiseRightShift              = 168
	FeelParserRULE_compareCombine                 = 169
	FeelParserRULE_compare                        = 170
	FeelParserRULE_logic                          = 171
	FeelParserRULE_assign                         = 172
	FeelParserRULE_add                            = 173
	FeelParserRULE_mul                            = 174
	FeelParserRULE_pow                            = 175
	FeelParserRULE_call                           = 176
	FeelParserRULE_wave                           = 177
	FeelParserRULE_id                             = 178
	FeelParserRULE_idItem                         = 179
	FeelParserRULE_end                            = 180
	FeelParserRULE_more                           = 181
	FeelParserRULE_left_brace                     = 182
	FeelParserRULE_right_brace                    = 183
	FeelParserRULE_left_paren                     = 184
	FeelParserRULE_right_paren                    = 185
	FeelParserRULE_left_brack                     = 186
	FeelParserRULE_right_brack                    = 187
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ProgramContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, FeelParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == FeelParserLeft_Arrow || _la == FeelParserSharp || _la == FeelParserNew_Line {
		{
			p.SetState(376)
			p.Statement()
		}

		p.SetState(379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *StatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *StatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *StatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *StatementContext) AllNamespaceSupportStatement() []INamespaceSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem())
	var tst = make([]INamespaceSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamespaceSupportStatementContext)
		}
	}

	return tst
}

func (s *StatementContext) NamespaceSupportStatement(i int) INamespaceSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamespaceSupportStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, FeelParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(384)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(381)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(386)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(388)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(387)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(390)
		p.ExportStatement()
	}
	p.SetState(394)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(391)
				p.Match(FeelParserNew_Line)
			}

		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(397)
				p.NamespaceSupportStatement()
			}

		}
		p.SetState(402)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Arrow, 0)
}

func (s *ExportStatementContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *ExportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitExportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, FeelParserRULE_exportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(403)
		p.Match(FeelParserLeft_Arrow)
	}
	{
		p.SetState(404)
		p.NameSpaceItem()
	}
	{
		p.SetState(405)
		p.End()
	}

	return localctx
}

// INamespaceSupportStatementContext is an interface to support dynamic dispatch.
type INamespaceSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceSupportStatementContext differentiates from other interfaces.
	IsNamespaceSupportStatementContext()
}

type NamespaceSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceSupportStatementContext() *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_namespaceSupportStatement
	return p
}

func (*NamespaceSupportStatementContext) IsNamespaceSupportStatementContext() {}

func NewNamespaceSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_namespaceSupportStatement

	return p
}

func (s *NamespaceSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceSupportStatementContext) ImportStatement() IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageStatement() IPackageStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStatementContext)
}

func (s *NamespaceSupportStatementContext) ProtocolStatement() IProtocolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolStatementContext)
}

func (s *NamespaceSupportStatementContext) ImplementStatement() IImplementStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceFunctionStatement() INamespaceFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceFunctionStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceVariableStatement() INamespaceVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceVariableStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceConstantStatement() INamespaceConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceConstantStatementContext)
}

func (s *NamespaceSupportStatementContext) EnumStatement() IEnumStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeRedefineStatement() ITypeRedefineStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeRedefineStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeRedefineStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeTagStatement() ITypeTagStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTagStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTagStatementContext)
}

func (s *NamespaceSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *NamespaceSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNamespaceSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) NamespaceSupportStatement() (localctx INamespaceSupportStatementContext) {
	localctx = NewNamespaceSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, FeelParserRULE_namespaceSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(418)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(407)
			p.ImportStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(408)
			p.PackageStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(409)
			p.ProtocolStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(410)
			p.ImplementStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(411)
			p.NamespaceFunctionStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(412)
			p.NamespaceVariableStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(413)
			p.NamespaceConstantStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(414)
			p.EnumStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(415)
			p.TypeRedefineStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(416)
			p.TypeTagStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(417)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *ImportStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ImportStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ImportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImportStatementContext) AllImportSubStatement() []IImportSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportSubStatementContext)(nil)).Elem())
	var tst = make([]IImportSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportSubStatementContext)
		}
	}

	return tst
}

func (s *ImportStatementContext) ImportSubStatement(i int) IImportSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportSubStatementContext)
}

func (s *ImportStatementContext) AllTypeAliasStatement() []ITypeAliasStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeAliasStatementContext)(nil)).Elem())
	var tst = make([]ITypeAliasStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeAliasStatementContext)
		}
	}

	return tst
}

func (s *ImportStatementContext) TypeAliasStatement(i int) ITypeAliasStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasStatementContext)
}

func (s *ImportStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *ImportStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ImportStatement() (localctx IImportStatementContext) {
	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, FeelParserRULE_importStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(420)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(421)
		p.Left_brace()
	}
	p.SetState(427)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(425)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(422)
					p.ImportSubStatement()
				}

			case 2:
				{
					p.SetState(423)
					p.TypeAliasStatement()
				}

			case 3:
				{
					p.SetState(424)
					p.Match(FeelParserNew_Line)
				}

			}

		}
		p.SetState(429)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}
	{
		p.SetState(430)
		p.Right_brace()
	}
	{
		p.SetState(431)
		p.End()
	}

	return localctx
}

// IImportSubStatementContext is an interface to support dynamic dispatch.
type IImportSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportSubStatementContext differentiates from other interfaces.
	IsImportSubStatementContext()
}

type ImportSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportSubStatementContext() *ImportSubStatementContext {
	var p = new(ImportSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_importSubStatement
	return p
}

func (*ImportSubStatementContext) IsImportSubStatementContext() {}

func NewImportSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportSubStatementContext {
	var p = new(ImportSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_importSubStatement

	return p
}

func (s *ImportSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportSubStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImportSubStatementContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *ImportSubStatementContext) StringExpr() IStringExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringExprContext)
}

func (s *ImportSubStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImportSubStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *ImportSubStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImportSubStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *ImportSubStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *ImportSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitImportSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ImportSubStatement() (localctx IImportSubStatementContext) {
	localctx = NewImportSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, FeelParserRULE_importSubStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(433)
			p.AnnotationSupport()
		}

	}
	p.SetState(444)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		p.SetState(441)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
			{
				p.SetState(436)
				p.Id()
			}
			p.SetState(438)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == FeelParserBang {
				{
					p.SetState(437)
					p.Match(FeelParserBang)
				}

			}

		case FeelParserDiscard:
			{
				p.SetState(440)
				p.Match(FeelParserDiscard)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(443)
			p.Match(FeelParserColon)
		}

	}
	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(446)
			p.NameSpaceItem()
		}
		p.SetState(448)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserQuote_Open {
			{
				p.SetState(447)
				p.StringExpr()
			}

		}

	case 2:
		p.SetState(451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
			{
				p.SetState(450)
				p.NameSpaceItem()
			}

		}
		{
			p.SetState(453)
			p.StringExpr()
		}

	}
	{
		p.SetState(456)
		p.End()
	}

	return localctx
}

// ITypeAliasStatementContext is an interface to support dynamic dispatch.
type ITypeAliasStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasStatementContext differentiates from other interfaces.
	IsTypeAliasStatementContext()
}

type TypeAliasStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasStatementContext() *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeAliasStatement
	return p
}

func (*TypeAliasStatementContext) IsTypeAliasStatementContext() {}

func NewTypeAliasStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeAliasStatement

	return p
}

func (s *TypeAliasStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeAliasStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *TypeAliasStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeAliasStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeAliasStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *TypeAliasStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeAliasStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeAliasStatement() (localctx ITypeAliasStatementContext) {
	localctx = NewTypeAliasStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, FeelParserRULE_typeAliasStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(458)
		p.Id()
	}
	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(459)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(462)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(463)
		p.TypeType()
	}
	{
		p.SetState(464)
		p.End()
	}

	return localctx
}

// ITypeRedefineStatementContext is an interface to support dynamic dispatch.
type ITypeRedefineStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeRedefineStatementContext differentiates from other interfaces.
	IsTypeRedefineStatementContext()
}

type TypeRedefineStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeRedefineStatementContext() *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeRedefineStatement
	return p
}

func (*TypeRedefineStatementContext) IsTypeRedefineStatementContext() {}

func NewTypeRedefineStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeRedefineStatement

	return p
}

func (s *TypeRedefineStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeRedefineStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeRedefineStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *TypeRedefineStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeRedefineStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeRedefineStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *TypeRedefineStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *TypeRedefineStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *TypeRedefineStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeRedefineStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeRedefineStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeRedefineStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeRedefineStatement() (localctx ITypeRedefineStatementContext) {
	localctx = NewTypeRedefineStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, FeelParserRULE_typeRedefineStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(466)
		p.Id()
	}
	p.SetState(468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(467)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(470)
		p.Match(FeelParserColon)
	}
	p.SetState(474)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(471)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(477)
		p.TypeType()
	}
	{
		p.SetState(478)
		p.End()
	}

	return localctx
}

// ITypeTagStatementContext is an interface to support dynamic dispatch.
type ITypeTagStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTagStatementContext differentiates from other interfaces.
	IsTypeTagStatementContext()
}

type TypeTagStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTagStatementContext() *TypeTagStatementContext {
	var p = new(TypeTagStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeTagStatement
	return p
}

func (*TypeTagStatementContext) IsTypeTagStatementContext() {}

func NewTypeTagStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTagStatementContext {
	var p = new(TypeTagStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeTagStatement

	return p
}

func (s *TypeTagStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTagStatementContext) Comment_Tag() antlr.TerminalNode {
	return s.GetToken(FeelParserComment_Tag, 0)
}

func (s *TypeTagStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTagStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTagStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeTagStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeTagStatement() (localctx ITypeTagStatementContext) {
	localctx = NewTypeTagStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, FeelParserRULE_typeTagStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(480)
		p.Match(FeelParserComment_Tag)
	}

	return localctx
}

// IEnumStatementContext is an interface to support dynamic dispatch.
type IEnumStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumStatementContext differentiates from other interfaces.
	IsEnumStatementContext()
}

type EnumStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumStatementContext() *EnumStatementContext {
	var p = new(EnumStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_enumStatement
	return p
}

func (*EnumStatementContext) IsEnumStatementContext() {}

func NewEnumStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumStatementContext {
	var p = new(EnumStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_enumStatement

	return p
}

func (s *EnumStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumStatementContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(FeelParserColon)
}

func (s *EnumStatementContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserColon, i)
}

func (s *EnumStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *EnumStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *EnumStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *EnumStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *EnumStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *EnumStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *EnumStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *EnumStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *EnumStatementContext) AllEnumSupportStatement() []IEnumSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem())
	var tst = make([]IEnumSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumSupportStatementContext)
		}
	}

	return tst
}

func (s *EnumStatementContext) EnumSupportStatement(i int) IEnumSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumSupportStatementContext)
}

func (s *EnumStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitEnumStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) EnumStatement() (localctx IEnumStatementContext) {
	localctx = NewEnumStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, FeelParserRULE_enumStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(482)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(485)
		p.Id()
	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(486)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(489)
		p.Match(FeelParserColon)
	}
	p.SetState(493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(490)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(496)
		p.Left_brack()
	}
	{
		p.SetState(497)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(498)
		p.Right_brack()
	}
	{
		p.SetState(499)
		p.Left_brace()
	}
	p.SetState(503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
		{
			p.SetState(500)
			p.EnumSupportStatement()
		}

		p.SetState(505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(506)
		p.Right_brace()
	}
	{
		p.SetState(507)
		p.End()
	}

	return localctx
}

// IEnumSupportStatementContext is an interface to support dynamic dispatch.
type IEnumSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumSupportStatementContext differentiates from other interfaces.
	IsEnumSupportStatementContext()
}

type EnumSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSupportStatementContext() *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_enumSupportStatement
	return p
}

func (*EnumSupportStatementContext) IsEnumSupportStatementContext() {}

func NewEnumSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_enumSupportStatement

	return p
}

func (s *EnumSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSupportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumSupportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumSupportStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *EnumSupportStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *EnumSupportStatementContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *EnumSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitEnumSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) EnumSupportStatement() (localctx IEnumSupportStatementContext) {
	localctx = NewEnumSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, FeelParserRULE_enumSupportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(509)
		p.Id()
	}
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserColon {
		{
			p.SetState(510)
			p.Match(FeelParserColon)
		}
		p.SetState(512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserAdd || _la == FeelParserSub {
			{
				p.SetState(511)
				p.Add()
			}

		}
		{
			p.SetState(514)
			p.IntegerExpr()
		}

	}
	{
		p.SetState(517)
		p.End()
	}

	return localctx
}

// INamespaceVariableStatementContext is an interface to support dynamic dispatch.
type INamespaceVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceVariableStatementContext differentiates from other interfaces.
	IsNamespaceVariableStatementContext()
}

type NamespaceVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceVariableStatementContext() *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_namespaceVariableStatement
	return p
}

func (*NamespaceVariableStatementContext) IsNamespaceVariableStatementContext() {}

func NewNamespaceVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_namespaceVariableStatement

	return p
}

func (s *NamespaceVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceVariableStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *NamespaceVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *NamespaceVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNamespaceVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) NamespaceVariableStatement() (localctx INamespaceVariableStatementContext) {
	localctx = NewNamespaceVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, FeelParserRULE_namespaceVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(520)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(519)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(522)
		p.Id()
	}
	{
		p.SetState(523)
		p.Match(FeelParserBang)
	}
	p.SetState(531)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(524)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(525)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(526)
			p.TypeType()
		}
		p.SetState(529)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(527)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(528)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(533)
		p.End()
	}

	return localctx
}

// INamespaceConstantStatementContext is an interface to support dynamic dispatch.
type INamespaceConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceConstantStatementContext differentiates from other interfaces.
	IsNamespaceConstantStatementContext()
}

type NamespaceConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceConstantStatementContext() *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_namespaceConstantStatement
	return p
}

func (*NamespaceConstantStatementContext) IsNamespaceConstantStatementContext() {}

func NewNamespaceConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_namespaceConstantStatement

	return p
}

func (s *NamespaceConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceConstantStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *NamespaceConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNamespaceConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) NamespaceConstantStatement() (localctx INamespaceConstantStatementContext) {
	localctx = NewNamespaceConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, FeelParserRULE_namespaceConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(535)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(538)
		p.Id()
	}
	p.SetState(546)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(539)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(540)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(541)
			p.TypeType()
		}
		p.SetState(544)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(542)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(543)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(548)
		p.End()
	}

	return localctx
}

// INamespaceFunctionStatementContext is an interface to support dynamic dispatch.
type INamespaceFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsNamespaceFunctionStatementContext differentiates from other interfaces.
	IsNamespaceFunctionStatementContext()
}

type NamespaceFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyNamespaceFunctionStatementContext() *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_namespaceFunctionStatement
	return p
}

func (*NamespaceFunctionStatementContext) IsNamespaceFunctionStatementContext() {}

func NewNamespaceFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_namespaceFunctionStatement

	return p
}

func (s *NamespaceFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *NamespaceFunctionStatementContext) GetB() antlr.Token { return s.b }

func (s *NamespaceFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *NamespaceFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *NamespaceFunctionStatementContext) SetB(v antlr.Token) { s.b = v }

func (s *NamespaceFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *NamespaceFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *NamespaceFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *NamespaceFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *NamespaceFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *NamespaceFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *NamespaceFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceFunctionStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *NamespaceFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *NamespaceFunctionStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *NamespaceFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *NamespaceFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *NamespaceFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *NamespaceFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *NamespaceFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *NamespaceFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *NamespaceFunctionStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *NamespaceFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *NamespaceFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNamespaceFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) NamespaceFunctionStatement() (localctx INamespaceFunctionStatementContext) {
	localctx = NewNamespaceFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, FeelParserRULE_namespaceFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(550)
			p.AnnotationSupport()
		}

	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(553)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(554)
			p.Left_brack()
		}
		{
			p.SetState(555)
			p.Id()
		}
		{
			p.SetState(556)
			p.TemplateDefine()
		}
		{
			p.SetState(557)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(561)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(562)
		p.Left_paren()
	}
	{
		p.SetState(563)
		p.ParameterClauseIn()
	}
	{
		p.SetState(564)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*NamespaceFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*NamespaceFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(566)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(565)

			var _m = p.Match(FeelParserBang)

			localctx.(*NamespaceFunctionStatementContext).b = _m
		}

	}
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(568)

			var _m = p.Match(FeelParserAt)

			localctx.(*NamespaceFunctionStatementContext).y = _m
		}

	}
	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(571)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(576)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(577)
		p.ParameterClauseOut()
	}
	{
		p.SetState(578)
		p.Right_paren()
	}
	{
		p.SetState(579)
		p.Left_brace()
	}
	p.SetState(583)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(580)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(585)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())
	}
	{
		p.SetState(586)
		p.Right_brace()
	}
	{
		p.SetState(587)
		p.End()
	}

	return localctx
}

// IPackageStatementContext is an interface to support dynamic dispatch.
type IPackageStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStatementContext differentiates from other interfaces.
	IsPackageStatementContext()
}

type PackageStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStatementContext() *PackageStatementContext {
	var p = new(PackageStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageStatement
	return p
}

func (*PackageStatementContext) IsPackageStatementContext() {}

func NewPackageStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStatementContext {
	var p = new(PackageStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageStatement

	return p
}

func (s *PackageStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PackageStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PackageStatementContext) PackageFieldStatement() IPackageFieldStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFieldStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageFieldStatementContext)
}

func (s *PackageStatementContext) PackageStaticStatement() IPackageStaticStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStaticStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStaticStatementContext)
}

func (s *PackageStatementContext) PackageNewStatement() IPackageNewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageNewStatementContext)
}

func (s *PackageStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PackageStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageStatement() (localctx IPackageStatementContext) {
	localctx = NewPackageStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, FeelParserRULE_packageStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(590)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(589)
			p.AnnotationSupport()
		}

	}
	p.SetState(598)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(592)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(593)
			p.Left_brack()
		}
		{
			p.SetState(594)
			p.Id()
		}
		{
			p.SetState(595)
			p.TemplateDefine()
		}
		{
			p.SetState(596)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(601)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(600)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(603)
		p.Match(FeelParserColon)
	}
	p.SetState(607)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserCoin:
		{
			p.SetState(604)
			p.PackageFieldStatement()
		}

	case FeelParserLeft_Brace:
		{
			p.SetState(605)
			p.PackageStaticStatement()
		}

	case FeelParserLeft_Paren, FeelParserSharp:
		{
			p.SetState(606)
			p.PackageNewStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(609)
		p.End()
	}

	return localctx
}

// IPackageStaticStatementContext is an interface to support dynamic dispatch.
type IPackageStaticStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStaticStatementContext differentiates from other interfaces.
	IsPackageStaticStatementContext()
}

type PackageStaticStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStaticStatementContext() *PackageStaticStatementContext {
	var p = new(PackageStaticStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageStaticStatement
	return p
}

func (*PackageStaticStatementContext) IsPackageStaticStatementContext() {}

func NewPackageStaticStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStaticStatementContext {
	var p = new(PackageStaticStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageStaticStatement

	return p
}

func (s *PackageStaticStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStaticStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageStaticStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageStaticStatementContext) AllPackageStaticSupportStatement() []IPackageStaticSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageStaticSupportStatementContext)(nil)).Elem())
	var tst = make([]IPackageStaticSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageStaticSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageStaticStatementContext) PackageStaticSupportStatement(i int) IPackageStaticSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStaticSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageStaticSupportStatementContext)
}

func (s *PackageStaticStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStaticStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStaticStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageStaticStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageStaticStatement() (localctx IPackageStaticStatementContext) {
	localctx = NewPackageStaticStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, FeelParserRULE_packageStaticStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(611)
		p.Left_brace()
	}
	p.SetState(615)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(612)
				p.PackageStaticSupportStatement()
			}

		}
		p.SetState(617)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())
	}
	{
		p.SetState(618)
		p.Right_brace()
	}

	return localctx
}

// IPackageStaticSupportStatementContext is an interface to support dynamic dispatch.
type IPackageStaticSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStaticSupportStatementContext differentiates from other interfaces.
	IsPackageStaticSupportStatementContext()
}

type PackageStaticSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStaticSupportStatementContext() *PackageStaticSupportStatementContext {
	var p = new(PackageStaticSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageStaticSupportStatement
	return p
}

func (*PackageStaticSupportStatementContext) IsPackageStaticSupportStatementContext() {}

func NewPackageStaticSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStaticSupportStatementContext {
	var p = new(PackageStaticSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageStaticSupportStatement

	return p
}

func (s *PackageStaticSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStaticSupportStatementContext) PackageStaticFunctionStatement() IPackageStaticFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStaticFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStaticFunctionStatementContext)
}

func (s *PackageStaticSupportStatementContext) PackageStaticVariableStatement() IPackageStaticVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStaticVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStaticVariableStatementContext)
}

func (s *PackageStaticSupportStatementContext) PackageStaticConstantStatement() IPackageStaticConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStaticConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStaticConstantStatementContext)
}

func (s *PackageStaticSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *PackageStaticSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStaticSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStaticSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageStaticSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageStaticSupportStatement() (localctx IPackageStaticSupportStatementContext) {
	localctx = NewPackageStaticSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, FeelParserRULE_packageStaticSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(624)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(620)
			p.PackageStaticFunctionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(621)
			p.PackageStaticVariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(622)
			p.PackageStaticConstantStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(623)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IPackageStaticVariableStatementContext is an interface to support dynamic dispatch.
type IPackageStaticVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStaticVariableStatementContext differentiates from other interfaces.
	IsPackageStaticVariableStatementContext()
}

type PackageStaticVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStaticVariableStatementContext() *PackageStaticVariableStatementContext {
	var p = new(PackageStaticVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageStaticVariableStatement
	return p
}

func (*PackageStaticVariableStatementContext) IsPackageStaticVariableStatementContext() {}

func NewPackageStaticVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStaticVariableStatementContext {
	var p = new(PackageStaticVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageStaticVariableStatement

	return p
}

func (s *PackageStaticVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStaticVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStaticVariableStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PackageStaticVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStaticVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageStaticVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageStaticVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageStaticVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStaticVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStaticVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStaticVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageStaticVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageStaticVariableStatement() (localctx IPackageStaticVariableStatementContext) {
	localctx = NewPackageStaticVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, FeelParserRULE_packageStaticVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(626)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(629)
		p.Id()
	}
	{
		p.SetState(630)
		p.Match(FeelParserBang)
	}
	p.SetState(638)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(631)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(632)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(633)
			p.TypeType()
		}
		p.SetState(636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(634)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(635)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(640)
		p.End()
	}

	return localctx
}

// IPackageStaticConstantStatementContext is an interface to support dynamic dispatch.
type IPackageStaticConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStaticConstantStatementContext differentiates from other interfaces.
	IsPackageStaticConstantStatementContext()
}

type PackageStaticConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStaticConstantStatementContext() *PackageStaticConstantStatementContext {
	var p = new(PackageStaticConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageStaticConstantStatement
	return p
}

func (*PackageStaticConstantStatementContext) IsPackageStaticConstantStatementContext() {}

func NewPackageStaticConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStaticConstantStatementContext {
	var p = new(PackageStaticConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageStaticConstantStatement

	return p
}

func (s *PackageStaticConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStaticConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStaticConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStaticConstantStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageStaticConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageStaticConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageStaticConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStaticConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStaticConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStaticConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageStaticConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageStaticConstantStatement() (localctx IPackageStaticConstantStatementContext) {
	localctx = NewPackageStaticConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, FeelParserRULE_packageStaticConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(643)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(642)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(645)
		p.Id()
	}
	p.SetState(653)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(646)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(647)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(648)
			p.TypeType()
		}
		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(649)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(650)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(655)
		p.End()
	}

	return localctx
}

// IPackageStaticFunctionStatementContext is an interface to support dynamic dispatch.
type IPackageStaticFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsPackageStaticFunctionStatementContext differentiates from other interfaces.
	IsPackageStaticFunctionStatementContext()
}

type PackageStaticFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyPackageStaticFunctionStatementContext() *PackageStaticFunctionStatementContext {
	var p = new(PackageStaticFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageStaticFunctionStatement
	return p
}

func (*PackageStaticFunctionStatementContext) IsPackageStaticFunctionStatementContext() {}

func NewPackageStaticFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStaticFunctionStatementContext {
	var p = new(PackageStaticFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageStaticFunctionStatement

	return p
}

func (s *PackageStaticFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStaticFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *PackageStaticFunctionStatementContext) GetB() antlr.Token { return s.b }

func (s *PackageStaticFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *PackageStaticFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *PackageStaticFunctionStatementContext) SetB(v antlr.Token) { s.b = v }

func (s *PackageStaticFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *PackageStaticFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageStaticFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageStaticFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageStaticFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *PackageStaticFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageStaticFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageStaticFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageStaticFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStaticFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStaticFunctionStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PackageStaticFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageStaticFunctionStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PackageStaticFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *PackageStaticFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *PackageStaticFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStaticFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *PackageStaticFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *PackageStaticFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageStaticFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageStaticFunctionStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PackageStaticFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *PackageStaticFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStaticFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStaticFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageStaticFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageStaticFunctionStatement() (localctx IPackageStaticFunctionStatementContext) {
	localctx = NewPackageStaticFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, FeelParserRULE_packageStaticFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(658)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(657)
			p.AnnotationSupport()
		}

	}
	p.SetState(666)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(660)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(661)
			p.Left_brack()
		}
		{
			p.SetState(662)
			p.Id()
		}
		{
			p.SetState(663)
			p.TemplateDefine()
		}
		{
			p.SetState(664)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(668)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(669)
		p.Left_paren()
	}
	{
		p.SetState(670)
		p.ParameterClauseIn()
	}
	{
		p.SetState(671)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PackageStaticFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PackageStaticFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(672)

			var _m = p.Match(FeelParserBang)

			localctx.(*PackageStaticFunctionStatementContext).b = _m
		}

	}
	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(675)

			var _m = p.Match(FeelParserAt)

			localctx.(*PackageStaticFunctionStatementContext).y = _m
		}

	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(678)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(683)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(684)
		p.ParameterClauseOut()
	}
	{
		p.SetState(685)
		p.Right_paren()
	}
	{
		p.SetState(686)
		p.Left_brace()
	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(687)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(692)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}
	{
		p.SetState(693)
		p.Right_brace()
	}
	{
		p.SetState(694)
		p.End()
	}

	return localctx
}

// IPackageFieldStatementContext is an interface to support dynamic dispatch.
type IPackageFieldStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsPackageFieldStatementContext differentiates from other interfaces.
	IsPackageFieldStatementContext()
}

type PackageFieldStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyPackageFieldStatementContext() *PackageFieldStatementContext {
	var p = new(PackageFieldStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageFieldStatement
	return p
}

func (*PackageFieldStatementContext) IsPackageFieldStatementContext() {}

func NewPackageFieldStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageFieldStatementContext {
	var p = new(PackageFieldStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageFieldStatement

	return p
}

func (s *PackageFieldStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageFieldStatementContext) GetP() antlr.Token { return s.p }

func (s *PackageFieldStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *PackageFieldStatementContext) Coin() antlr.TerminalNode {
	return s.GetToken(FeelParserCoin, 0)
}

func (s *PackageFieldStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageFieldStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageFieldStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageFieldStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageFieldStatementContext) AllPackageSupportStatement() []IPackageSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem())
	var tst = make([]IPackageSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageFieldStatementContext) PackageSupportStatement(i int) IPackageSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageSupportStatementContext)
}

func (s *PackageFieldStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PackageFieldStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *PackageFieldStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageFieldStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageFieldStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageFieldStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageFieldStatement() (localctx IPackageFieldStatementContext) {
	localctx = NewPackageFieldStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, FeelParserRULE_packageFieldStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(696)
		p.Match(FeelParserCoin)
	}
	p.SetState(706)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(FeelParserQuestion-44))|(1<<(FeelParserTypeI8-44))|(1<<(FeelParserTypeU8-44))|(1<<(FeelParserTypeI16-44))|(1<<(FeelParserTypeU16-44))|(1<<(FeelParserTypeI32-44))|(1<<(FeelParserTypeU32-44))|(1<<(FeelParserTypeI64-44))|(1<<(FeelParserTypeU64-44))|(1<<(FeelParserTypeF32-44))|(1<<(FeelParserTypeF64-44))|(1<<(FeelParserTypeChr-44))|(1<<(FeelParserTypeStr-44))|(1<<(FeelParserTypeBool-44))|(1<<(FeelParserTypeInt-44))|(1<<(FeelParserTypeNum-44))|(1<<(FeelParserTypeByte-44))|(1<<(FeelParserTypeAny-44)))) != 0) || _la == FeelParserIDPrivate || _la == FeelParserIDPublic {
		p.SetState(698)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserQuestion {
			{
				p.SetState(697)

				var _m = p.Match(FeelParserQuestion)

				localctx.(*PackageFieldStatementContext).p = _m
			}

		}
		{
			p.SetState(700)
			p.Id()
		}
		p.SetState(704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserComma {
			{
				p.SetState(701)
				p.More()
			}
			{
				p.SetState(702)
				p.Id()
			}

		}

	}
	{
		p.SetState(708)
		p.Left_brace()
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(709)
				p.PackageSupportStatement()
			}

		}
		p.SetState(714)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())
	}
	{
		p.SetState(715)
		p.Right_brace()
	}

	return localctx
}

// IPackageSupportStatementContext is an interface to support dynamic dispatch.
type IPackageSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageSupportStatementContext differentiates from other interfaces.
	IsPackageSupportStatementContext()
}

type PackageSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageSupportStatementContext() *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageSupportStatement
	return p
}

func (*PackageSupportStatementContext) IsPackageSupportStatementContext() {}

func NewPackageSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageSupportStatement

	return p
}

func (s *PackageSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *PackageSupportStatementContext) PackageFunctionStatement() IPackageFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageFunctionStatementContext)
}

func (s *PackageSupportStatementContext) PackageVariableStatement() IPackageVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageVariableStatementContext)
}

func (s *PackageSupportStatementContext) PackageConstantStatement() IPackageConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageConstantStatementContext)
}

func (s *PackageSupportStatementContext) PackageEventStatement() IPackageEventStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageEventStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageEventStatementContext)
}

func (s *PackageSupportStatementContext) OverrideFunctionStatement() IOverrideFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideFunctionStatementContext)
}

func (s *PackageSupportStatementContext) OverrideVariableStatement() IOverrideVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideVariableStatementContext)
}

func (s *PackageSupportStatementContext) OverrideConstantStatement() IOverrideConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideConstantStatementContext)
}

func (s *PackageSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *PackageSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageSupportStatement() (localctx IPackageSupportStatementContext) {
	localctx = NewPackageSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, FeelParserRULE_packageSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(726)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(717)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(718)
			p.PackageFunctionStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(719)
			p.PackageVariableStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(720)
			p.PackageConstantStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(721)
			p.PackageEventStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(722)
			p.OverrideFunctionStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(723)
			p.OverrideVariableStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(724)
			p.OverrideConstantStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(725)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IIncludeStatementContext is an interface to support dynamic dispatch.
type IIncludeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeStatementContext differentiates from other interfaces.
	IsIncludeStatementContext()
}

type IncludeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStatementContext() *IncludeStatementContext {
	var p = new(IncludeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_includeStatement
	return p
}

func (*IncludeStatementContext) IsIncludeStatementContext() {}

func NewIncludeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStatementContext {
	var p = new(IncludeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_includeStatement

	return p
}

func (s *IncludeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *IncludeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *IncludeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitIncludeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) IncludeStatement() (localctx IIncludeStatementContext) {
	localctx = NewIncludeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, FeelParserRULE_includeStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(728)
		p.TypeType()
	}
	{
		p.SetState(729)
		p.End()
	}

	return localctx
}

// IPackageNewStatementContext is an interface to support dynamic dispatch.
type IPackageNewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsPackageNewStatementContext differentiates from other interfaces.
	IsPackageNewStatementContext()
}

type PackageNewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyPackageNewStatementContext() *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageNewStatement
	return p
}

func (*PackageNewStatementContext) IsPackageNewStatementContext() {}

func NewPackageNewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageNewStatement

	return p
}

func (s *PackageNewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNewStatementContext) GetP() antlr.Token { return s.p }

func (s *PackageNewStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *PackageNewStatementContext) AllLeft_paren() []ILeft_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem())
	var tst = make([]ILeft_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILeft_parenContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Left_paren(i int) ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageNewStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageNewStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *PackageNewStatementContext) Coin() antlr.TerminalNode {
	return s.GetToken(FeelParserCoin, 0)
}

func (s *PackageNewStatementContext) AllRight_paren() []IRight_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRight_parenContext)(nil)).Elem())
	var tst = make([]IRight_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRight_parenContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Right_paren(i int) IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageNewStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageNewStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageNewStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageNewStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageNewStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageNewStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *PackageNewStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PackageNewStatementContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PackageNewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNewStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageNewStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageNewStatement() (localctx IPackageNewStatementContext) {
	localctx = NewPackageNewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, FeelParserRULE_packageNewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(732)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(731)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(734)
		p.Left_paren()
	}
	{
		p.SetState(735)
		p.ParameterClauseIn()
	}
	{
		p.SetState(736)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(737)
		p.Match(FeelParserCoin)
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserQuestion {
		{
			p.SetState(738)

			var _m = p.Match(FeelParserQuestion)

			localctx.(*PackageNewStatementContext).p = _m
		}

	}
	p.SetState(747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
		{
			p.SetState(741)
			p.Id()
		}
		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserComma {
			{
				p.SetState(742)
				p.More()
			}
			{
				p.SetState(743)
				p.Id()
			}

		}

	}
	{
		p.SetState(749)
		p.Right_paren()
	}
	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserLeft_Paren {
		{
			p.SetState(750)
			p.Left_paren()
		}
		p.SetState(752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
			{
				p.SetState(751)
				p.ExpressionList()
			}

		}
		{
			p.SetState(754)
			p.Right_paren()
		}

	}
	{
		p.SetState(758)
		p.Left_brace()
	}
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(759)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext())
	}
	{
		p.SetState(765)
		p.Right_brace()
	}

	return localctx
}

// IPackageVariableStatementContext is an interface to support dynamic dispatch.
type IPackageVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageVariableStatementContext differentiates from other interfaces.
	IsPackageVariableStatementContext()
}

type PackageVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageVariableStatementContext() *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageVariableStatement
	return p
}

func (*PackageVariableStatementContext) IsPackageVariableStatementContext() {}

func NewPackageVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageVariableStatement

	return p
}

func (s *PackageVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageVariableStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PackageVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageVariableStatement() (localctx IPackageVariableStatementContext) {
	localctx = NewPackageVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, FeelParserRULE_packageVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(767)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(770)
		p.Id()
	}
	{
		p.SetState(771)
		p.Match(FeelParserBang)
	}
	p.SetState(779)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(772)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(773)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(774)
			p.TypeType()
		}
		p.SetState(777)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(775)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(776)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(781)
		p.End()
	}

	return localctx
}

// IPackageConstantStatementContext is an interface to support dynamic dispatch.
type IPackageConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageConstantStatementContext differentiates from other interfaces.
	IsPackageConstantStatementContext()
}

type PackageConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageConstantStatementContext() *PackageConstantStatementContext {
	var p = new(PackageConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageConstantStatement
	return p
}

func (*PackageConstantStatementContext) IsPackageConstantStatementContext() {}

func NewPackageConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageConstantStatementContext {
	var p = new(PackageConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageConstantStatement

	return p
}

func (s *PackageConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageConstantStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageConstantStatement() (localctx IPackageConstantStatementContext) {
	localctx = NewPackageConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, FeelParserRULE_packageConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(783)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(786)
		p.Id()
	}
	p.SetState(794)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(787)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(788)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(789)
			p.TypeType()
		}
		p.SetState(792)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(790)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(791)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(796)
		p.End()
	}

	return localctx
}

// IPackageFunctionStatementContext is an interface to support dynamic dispatch.
type IPackageFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsPackageFunctionStatementContext differentiates from other interfaces.
	IsPackageFunctionStatementContext()
}

type PackageFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyPackageFunctionStatementContext() *PackageFunctionStatementContext {
	var p = new(PackageFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageFunctionStatement
	return p
}

func (*PackageFunctionStatementContext) IsPackageFunctionStatementContext() {}

func NewPackageFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageFunctionStatementContext {
	var p = new(PackageFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageFunctionStatement

	return p
}

func (s *PackageFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *PackageFunctionStatementContext) GetB() antlr.Token { return s.b }

func (s *PackageFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *PackageFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *PackageFunctionStatementContext) SetB(v antlr.Token) { s.b = v }

func (s *PackageFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *PackageFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PackageFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *PackageFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageFunctionStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PackageFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageFunctionStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PackageFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *PackageFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *PackageFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *PackageFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *PackageFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageFunctionStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PackageFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *PackageFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageFunctionStatement() (localctx IPackageFunctionStatementContext) {
	localctx = NewPackageFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, FeelParserRULE_packageFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(798)
			p.AnnotationSupport()
		}

	}
	p.SetState(807)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(801)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(802)
			p.Left_brack()
		}
		{
			p.SetState(803)
			p.Id()
		}
		{
			p.SetState(804)
			p.TemplateDefine()
		}
		{
			p.SetState(805)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(809)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(810)
		p.Left_paren()
	}
	{
		p.SetState(811)
		p.ParameterClauseIn()
	}
	{
		p.SetState(812)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PackageFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PackageFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(814)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(813)

			var _m = p.Match(FeelParserBang)

			localctx.(*PackageFunctionStatementContext).b = _m
		}

	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(816)

			var _m = p.Match(FeelParserAt)

			localctx.(*PackageFunctionStatementContext).y = _m
		}

	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(819)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(825)
		p.ParameterClauseOut()
	}
	{
		p.SetState(826)
		p.Right_paren()
	}
	{
		p.SetState(827)
		p.Left_brace()
	}
	p.SetState(831)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(828)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(833)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())
	}
	{
		p.SetState(834)
		p.Right_brace()
	}
	{
		p.SetState(835)
		p.End()
	}

	return localctx
}

// IPackageControlSubStatementContext is an interface to support dynamic dispatch.
type IPackageControlSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageControlSubStatementContext differentiates from other interfaces.
	IsPackageControlSubStatementContext()
}

type PackageControlSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageControlSubStatementContext() *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageControlSubStatement
	return p
}

func (*PackageControlSubStatementContext) IsPackageControlSubStatementContext() {}

func NewPackageControlSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageControlSubStatement

	return p
}

func (s *PackageControlSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageControlSubStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageControlSubStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageControlSubStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageControlSubStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageControlSubStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageControlSubStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageControlSubStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageControlSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageControlSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageControlSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageControlSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageControlSubStatement() (localctx IPackageControlSubStatementContext) {
	localctx = NewPackageControlSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, FeelParserRULE_packageControlSubStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(837)
		p.Id()
	}
	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserLeft_Paren {
		{
			p.SetState(838)
			p.Left_paren()
		}
		{
			p.SetState(839)
			p.Id()
		}
		{
			p.SetState(840)
			p.Right_paren()
		}

	}
	{
		p.SetState(844)
		p.Left_brace()
	}
	p.SetState(846)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(845)
				p.FunctionSupportStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(848)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
	}
	{
		p.SetState(850)
		p.Right_brace()
	}
	{
		p.SetState(851)
		p.End()
	}

	return localctx
}

// IPackageEventStatementContext is an interface to support dynamic dispatch.
type IPackageEventStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageEventStatementContext differentiates from other interfaces.
	IsPackageEventStatementContext()
}

type PackageEventStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageEventStatementContext() *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_packageEventStatement
	return p
}

func (*PackageEventStatementContext) IsPackageEventStatementContext() {}

func NewPackageEventStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_packageEventStatement

	return p
}

func (s *PackageEventStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageEventStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageEventStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PackageEventStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PackageEventStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *PackageEventStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PackageEventStatementContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *PackageEventStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageEventStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageEventStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageEventStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPackageEventStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PackageEventStatement() (localctx IPackageEventStatementContext) {
	localctx = NewPackageEventStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, FeelParserRULE_packageEventStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(853)
		p.Id()
	}
	{
		p.SetState(854)
		p.Match(FeelParserBang)
	}
	{
		p.SetState(855)
		p.Left_brack()
	}
	{
		p.SetState(856)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(857)
		p.Right_brack()
	}
	{
		p.SetState(858)
		p.NameSpaceItem()
	}
	{
		p.SetState(859)
		p.End()
	}

	return localctx
}

// IImplementStatementContext is an interface to support dynamic dispatch.
type IImplementStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementStatementContext differentiates from other interfaces.
	IsImplementStatementContext()
}

type ImplementStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementStatementContext() *ImplementStatementContext {
	var p = new(ImplementStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_implementStatement
	return p
}

func (*ImplementStatementContext) IsImplementStatementContext() {}

func NewImplementStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementStatementContext {
	var p = new(ImplementStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_implementStatement

	return p
}

func (s *ImplementStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserColon_Equal, 0)
}

func (s *ImplementStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImplementStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *ImplementStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ImplementStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *ImplementStatementContext) PackageNewStatement() IPackageNewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageNewStatementContext)
}

func (s *ImplementStatementContext) PackageFieldStatement() IPackageFieldStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFieldStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageFieldStatementContext)
}

func (s *ImplementStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitImplementStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ImplementStatement() (localctx IImplementStatementContext) {
	localctx = NewImplementStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, FeelParserRULE_implementStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(867)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(861)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(862)
			p.Left_brack()
		}
		{
			p.SetState(863)
			p.Id()
		}
		{
			p.SetState(864)
			p.TemplateDefine()
		}
		{
			p.SetState(865)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(869)
		p.Match(FeelParserColon_Equal)
	}
	p.SetState(872)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserLeft_Paren, FeelParserSharp:
		{
			p.SetState(870)
			p.PackageNewStatement()
		}

	case FeelParserCoin:
		{
			p.SetState(871)
			p.PackageFieldStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(874)
		p.End()
	}

	return localctx
}

// IOverrideVariableStatementContext is an interface to support dynamic dispatch.
type IOverrideVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// IsOverrideVariableStatementContext differentiates from other interfaces.
	IsOverrideVariableStatementContext()
}

type OverrideVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
}

func NewEmptyOverrideVariableStatementContext() *OverrideVariableStatementContext {
	var p = new(OverrideVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_overrideVariableStatement
	return p
}

func (*OverrideVariableStatementContext) IsOverrideVariableStatementContext() {}

func NewOverrideVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideVariableStatementContext {
	var p = new(OverrideVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_overrideVariableStatement

	return p
}

func (s *OverrideVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideVariableStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideVariableStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideVariableStatementContext) Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot, 0)
}

func (s *OverrideVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideVariableStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *OverrideVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *OverrideVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OverrideVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *OverrideVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideVariableStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *OverrideVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitOverrideVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) OverrideVariableStatement() (localctx IOverrideVariableStatementContext) {
	localctx = NewOverrideVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, FeelParserRULE_overrideVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(876)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(879)
		p.Match(FeelParserDot)
	}
	p.SetState(881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserDiscard {
		{
			p.SetState(880)

			var _m = p.Match(FeelParserDiscard)

			localctx.(*OverrideVariableStatementContext).n = _m
		}

	}
	{
		p.SetState(883)
		p.Id()
	}
	{
		p.SetState(884)
		p.Match(FeelParserBang)
	}
	p.SetState(892)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(885)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(886)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(887)
			p.TypeType()
		}
		p.SetState(890)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(888)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(889)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(894)
		p.End()
	}

	return localctx
}

// IOverrideConstantStatementContext is an interface to support dynamic dispatch.
type IOverrideConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// IsOverrideConstantStatementContext differentiates from other interfaces.
	IsOverrideConstantStatementContext()
}

type OverrideConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
}

func NewEmptyOverrideConstantStatementContext() *OverrideConstantStatementContext {
	var p = new(OverrideConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_overrideConstantStatement
	return p
}

func (*OverrideConstantStatementContext) IsOverrideConstantStatementContext() {}

func NewOverrideConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideConstantStatementContext {
	var p = new(OverrideConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_overrideConstantStatement

	return p
}

func (s *OverrideConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideConstantStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideConstantStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideConstantStatementContext) Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot, 0)
}

func (s *OverrideConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideConstantStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *OverrideConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OverrideConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *OverrideConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideConstantStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *OverrideConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitOverrideConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) OverrideConstantStatement() (localctx IOverrideConstantStatementContext) {
	localctx = NewOverrideConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, FeelParserRULE_overrideConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(896)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(899)
		p.Match(FeelParserDot)
	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserDiscard {
		{
			p.SetState(900)

			var _m = p.Match(FeelParserDiscard)

			localctx.(*OverrideConstantStatementContext).n = _m
		}

	}
	{
		p.SetState(903)
		p.Id()
	}
	p.SetState(911)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(904)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(905)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(906)
			p.TypeType()
		}
		p.SetState(909)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(907)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(908)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(913)
		p.End()
	}

	return localctx
}

// IOverrideFunctionStatementContext is an interface to support dynamic dispatch.
type IOverrideFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsOverrideFunctionStatementContext differentiates from other interfaces.
	IsOverrideFunctionStatementContext()
}

type OverrideFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyOverrideFunctionStatementContext() *OverrideFunctionStatementContext {
	var p = new(OverrideFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_overrideFunctionStatement
	return p
}

func (*OverrideFunctionStatementContext) IsOverrideFunctionStatementContext() {}

func NewOverrideFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideFunctionStatementContext {
	var p = new(OverrideFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_overrideFunctionStatement

	return p
}

func (s *OverrideFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideFunctionStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *OverrideFunctionStatementContext) GetB() antlr.Token { return s.b }

func (s *OverrideFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *OverrideFunctionStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *OverrideFunctionStatementContext) SetB(v antlr.Token) { s.b = v }

func (s *OverrideFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *OverrideFunctionStatementContext) Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot, 0)
}

func (s *OverrideFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *OverrideFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *OverrideFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *OverrideFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *OverrideFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *OverrideFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *OverrideFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *OverrideFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideFunctionStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *OverrideFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *OverrideFunctionStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *OverrideFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *OverrideFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *OverrideFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *OverrideFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *OverrideFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *OverrideFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *OverrideFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *OverrideFunctionStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *OverrideFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *OverrideFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitOverrideFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) OverrideFunctionStatement() (localctx IOverrideFunctionStatementContext) {
	localctx = NewOverrideFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, FeelParserRULE_overrideFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(916)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(915)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(918)
		p.Match(FeelParserDot)
	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserDiscard {
		{
			p.SetState(919)

			var _m = p.Match(FeelParserDiscard)

			localctx.(*OverrideFunctionStatementContext).n = _m
		}

	}
	p.SetState(928)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(922)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(923)
			p.Left_brack()
		}
		{
			p.SetState(924)
			p.Id()
		}
		{
			p.SetState(925)
			p.TemplateDefine()
		}
		{
			p.SetState(926)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(930)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(931)
		p.Left_paren()
	}
	{
		p.SetState(932)
		p.ParameterClauseIn()
	}
	{
		p.SetState(933)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*OverrideFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*OverrideFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(934)

			var _m = p.Match(FeelParserBang)

			localctx.(*OverrideFunctionStatementContext).b = _m
		}

	}
	p.SetState(938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(937)

			var _m = p.Match(FeelParserAt)

			localctx.(*OverrideFunctionStatementContext).y = _m
		}

	}
	p.SetState(943)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(940)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(946)
		p.ParameterClauseOut()
	}
	{
		p.SetState(947)
		p.Right_paren()
	}
	{
		p.SetState(948)
		p.Left_brace()
	}
	p.SetState(952)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(949)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(954)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
	}
	{
		p.SetState(955)
		p.Right_brace()
	}
	{
		p.SetState(956)
		p.End()
	}

	return localctx
}

// IProtocolStatementContext is an interface to support dynamic dispatch.
type IProtocolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolStatementContext differentiates from other interfaces.
	IsProtocolStatementContext()
}

type ProtocolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolStatementContext() *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_protocolStatement
	return p
}

func (*ProtocolStatementContext) IsProtocolStatementContext() {}

func NewProtocolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_protocolStatement

	return p
}

func (s *ProtocolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *ProtocolStatementContext) ProtocolSubStatement() IProtocolSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolSubStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolSubStatementContext)
}

func (s *ProtocolStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *ProtocolStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *ProtocolStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *ProtocolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitProtocolStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ProtocolStatement() (localctx IProtocolStatementContext) {
	localctx = NewProtocolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, FeelParserRULE_protocolStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(958)
			p.AnnotationSupport()
		}

	}
	p.SetState(967)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(961)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(962)
			p.Left_brack()
		}
		{
			p.SetState(963)
			p.Id()
		}
		{
			p.SetState(964)
			p.TemplateDefine()
		}
		{
			p.SetState(965)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(970)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(969)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(972)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(973)
		p.ProtocolSubStatement()
	}
	{
		p.SetState(974)
		p.End()
	}

	return localctx
}

// IProtocolSubStatementContext is an interface to support dynamic dispatch.
type IProtocolSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsProtocolSubStatementContext differentiates from other interfaces.
	IsProtocolSubStatementContext()
}

type ProtocolSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyProtocolSubStatementContext() *ProtocolSubStatementContext {
	var p = new(ProtocolSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_protocolSubStatement
	return p
}

func (*ProtocolSubStatementContext) IsProtocolSubStatementContext() {}

func NewProtocolSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolSubStatementContext {
	var p = new(ProtocolSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_protocolSubStatement

	return p
}

func (s *ProtocolSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolSubStatementContext) GetP() antlr.Token { return s.p }

func (s *ProtocolSubStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *ProtocolSubStatementContext) AllCoin() []antlr.TerminalNode {
	return s.GetTokens(FeelParserCoin)
}

func (s *ProtocolSubStatementContext) Coin(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserCoin, i)
}

func (s *ProtocolSubStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ProtocolSubStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ProtocolSubStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *ProtocolSubStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolSubStatementContext) AllProtocolSupportStatement() []IProtocolSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem())
	var tst = make([]IProtocolSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProtocolSupportStatementContext)
		}
	}

	return tst
}

func (s *ProtocolSubStatementContext) ProtocolSupportStatement(i int) IProtocolSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProtocolSupportStatementContext)
}

func (s *ProtocolSubStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ProtocolSubStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *ProtocolSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitProtocolSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ProtocolSubStatement() (localctx IProtocolSubStatementContext) {
	localctx = NewProtocolSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, FeelParserRULE_protocolSubStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(976)
		p.Match(FeelParserCoin)
	}
	{
		p.SetState(977)
		p.Match(FeelParserCoin)
	}
	p.SetState(987)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-44)&-(0x1f+1)) == 0 && ((1<<uint((_la-44)))&((1<<(FeelParserQuestion-44))|(1<<(FeelParserTypeI8-44))|(1<<(FeelParserTypeU8-44))|(1<<(FeelParserTypeI16-44))|(1<<(FeelParserTypeU16-44))|(1<<(FeelParserTypeI32-44))|(1<<(FeelParserTypeU32-44))|(1<<(FeelParserTypeI64-44))|(1<<(FeelParserTypeU64-44))|(1<<(FeelParserTypeF32-44))|(1<<(FeelParserTypeF64-44))|(1<<(FeelParserTypeChr-44))|(1<<(FeelParserTypeStr-44))|(1<<(FeelParserTypeBool-44))|(1<<(FeelParserTypeInt-44))|(1<<(FeelParserTypeNum-44))|(1<<(FeelParserTypeByte-44))|(1<<(FeelParserTypeAny-44)))) != 0) || _la == FeelParserIDPrivate || _la == FeelParserIDPublic {
		p.SetState(979)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserQuestion {
			{
				p.SetState(978)

				var _m = p.Match(FeelParserQuestion)

				localctx.(*ProtocolSubStatementContext).p = _m
			}

		}
		{
			p.SetState(981)
			p.Id()
		}
		p.SetState(985)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserComma {
			{
				p.SetState(982)
				p.More()
			}
			{
				p.SetState(983)
				p.Id()
			}

		}

	}
	{
		p.SetState(989)
		p.Left_brace()
	}
	p.SetState(993)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(990)
				p.ProtocolSupportStatement()
			}

		}
		p.SetState(995)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext())
	}
	{
		p.SetState(996)
		p.Right_brace()
	}

	return localctx
}

// IProtocolSupportStatementContext is an interface to support dynamic dispatch.
type IProtocolSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolSupportStatementContext differentiates from other interfaces.
	IsProtocolSupportStatementContext()
}

type ProtocolSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolSupportStatementContext() *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_protocolSupportStatement
	return p
}

func (*ProtocolSupportStatementContext) IsProtocolSupportStatementContext() {}

func NewProtocolSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_protocolSupportStatement

	return p
}

func (s *ProtocolSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolFunctionStatement() IProtocolFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolFunctionStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolVariableStatement() IProtocolVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolVariableStatementContext)
}

func (s *ProtocolSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *ProtocolSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitProtocolSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ProtocolSupportStatement() (localctx IProtocolSupportStatementContext) {
	localctx = NewProtocolSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, FeelParserRULE_protocolSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1002)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(998)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(999)
			p.ProtocolFunctionStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1000)
			p.ProtocolVariableStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1001)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IProtocolVariableStatementContext is an interface to support dynamic dispatch.
type IProtocolVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolVariableStatementContext differentiates from other interfaces.
	IsProtocolVariableStatementContext()
}

type ProtocolVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolVariableStatementContext() *ProtocolVariableStatementContext {
	var p = new(ProtocolVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_protocolVariableStatement
	return p
}

func (*ProtocolVariableStatementContext) IsProtocolVariableStatementContext() {}

func NewProtocolVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolVariableStatementContext {
	var p = new(ProtocolVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_protocolVariableStatement

	return p
}

func (s *ProtocolVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *ProtocolVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ProtocolVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ProtocolVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolVariableStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *ProtocolVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitProtocolVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ProtocolVariableStatement() (localctx IProtocolVariableStatementContext) {
	localctx = NewProtocolVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, FeelParserRULE_protocolVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(1004)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(1007)
		p.Id()
	}
	p.SetState(1009)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1008)
			p.Match(FeelParserBang)
		}

	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserColon:
		{
			p.SetState(1011)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(1012)
			p.expression(0)
		}

	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserQuestion, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(1013)
			p.TypeType()
		}
		p.SetState(1016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserColon {
			{
				p.SetState(1014)
				p.Match(FeelParserColon)
			}
			{
				p.SetState(1015)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1020)
		p.End()
	}

	return localctx
}

// IProtocolFunctionStatementContext is an interface to support dynamic dispatch.
type IProtocolFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsProtocolFunctionStatementContext differentiates from other interfaces.
	IsProtocolFunctionStatementContext()
}

type ProtocolFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyProtocolFunctionStatementContext() *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_protocolFunctionStatement
	return p
}

func (*ProtocolFunctionStatementContext) IsProtocolFunctionStatementContext() {}

func NewProtocolFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_protocolFunctionStatement

	return p
}

func (s *ProtocolFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *ProtocolFunctionStatementContext) GetB() antlr.Token { return s.b }

func (s *ProtocolFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *ProtocolFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *ProtocolFunctionStatementContext) SetB(v antlr.Token) { s.b = v }

func (s *ProtocolFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *ProtocolFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *ProtocolFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ProtocolFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolFunctionStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *ProtocolFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolFunctionStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *ProtocolFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *ProtocolFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *ProtocolFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *ProtocolFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *ProtocolFunctionStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *ProtocolFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *ProtocolFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitProtocolFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ProtocolFunctionStatement() (localctx IProtocolFunctionStatementContext) {
	localctx = NewProtocolFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, FeelParserRULE_protocolFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(1022)
			p.AnnotationSupport()
		}

	}
	p.SetState(1031)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(1025)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(1026)
			p.Left_brack()
		}
		{
			p.SetState(1027)
			p.Id()
		}
		{
			p.SetState(1028)
			p.TemplateDefine()
		}
		{
			p.SetState(1029)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1033)
		p.Left_paren()
	}
	{
		p.SetState(1034)
		p.ParameterClauseIn()
	}
	{
		p.SetState(1035)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ProtocolFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ProtocolFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1036)

			var _m = p.Match(FeelParserBang)

			localctx.(*ProtocolFunctionStatementContext).b = _m
		}

	}
	p.SetState(1040)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(1039)

			var _m = p.Match(FeelParserAt)

			localctx.(*ProtocolFunctionStatementContext).y = _m
		}

	}
	p.SetState(1045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(1042)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(1047)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1048)
		p.ParameterClauseOut()
	}
	{
		p.SetState(1049)
		p.Right_paren()
	}
	{
		p.SetState(1050)
		p.End()
	}

	return localctx
}

// IFunctionStatementContext is an interface to support dynamic dispatch.
type IFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsFunctionStatementContext differentiates from other interfaces.
	IsFunctionStatementContext()
}

type FunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyFunctionStatementContext() *FunctionStatementContext {
	var p = new(FunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_functionStatement
	return p
}

func (*FunctionStatementContext) IsFunctionStatementContext() {}

func NewFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementContext {
	var p = new(FunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_functionStatement

	return p
}

func (s *FunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *FunctionStatementContext) GetB() antlr.Token { return s.b }

func (s *FunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *FunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionStatementContext) SetB(v antlr.Token) { s.b = v }

func (s *FunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *FunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *FunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *FunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *FunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *FunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *FunctionStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *FunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *FunctionStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *FunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *FunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *FunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *FunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *FunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *FunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *FunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) FunctionStatement() (localctx IFunctionStatementContext) {
	localctx = NewFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, FeelParserRULE_functionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1058)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(1052)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(1053)
			p.Left_brack()
		}
		{
			p.SetState(1054)
			p.Id()
		}
		{
			p.SetState(1055)
			p.TemplateDefine()
		}
		{
			p.SetState(1056)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1060)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1061)
		p.Left_paren()
	}
	{
		p.SetState(1062)
		p.ParameterClauseIn()
	}
	{
		p.SetState(1063)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1065)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1064)

			var _m = p.Match(FeelParserBang)

			localctx.(*FunctionStatementContext).b = _m
		}

	}
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(1067)

			var _m = p.Match(FeelParserAt)

			localctx.(*FunctionStatementContext).y = _m
		}

	}
	p.SetState(1073)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(1070)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(1075)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1076)
		p.ParameterClauseOut()
	}
	{
		p.SetState(1077)
		p.Right_paren()
	}
	{
		p.SetState(1078)
		p.Left_brace()
	}
	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1079)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1084)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())
	}
	{
		p.SetState(1085)
		p.Right_brace()
	}
	{
		p.SetState(1086)
		p.End()
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Arrow, 0)
}

func (s *ReturnStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReturnStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, FeelParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1088)
		p.Match(FeelParserLeft_Arrow)
	}
	p.SetState(1090)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
		{
			p.SetState(1089)
			p.TupleExpression()
		}

	}
	{
		p.SetState(1092)
		p.End()
	}

	return localctx
}

// IReturnAsyncStatementContext is an interface to support dynamic dispatch.
type IReturnAsyncStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnAsyncStatementContext differentiates from other interfaces.
	IsReturnAsyncStatementContext()
}

type ReturnAsyncStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnAsyncStatementContext() *ReturnAsyncStatementContext {
	var p = new(ReturnAsyncStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_returnAsyncStatement
	return p
}

func (*ReturnAsyncStatementContext) IsReturnAsyncStatementContext() {}

func NewReturnAsyncStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnAsyncStatementContext {
	var p = new(ReturnAsyncStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_returnAsyncStatement

	return p
}

func (s *ReturnAsyncStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnAsyncStatementContext) Left_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Flow, 0)
}

func (s *ReturnAsyncStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReturnAsyncStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *ReturnAsyncStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnAsyncStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnAsyncStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitReturnAsyncStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ReturnAsyncStatement() (localctx IReturnAsyncStatementContext) {
	localctx = NewReturnAsyncStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, FeelParserRULE_returnAsyncStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1094)
		p.Match(FeelParserLeft_Flow)
	}
	p.SetState(1096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
		{
			p.SetState(1095)
			p.TupleExpression()
		}

	}
	{
		p.SetState(1098)
		p.End()
	}

	return localctx
}

// IYieldReturnStatementContext is an interface to support dynamic dispatch.
type IYieldReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldReturnStatementContext differentiates from other interfaces.
	IsYieldReturnStatementContext()
}

type YieldReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldReturnStatementContext() *YieldReturnStatementContext {
	var p = new(YieldReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_yieldReturnStatement
	return p
}

func (*YieldReturnStatementContext) IsYieldReturnStatementContext() {}

func NewYieldReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldReturnStatementContext {
	var p = new(YieldReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_yieldReturnStatement

	return p
}

func (s *YieldReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldReturnStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *YieldReturnStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Arrow, 0)
}

func (s *YieldReturnStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *YieldReturnStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *YieldReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitYieldReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) YieldReturnStatement() (localctx IYieldReturnStatementContext) {
	localctx = NewYieldReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, FeelParserRULE_yieldReturnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1100)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1101)
		p.Match(FeelParserLeft_Arrow)
	}
	{
		p.SetState(1102)
		p.TupleExpression()
	}
	{
		p.SetState(1103)
		p.End()
	}

	return localctx
}

// IYieldBreakStatementContext is an interface to support dynamic dispatch.
type IYieldBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldBreakStatementContext differentiates from other interfaces.
	IsYieldBreakStatementContext()
}

type YieldBreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldBreakStatementContext() *YieldBreakStatementContext {
	var p = new(YieldBreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_yieldBreakStatement
	return p
}

func (*YieldBreakStatementContext) IsYieldBreakStatementContext() {}

func NewYieldBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldBreakStatementContext {
	var p = new(YieldBreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_yieldBreakStatement

	return p
}

func (s *YieldBreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldBreakStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *YieldBreakStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Arrow, 0)
}

func (s *YieldBreakStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *YieldBreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldBreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldBreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitYieldBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) YieldBreakStatement() (localctx IYieldBreakStatementContext) {
	localctx = NewYieldBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, FeelParserRULE_yieldBreakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1105)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1106)
		p.Match(FeelParserLeft_Arrow)
	}
	{
		p.SetState(1107)
		p.End()
	}

	return localctx
}

// IParameterClauseInContext is an interface to support dynamic dispatch.
type IParameterClauseInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseInContext differentiates from other interfaces.
	IsParameterClauseInContext()
}

type ParameterClauseInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseInContext() *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_parameterClauseIn
	return p
}

func (*ParameterClauseInContext) IsParameterClauseInContext() {}

func NewParameterClauseInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_parameterClauseIn

	return p
}

func (s *ParameterClauseInContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseInContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitParameterClauseIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ParameterClauseIn() (localctx IParameterClauseInContext) {
	localctx = NewParameterClauseInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, FeelParserRULE_parameterClauseIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(FeelParserSharp-58))|(1<<(FeelParserTypeI8-58))|(1<<(FeelParserTypeU8-58))|(1<<(FeelParserTypeI16-58))|(1<<(FeelParserTypeU16-58))|(1<<(FeelParserTypeI32-58))|(1<<(FeelParserTypeU32-58))|(1<<(FeelParserTypeI64-58))|(1<<(FeelParserTypeU64-58))|(1<<(FeelParserTypeF32-58))|(1<<(FeelParserTypeF64-58))|(1<<(FeelParserTypeChr-58))|(1<<(FeelParserTypeStr-58))|(1<<(FeelParserTypeBool-58))|(1<<(FeelParserTypeInt-58))|(1<<(FeelParserTypeNum-58))|(1<<(FeelParserTypeByte-58))|(1<<(FeelParserTypeAny-58))|(1<<(FeelParserIDPrivate-58))|(1<<(FeelParserIDPublic-58)))) != 0 {
		{
			p.SetState(1109)
			p.Parameter()
		}

	}
	p.SetState(1117)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1112)
			p.More()
		}
		{
			p.SetState(1113)
			p.Parameter()
		}

		p.SetState(1119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterClauseOutContext is an interface to support dynamic dispatch.
type IParameterClauseOutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseOutContext differentiates from other interfaces.
	IsParameterClauseOutContext()
}

type ParameterClauseOutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseOutContext() *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_parameterClauseOut
	return p
}

func (*ParameterClauseOutContext) IsParameterClauseOutContext() {}

func NewParameterClauseOutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_parameterClauseOut

	return p
}

func (s *ParameterClauseOutContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseOutContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseOutContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseOutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseOutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseOutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitParameterClauseOut(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ParameterClauseOut() (localctx IParameterClauseOutContext) {
	localctx = NewParameterClauseOutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, FeelParserRULE_parameterClauseOut)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1121)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(FeelParserSharp-58))|(1<<(FeelParserTypeI8-58))|(1<<(FeelParserTypeU8-58))|(1<<(FeelParserTypeI16-58))|(1<<(FeelParserTypeU16-58))|(1<<(FeelParserTypeI32-58))|(1<<(FeelParserTypeU32-58))|(1<<(FeelParserTypeI64-58))|(1<<(FeelParserTypeU64-58))|(1<<(FeelParserTypeF32-58))|(1<<(FeelParserTypeF64-58))|(1<<(FeelParserTypeChr-58))|(1<<(FeelParserTypeStr-58))|(1<<(FeelParserTypeBool-58))|(1<<(FeelParserTypeInt-58))|(1<<(FeelParserTypeNum-58))|(1<<(FeelParserTypeByte-58))|(1<<(FeelParserTypeAny-58))|(1<<(FeelParserIDPrivate-58))|(1<<(FeelParserIDPublic-58)))) != 0 {
		{
			p.SetState(1120)
			p.Parameter()
		}

	}
	p.SetState(1128)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1123)
			p.More()
		}
		{
			p.SetState(1124)
			p.Parameter()
		}

		p.SetState(1130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ParameterContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ParameterContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *ParameterContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *ParameterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParameterContext) Comma_Comma() antlr.TerminalNode {
	return s.GetToken(FeelParserComma_Comma, 0)
}

func (s *ParameterContext) Comma_Comma_Comma() antlr.TerminalNode {
	return s.GetToken(FeelParserComma_Comma_Comma, 0)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, FeelParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1132)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserSharp {
		{
			p.SetState(1131)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(1134)
		p.Id()
	}
	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1135)
			p.Match(FeelParserBang)
		}

	}
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserComma_Comma_Comma || _la == FeelParserComma_Comma {
		{
			p.SetState(1138)
			_la = p.GetTokenStream().LA(1)

			if !(_la == FeelParserComma_Comma_Comma || _la == FeelParserComma_Comma) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1141)
		p.TypeType()
	}
	p.SetState(1144)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserColon {
		{
			p.SetState(1142)
			p.Match(FeelParserColon)
		}
		{
			p.SetState(1143)
			p.expression(0)
		}

	}

	return localctx
}

// IFunctionSupportStatementContext is an interface to support dynamic dispatch.
type IFunctionSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSupportStatementContext differentiates from other interfaces.
	IsFunctionSupportStatementContext()
}

type FunctionSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSupportStatementContext() *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_functionSupportStatement
	return p
}

func (*FunctionSupportStatementContext) IsFunctionSupportStatementContext() {}

func NewFunctionSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_functionSupportStatement

	return p
}

func (s *FunctionSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSupportStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *FunctionSupportStatementContext) ReturnAsyncStatement() IReturnAsyncStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnAsyncStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnAsyncStatementContext)
}

func (s *FunctionSupportStatementContext) YieldReturnStatement() IYieldReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldReturnStatementContext)
}

func (s *FunctionSupportStatementContext) YieldBreakStatement() IYieldBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldBreakStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeCaseStatement() IJudgeCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCaseStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeStatement() IJudgeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeStatementContext)
}

func (s *FunctionSupportStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *FunctionSupportStatementContext) LoopEachStatement() ILoopEachStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopEachStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopEachStatementContext)
}

func (s *FunctionSupportStatementContext) LoopCaseStatement() ILoopCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopCaseStatementContext)
}

func (s *FunctionSupportStatementContext) LoopJumpStatement() ILoopJumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopJumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopJumpStatementContext)
}

func (s *FunctionSupportStatementContext) LoopContinueStatement() ILoopContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopContinueStatementContext)
}

func (s *FunctionSupportStatementContext) UsingStatement() IUsingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingStatementContext)
}

func (s *FunctionSupportStatementContext) CheckStatement() ICheckStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckStatementContext)
}

func (s *FunctionSupportStatementContext) CheckReportStatement() ICheckReportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckReportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckReportStatementContext)
}

func (s *FunctionSupportStatementContext) FunctionStatement() IFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementContext)
}

func (s *FunctionSupportStatementContext) VariableDeclaredStatement() IVariableDeclaredStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaredStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaredStatementContext)
}

func (s *FunctionSupportStatementContext) ConstantDeclaredStatement() IConstantDeclaredStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantDeclaredStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantDeclaredStatementContext)
}

func (s *FunctionSupportStatementContext) VarStatement() IVarStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarStatementContext)
}

func (s *FunctionSupportStatementContext) BindStatement() IBindStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindStatementContext)
}

func (s *FunctionSupportStatementContext) AssignStatement() IAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignStatementContext)
}

func (s *FunctionSupportStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *FunctionSupportStatementContext) AnnotationStatement() IAnnotationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationStatementContext)
}

func (s *FunctionSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *FunctionSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitFunctionSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) FunctionSupportStatement() (localctx IFunctionSupportStatementContext) {
	localctx = NewFunctionSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, FeelParserRULE_functionSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1169)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1146)
			p.ReturnStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1147)
			p.ReturnAsyncStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1148)
			p.YieldReturnStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1149)
			p.YieldBreakStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1150)
			p.JudgeCaseStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1151)
			p.JudgeStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1152)
			p.LoopStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1153)
			p.LoopEachStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1154)
			p.LoopCaseStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1155)
			p.LoopJumpStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1156)
			p.LoopContinueStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1157)
			p.UsingStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1158)
			p.CheckStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1159)
			p.CheckReportStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1160)
			p.FunctionStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1161)
			p.VariableDeclaredStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1162)
			p.ConstantDeclaredStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1163)
			p.VarStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1164)
			p.BindStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1165)
			p.AssignStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1166)
			p.ExpressionStatement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1167)
			p.AnnotationStatement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1168)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IJudgeCaseStatementContext is an interface to support dynamic dispatch.
type IJudgeCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCaseStatementContext differentiates from other interfaces.
	IsJudgeCaseStatementContext()
}

type JudgeCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCaseStatementContext() *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeCaseStatement
	return p
}

func (*JudgeCaseStatementContext) IsJudgeCaseStatementContext() {}

func NewJudgeCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeCaseStatement

	return p
}

func (s *JudgeCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCaseStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *JudgeCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeCaseStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *JudgeCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeCaseStatementContext) AllCaseStatement() []ICaseStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem())
	var tst = make([]ICaseStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseStatementContext)
		}
	}

	return tst
}

func (s *JudgeCaseStatementContext) CaseStatement(i int) ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *JudgeCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeCaseStatement() (localctx IJudgeCaseStatementContext) {
	localctx = NewJudgeCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, FeelParserRULE_judgeCaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1171)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(1172)
		p.expression(0)
	}
	{
		p.SetState(1173)
		p.Match(FeelParserColon)
	}
	p.SetState(1175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
		{
			p.SetState(1174)
			p.CaseStatement()
		}

		p.SetState(1177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1179)
		p.End()
	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) AllCaseExprStatement() []ICaseExprStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem())
	var tst = make([]ICaseExprStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExprStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) CaseExprStatement(i int) ICaseExprStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExprStatementContext)
}

func (s *CaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *CaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CaseStatement() (localctx ICaseStatementContext) {
	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, FeelParserRULE_caseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1181)
		p.CaseExprStatement()
	}
	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1182)
			p.More()
		}
		{
			p.SetState(1183)
			p.CaseExprStatement()
		}

		p.SetState(1189)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1190)
		p.Left_brace()
	}
	p.SetState(1194)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1191)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1196)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext())
	}
	{
		p.SetState(1197)
		p.Right_brace()
	}

	return localctx
}

// ICaseExprStatementContext is an interface to support dynamic dispatch.
type ICaseExprStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExprStatementContext differentiates from other interfaces.
	IsCaseExprStatementContext()
}

type CaseExprStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExprStatementContext() *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_caseExprStatement
	return p
}

func (*CaseExprStatementContext) IsCaseExprStatementContext() {}

func NewCaseExprStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_caseExprStatement

	return p
}

func (s *CaseExprStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExprStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *CaseExprStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExprStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CaseExprStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CaseExprStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExprStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExprStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCaseExprStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CaseExprStatement() (localctx ICaseExprStatementContext) {
	localctx = NewCaseExprStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, FeelParserRULE_caseExprStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1199)
			p.Match(FeelParserDiscard)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1200)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1203)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
			{
				p.SetState(1201)
				p.Id()
			}

		case FeelParserDiscard:
			{
				p.SetState(1202)
				p.Match(FeelParserDiscard)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1205)
			p.TypeType()
		}

	}

	return localctx
}

// IJudgeStatementContext is an interface to support dynamic dispatch.
type IJudgeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeStatementContext differentiates from other interfaces.
	IsJudgeStatementContext()
}

type JudgeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeStatementContext() *JudgeStatementContext {
	var p = new(JudgeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeStatement
	return p
}

func (*JudgeStatementContext) IsJudgeStatementContext() {}

func NewJudgeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeStatementContext {
	var p = new(JudgeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeStatement

	return p
}

func (s *JudgeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeStatementContext) JudgeIfStatement() IJudgeIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeIfStatementContext)
}

func (s *JudgeStatementContext) JudgeElseStatement() IJudgeElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseStatementContext)
}

func (s *JudgeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeStatementContext) AllJudgeElseIfStatement() []IJudgeElseIfStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem())
	var tst = make([]IJudgeElseIfStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJudgeElseIfStatementContext)
		}
	}

	return tst
}

func (s *JudgeStatementContext) JudgeElseIfStatement(i int) IJudgeElseIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseIfStatementContext)
}

func (s *JudgeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeStatement() (localctx IJudgeStatementContext) {
	localctx = NewJudgeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, FeelParserRULE_judgeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1227)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1208)
			p.JudgeIfStatement()
		}
		p.SetState(1212)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1209)
					p.JudgeElseIfStatement()
				}

			}
			p.SetState(1214)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())
		}
		{
			p.SetState(1215)
			p.JudgeElseStatement()
		}
		{
			p.SetState(1216)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1218)
			p.JudgeIfStatement()
		}
		p.SetState(1222)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
			{
				p.SetState(1219)
				p.JudgeElseIfStatement()
			}

			p.SetState(1224)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1225)
			p.End()
		}

	}

	return localctx
}

// IJudgeElseStatementContext is an interface to support dynamic dispatch.
type IJudgeElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseStatementContext differentiates from other interfaces.
	IsJudgeElseStatementContext()
}

type JudgeElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseStatementContext() *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeElseStatement
	return p
}

func (*JudgeElseStatementContext) IsJudgeElseStatementContext() {}

func NewJudgeElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeElseStatement

	return p
}

func (s *JudgeElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *JudgeElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeElseStatement() (localctx IJudgeElseStatementContext) {
	localctx = NewJudgeElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, FeelParserRULE_judgeElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1229)
		p.Match(FeelParserDiscard)
	}
	{
		p.SetState(1230)
		p.Left_brace()
	}
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1231)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1236)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())
	}
	{
		p.SetState(1237)
		p.Right_brace()
	}

	return localctx
}

// IJudgeIfStatementContext is an interface to support dynamic dispatch.
type IJudgeIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeIfStatementContext differentiates from other interfaces.
	IsJudgeIfStatementContext()
}

type JudgeIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeIfStatementContext() *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeIfStatement
	return p
}

func (*JudgeIfStatementContext) IsJudgeIfStatementContext() {}

func NewJudgeIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeIfStatement

	return p
}

func (s *JudgeIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeIfStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *JudgeIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeIfStatement() (localctx IJudgeIfStatementContext) {
	localctx = NewJudgeIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, FeelParserRULE_judgeIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1239)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(1240)
		p.expression(0)
	}
	{
		p.SetState(1241)
		p.Left_brace()
	}
	p.SetState(1245)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1242)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1247)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext())
	}
	{
		p.SetState(1248)
		p.Right_brace()
	}

	return localctx
}

// IJudgeElseIfStatementContext is an interface to support dynamic dispatch.
type IJudgeElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseIfStatementContext differentiates from other interfaces.
	IsJudgeElseIfStatementContext()
}

type JudgeElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseIfStatementContext() *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeElseIfStatement
	return p
}

func (*JudgeElseIfStatementContext) IsJudgeElseIfStatementContext() {}

func NewJudgeElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeElseIfStatement

	return p
}

func (s *JudgeElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeElseIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeElseIfStatement() (localctx IJudgeElseIfStatementContext) {
	localctx = NewJudgeElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, FeelParserRULE_judgeElseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1250)
		p.expression(0)
	}
	{
		p.SetState(1251)
		p.Left_brace()
	}
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1252)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1257)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext())
	}
	{
		p.SetState(1258)
		p.Right_brace()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *LoopStatementContext) IteratorStatement() IIteratorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorStatementContext)
}

func (s *LoopStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *LoopStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopStatementContext) LoopElseStatement() ILoopElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, FeelParserRULE_loopStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1260)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1261)
		p.Id()
	}
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1262)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(1265)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1266)
		p.IteratorStatement()
	}
	{
		p.SetState(1267)
		p.Left_brace()
	}
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1268)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1273)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext())
	}
	{
		p.SetState(1274)
		p.Right_brace()
	}
	p.SetState(1276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserDiscard {
		{
			p.SetState(1275)
			p.LoopElseStatement()
		}

	}
	{
		p.SetState(1278)
		p.End()
	}

	return localctx
}

// ILoopEachStatementContext is an interface to support dynamic dispatch.
type ILoopEachStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopEachStatementContext differentiates from other interfaces.
	IsLoopEachStatementContext()
}

type LoopEachStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopEachStatementContext() *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopEachStatement
	return p
}

func (*LoopEachStatementContext) IsLoopEachStatementContext() {}

func NewLoopEachStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopEachStatement

	return p
}

func (s *LoopEachStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopEachStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopEachStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopEachStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *LoopEachStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopEachStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopEachStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopEachStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopEachStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *LoopEachStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *LoopEachStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *LoopEachStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopEachStatementContext) LoopElseStatement() ILoopElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseStatementContext)
}

func (s *LoopEachStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopEachStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopEachStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopEachStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopEachStatement() (localctx ILoopEachStatementContext) {
	localctx = NewLoopEachStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, FeelParserRULE_loopEachStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1280)
		p.Match(FeelParserAt)
	}
	p.SetState(1285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserLeft_Brack {
		{
			p.SetState(1281)
			p.Left_brack()
		}
		{
			p.SetState(1282)
			p.Id()
		}
		{
			p.SetState(1283)
			p.Right_brack()
		}

	}
	{
		p.SetState(1287)
		p.Id()
	}
	p.SetState(1289)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1288)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(1291)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1292)
		p.expression(0)
	}
	{
		p.SetState(1293)
		p.Left_brace()
	}
	p.SetState(1297)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1294)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1299)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())
	}
	{
		p.SetState(1300)
		p.Right_brace()
	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserDiscard {
		{
			p.SetState(1301)
			p.LoopElseStatement()
		}

	}
	{
		p.SetState(1304)
		p.End()
	}

	return localctx
}

// ILoopCaseStatementContext is an interface to support dynamic dispatch.
type ILoopCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopCaseStatementContext differentiates from other interfaces.
	IsLoopCaseStatementContext()
}

type LoopCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopCaseStatementContext() *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopCaseStatement
	return p
}

func (*LoopCaseStatementContext) IsLoopCaseStatementContext() {}

func NewLoopCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopCaseStatement

	return p
}

func (s *LoopCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopCaseStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopCaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopCaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopCaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopCaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopCaseStatementContext) LoopElseStatement() ILoopElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseStatementContext)
}

func (s *LoopCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopCaseStatement() (localctx ILoopCaseStatementContext) {
	localctx = NewLoopCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, FeelParserRULE_loopCaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1306)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1307)
		p.expression(0)
	}
	{
		p.SetState(1308)
		p.Left_brace()
	}
	p.SetState(1312)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1309)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1314)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())
	}
	{
		p.SetState(1315)
		p.Right_brace()
	}
	p.SetState(1317)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserDiscard {
		{
			p.SetState(1316)
			p.LoopElseStatement()
		}

	}
	{
		p.SetState(1319)
		p.End()
	}

	return localctx
}

// ILoopElseStatementContext is an interface to support dynamic dispatch.
type ILoopElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopElseStatementContext differentiates from other interfaces.
	IsLoopElseStatementContext()
}

type LoopElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopElseStatementContext() *LoopElseStatementContext {
	var p = new(LoopElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopElseStatement
	return p
}

func (*LoopElseStatementContext) IsLoopElseStatementContext() {}

func NewLoopElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopElseStatementContext {
	var p = new(LoopElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopElseStatement

	return p
}

func (s *LoopElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *LoopElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopElseStatement() (localctx ILoopElseStatementContext) {
	localctx = NewLoopElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, FeelParserRULE_loopElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1321)
		p.Match(FeelParserDiscard)
	}
	{
		p.SetState(1322)
		p.Left_brace()
	}
	p.SetState(1326)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1323)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1328)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext())
	}
	{
		p.SetState(1329)
		p.Right_brace()
	}

	return localctx
}

// ILoopJumpStatementContext is an interface to support dynamic dispatch.
type ILoopJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopJumpStatementContext differentiates from other interfaces.
	IsLoopJumpStatementContext()
}

type LoopJumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopJumpStatementContext() *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopJumpStatement
	return p
}

func (*LoopJumpStatementContext) IsLoopJumpStatementContext() {}

func NewLoopJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopJumpStatement

	return p
}

func (s *LoopJumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopJumpStatementContext) Tilde() antlr.TerminalNode {
	return s.GetToken(FeelParserTilde, 0)
}

func (s *LoopJumpStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopJumpStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopJumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopJumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopJumpStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopJumpStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopJumpStatement() (localctx ILoopJumpStatementContext) {
	localctx = NewLoopJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, FeelParserRULE_loopJumpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1331)
		p.Match(FeelParserTilde)
	}
	{
		p.SetState(1332)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1333)
		p.End()
	}

	return localctx
}

// ILoopContinueStatementContext is an interface to support dynamic dispatch.
type ILoopContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopContinueStatementContext differentiates from other interfaces.
	IsLoopContinueStatementContext()
}

type LoopContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopContinueStatementContext() *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopContinueStatement
	return p
}

func (*LoopContinueStatementContext) IsLoopContinueStatementContext() {}

func NewLoopContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopContinueStatement

	return p
}

func (s *LoopContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopContinueStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *LoopContinueStatementContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopContinueStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopContinueStatement() (localctx ILoopContinueStatementContext) {
	localctx = NewLoopContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, FeelParserRULE_loopContinueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1335)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(1336)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1337)
		p.End()
	}

	return localctx
}

// ICheckStatementContext is an interface to support dynamic dispatch.
type ICheckStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckStatementContext differentiates from other interfaces.
	IsCheckStatementContext()
}

type CheckStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckStatementContext() *CheckStatementContext {
	var p = new(CheckStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_checkStatement
	return p
}

func (*CheckStatementContext) IsCheckStatementContext() {}

func NewCheckStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckStatementContext {
	var p = new(CheckStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_checkStatement

	return p
}

func (s *CheckStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *CheckStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckStatementContext) CheckFinallyStatment() ICheckFinallyStatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckFinallyStatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckFinallyStatmentContext)
}

func (s *CheckStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *CheckStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckStatementContext) AllCheckErrorStatement() []ICheckErrorStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem())
	var tst = make([]ICheckErrorStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckErrorStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) CheckErrorStatement(i int) ICheckErrorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckErrorStatementContext)
}

func (s *CheckStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCheckStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CheckStatement() (localctx ICheckStatementContext) {
	localctx = NewCheckStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, FeelParserRULE_checkStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1373)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1339)
			p.Match(FeelParserBang)
		}
		{
			p.SetState(1340)
			p.Left_brace()
		}
		p.SetState(1344)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1341)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1346)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 151, p.GetParserRuleContext())
		}
		{
			p.SetState(1347)
			p.Right_brace()
		}
		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
			{
				p.SetState(1348)
				p.CheckErrorStatement()
			}

			p.SetState(1353)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1354)
			p.CheckFinallyStatment()
		}
		{
			p.SetState(1355)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1357)
			p.Match(FeelParserBang)
		}
		{
			p.SetState(1358)
			p.Left_brace()
		}
		p.SetState(1362)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1359)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1364)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
		}
		{
			p.SetState(1365)
			p.Right_brace()
		}
		p.SetState(1367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0) {
			{
				p.SetState(1366)
				p.CheckErrorStatement()
			}

			p.SetState(1369)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1371)
			p.End()
		}

	}

	return localctx
}

// IUsingStatementContext is an interface to support dynamic dispatch.
type IUsingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingStatementContext differentiates from other interfaces.
	IsUsingStatementContext()
}

type UsingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingStatementContext() *UsingStatementContext {
	var p = new(UsingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_usingStatement
	return p
}

func (*UsingStatementContext) IsUsingStatementContext() {}

func NewUsingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingStatementContext {
	var p = new(UsingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_usingStatement

	return p
}

func (s *UsingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingStatementContext) AllBang() []antlr.TerminalNode {
	return s.GetTokens(FeelParserBang)
}

func (s *UsingStatementContext) Bang(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserBang, i)
}

func (s *UsingStatementContext) AllConstId() []IConstIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstIdContext)(nil)).Elem())
	var tst = make([]IConstIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstIdContext)
		}
	}

	return tst
}

func (s *UsingStatementContext) ConstId(i int) IConstIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstIdContext)
}

func (s *UsingStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *UsingStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *UsingStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *UsingStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *UsingStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *UsingStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *UsingStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *UsingStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *UsingStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *UsingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitUsingStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) UsingStatement() (localctx IUsingStatementContext) {
	localctx = NewUsingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, FeelParserRULE_usingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1375)
		p.Match(FeelParserBang)
	}
	{
		p.SetState(1376)
		p.ConstId()
	}
	p.SetState(1382)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1377)
			p.More()
		}
		{
			p.SetState(1378)
			p.ConstId()
		}

		p.SetState(1384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1386)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1385)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(1388)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1389)
		p.TupleExpression()
	}
	{
		p.SetState(1390)
		p.Left_brace()
	}
	p.SetState(1394)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1391)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1396)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext())
	}
	{
		p.SetState(1397)
		p.Right_brace()
	}
	{
		p.SetState(1398)
		p.End()
	}

	return localctx
}

// ICheckErrorStatementContext is an interface to support dynamic dispatch.
type ICheckErrorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckErrorStatementContext differentiates from other interfaces.
	IsCheckErrorStatementContext()
}

type CheckErrorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckErrorStatementContext() *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_checkErrorStatement
	return p
}

func (*CheckErrorStatementContext) IsCheckErrorStatementContext() {}

func NewCheckErrorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_checkErrorStatement

	return p
}

func (s *CheckErrorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckErrorStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckErrorStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckErrorStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CheckErrorStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CheckErrorStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckErrorStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckErrorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckErrorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckErrorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCheckErrorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CheckErrorStatement() (localctx ICheckErrorStatementContext) {
	localctx = NewCheckErrorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, FeelParserRULE_checkErrorStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1404)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1400)
			p.Id()
		}

	case 2:
		{
			p.SetState(1401)
			p.Id()
		}
		{
			p.SetState(1402)
			p.TypeType()
		}

	}
	{
		p.SetState(1406)
		p.Left_brace()
	}
	p.SetState(1410)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1407)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1412)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())
	}
	{
		p.SetState(1413)
		p.Right_brace()
	}

	return localctx
}

// ICheckFinallyStatmentContext is an interface to support dynamic dispatch.
type ICheckFinallyStatmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckFinallyStatmentContext differentiates from other interfaces.
	IsCheckFinallyStatmentContext()
}

type CheckFinallyStatmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckFinallyStatmentContext() *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_checkFinallyStatment
	return p
}

func (*CheckFinallyStatmentContext) IsCheckFinallyStatmentContext() {}

func NewCheckFinallyStatmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_checkFinallyStatment

	return p
}

func (s *CheckFinallyStatmentContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckFinallyStatmentContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *CheckFinallyStatmentContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckFinallyStatmentContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckFinallyStatmentContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckFinallyStatmentContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckFinallyStatmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckFinallyStatmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckFinallyStatmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCheckFinallyStatment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CheckFinallyStatment() (localctx ICheckFinallyStatmentContext) {
	localctx = NewCheckFinallyStatmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, FeelParserRULE_checkFinallyStatment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1415)
		p.Match(FeelParserDiscard)
	}
	{
		p.SetState(1416)
		p.Left_brace()
	}
	p.SetState(1420)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1417)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1422)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 161, p.GetParserRuleContext())
	}
	{
		p.SetState(1423)
		p.Right_brace()
	}

	return localctx
}

// ICheckReportStatementContext is an interface to support dynamic dispatch.
type ICheckReportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckReportStatementContext differentiates from other interfaces.
	IsCheckReportStatementContext()
}

type CheckReportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckReportStatementContext() *CheckReportStatementContext {
	var p = new(CheckReportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_checkReportStatement
	return p
}

func (*CheckReportStatementContext) IsCheckReportStatementContext() {}

func NewCheckReportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckReportStatementContext {
	var p = new(CheckReportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_checkReportStatement

	return p
}

func (s *CheckReportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckReportStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *CheckReportStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Arrow, 0)
}

func (s *CheckReportStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckReportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *CheckReportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckReportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckReportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCheckReportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CheckReportStatement() (localctx ICheckReportStatementContext) {
	localctx = NewCheckReportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, FeelParserRULE_checkReportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1425)
		p.Match(FeelParserBang)
	}
	{
		p.SetState(1426)
		p.Match(FeelParserLeft_Arrow)
	}
	{
		p.SetState(1427)
		p.expression(0)
	}
	{
		p.SetState(1428)
		p.End()
	}

	return localctx
}

// IIteratorStatementContext is an interface to support dynamic dispatch.
type IIteratorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIteratorStatementContext differentiates from other interfaces.
	IsIteratorStatementContext()
}

type IteratorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIteratorStatementContext() *IteratorStatementContext {
	var p = new(IteratorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_iteratorStatement
	return p
}

func (*IteratorStatementContext) IsIteratorStatementContext() {}

func NewIteratorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorStatementContext {
	var p = new(IteratorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_iteratorStatement

	return p
}

func (s *IteratorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IteratorStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IteratorStatementContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot, 0)
}

func (s *IteratorStatementContext) Dot_Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Dot, 0)
}

func (s *IteratorStatementContext) Dot_Dot_Less() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Less, 0)
}

func (s *IteratorStatementContext) Dot_Dot_Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Greater, 0)
}

func (s *IteratorStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *IteratorStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *IteratorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitIteratorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) IteratorStatement() (localctx IIteratorStatementContext) {
	localctx = NewIteratorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, FeelParserRULE_iteratorStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1430)
		p.expression(0)
	}
	{
		p.SetState(1431)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<FeelParserDot_Dot_Dot)|(1<<FeelParserDot_Dot_Less)|(1<<FeelParserDot_Dot_Greater)|(1<<FeelParserDot_Dot))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1436)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1432)
			p.Left_paren()
		}
		{
			p.SetState(1433)
			p.expression(0)
		}
		{
			p.SetState(1434)
			p.Right_paren()
		}

	}
	{
		p.SetState(1438)
		p.expression(0)
	}

	return localctx
}

// IVariableDeclaredStatementContext is an interface to support dynamic dispatch.
type IVariableDeclaredStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaredStatementContext differentiates from other interfaces.
	IsVariableDeclaredStatementContext()
}

type VariableDeclaredStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaredStatementContext() *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_variableDeclaredStatement
	return p
}

func (*VariableDeclaredStatementContext) IsVariableDeclaredStatementContext() {}

func NewVariableDeclaredStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_variableDeclaredStatement

	return p
}

func (s *VariableDeclaredStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaredStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *VariableDeclaredStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *VariableDeclaredStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableDeclaredStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableDeclaredStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaredStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaredStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitVariableDeclaredStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) VariableDeclaredStatement() (localctx IVariableDeclaredStatementContext) {
	localctx = NewVariableDeclaredStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, FeelParserRULE_variableDeclaredStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1440)
		p.Id()
	}
	{
		p.SetState(1441)
		p.Match(FeelParserBang)
	}
	{
		p.SetState(1442)
		p.TypeType()
	}
	{
		p.SetState(1443)
		p.End()
	}

	return localctx
}

// IConstantDeclaredStatementContext is an interface to support dynamic dispatch.
type IConstantDeclaredStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantDeclaredStatementContext differentiates from other interfaces.
	IsConstantDeclaredStatementContext()
}

type ConstantDeclaredStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantDeclaredStatementContext() *ConstantDeclaredStatementContext {
	var p = new(ConstantDeclaredStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_constantDeclaredStatement
	return p
}

func (*ConstantDeclaredStatementContext) IsConstantDeclaredStatementContext() {}

func NewConstantDeclaredStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantDeclaredStatementContext {
	var p = new(ConstantDeclaredStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_constantDeclaredStatement

	return p
}

func (s *ConstantDeclaredStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantDeclaredStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ConstantDeclaredStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ConstantDeclaredStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ConstantDeclaredStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantDeclaredStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantDeclaredStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitConstantDeclaredStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ConstantDeclaredStatement() (localctx IConstantDeclaredStatementContext) {
	localctx = NewConstantDeclaredStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, FeelParserRULE_constantDeclaredStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1445)
		p.Id()
	}
	{
		p.SetState(1446)
		p.TypeType()
	}
	{
		p.SetState(1447)
		p.End()
	}

	return localctx
}

// IVarStatementContext is an interface to support dynamic dispatch.
type IVarStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarStatementContext differentiates from other interfaces.
	IsVarStatementContext()
}

type VarStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarStatementContext() *VarStatementContext {
	var p = new(VarStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_varStatement
	return p
}

func (*VarStatementContext) IsVarStatementContext() {}

func NewVarStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarStatementContext {
	var p = new(VarStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_varStatement

	return p
}

func (s *VarStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VarStatementContext) AllVarId() []IVarIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVarIdContext)(nil)).Elem())
	var tst = make([]IVarIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVarIdContext)
		}
	}

	return tst
}

func (s *VarStatementContext) VarId(i int) IVarIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVarIdContext)
}

func (s *VarStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *VarStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *VarStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VarStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *VarStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *VarStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitVarStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) VarStatement() (localctx IVarStatementContext) {
	localctx = NewVarStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, FeelParserRULE_varStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1449)
		p.VarId()
	}
	p.SetState(1455)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1450)
			p.More()
		}
		{
			p.SetState(1451)
			p.VarId()
		}

		p.SetState(1457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1458)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1459)
		p.TupleExpression()
	}
	{
		p.SetState(1460)
		p.End()
	}

	return localctx
}

// IBindStatementContext is an interface to support dynamic dispatch.
type IBindStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindStatementContext differentiates from other interfaces.
	IsBindStatementContext()
}

type BindStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindStatementContext() *BindStatementContext {
	var p = new(BindStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bindStatement
	return p
}

func (*BindStatementContext) IsBindStatementContext() {}

func NewBindStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindStatementContext {
	var p = new(BindStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bindStatement

	return p
}

func (s *BindStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BindStatementContext) AllConstId() []IConstIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstIdContext)(nil)).Elem())
	var tst = make([]IConstIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstIdContext)
		}
	}

	return tst
}

func (s *BindStatementContext) ConstId(i int) IConstIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstIdContext)
}

func (s *BindStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *BindStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *BindStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *BindStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *BindStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *BindStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBindStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BindStatement() (localctx IBindStatementContext) {
	localctx = NewBindStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, FeelParserRULE_bindStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1462)
		p.ConstId()
	}
	p.SetState(1468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1463)
			p.More()
		}
		{
			p.SetState(1464)
			p.ConstId()
		}

		p.SetState(1470)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1471)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1472)
		p.TupleExpression()
	}
	{
		p.SetState(1473)
		p.End()
	}

	return localctx
}

// IAssignStatementContext is an interface to support dynamic dispatch.
type IAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignStatementContext differentiates from other interfaces.
	IsAssignStatementContext()
}

type AssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignStatementContext() *AssignStatementContext {
	var p = new(AssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_assignStatement
	return p
}

func (*AssignStatementContext) IsAssignStatementContext() {}

func NewAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignStatementContext {
	var p = new(AssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_assignStatement

	return p
}

func (s *AssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignStatementContext) AllTupleExpression() []ITupleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem())
	var tst = make([]ITupleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleExpressionContext)
		}
	}

	return tst
}

func (s *AssignStatementContext) TupleExpression(i int) ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *AssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *AssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *AssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) AssignStatement() (localctx IAssignStatementContext) {
	localctx = NewAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, FeelParserRULE_assignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1475)
		p.TupleExpression()
	}
	{
		p.SetState(1476)
		p.Assign()
	}
	{
		p.SetState(1477)
		p.TupleExpression()
	}
	{
		p.SetState(1478)
		p.End()
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, FeelParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1480)
		p.expression(0)
	}
	{
		p.SetState(1481)
		p.End()
	}

	return localctx
}

// IAnnotationStatementContext is an interface to support dynamic dispatch.
type IAnnotationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationStatementContext differentiates from other interfaces.
	IsAnnotationStatementContext()
}

type AnnotationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationStatementContext() *AnnotationStatementContext {
	var p = new(AnnotationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_annotationStatement
	return p
}

func (*AnnotationStatementContext) IsAnnotationStatementContext() {}

func NewAnnotationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationStatementContext {
	var p = new(AnnotationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_annotationStatement

	return p
}

func (s *AnnotationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationStatementContext) AnnotationString() IAnnotationStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationStringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationStringContext)
}

func (s *AnnotationStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *AnnotationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAnnotationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) AnnotationStatement() (localctx IAnnotationStatementContext) {
	localctx = NewAnnotationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, FeelParserRULE_annotationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1483)
		p.AnnotationString()
	}
	{
		p.SetState(1484)
		p.End()
	}

	return localctx
}

// IVarIdContext is an interface to support dynamic dispatch.
type IVarIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarIdContext differentiates from other interfaces.
	IsVarIdContext()
}

type VarIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarIdContext() *VarIdContext {
	var p = new(VarIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_varId
	return p
}

func (*VarIdContext) IsVarIdContext() {}

func NewVarIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarIdContext {
	var p = new(VarIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_varId

	return p
}

func (s *VarIdContext) GetParser() antlr.Parser { return s.parser }

func (s *VarIdContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *VarIdContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *VarIdContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VarIdContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *VarIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitVarId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) VarId() (localctx IVarIdContext) {
	localctx = NewVarIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, FeelParserRULE_varId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1492)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1486)
			p.Id()
		}
		{
			p.SetState(1487)
			p.Match(FeelParserBang)
		}
		p.SetState(1489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(FeelParserLeft_Paren-37))|(1<<(FeelParserLeft_Brack-37))|(1<<(FeelParserQuestion-37))|(1<<(FeelParserTypeI8-37))|(1<<(FeelParserTypeU8-37))|(1<<(FeelParserTypeI16-37))|(1<<(FeelParserTypeU16-37))|(1<<(FeelParserTypeI32-37))|(1<<(FeelParserTypeU32-37))|(1<<(FeelParserTypeI64-37))|(1<<(FeelParserTypeU64-37))|(1<<(FeelParserTypeF32-37))|(1<<(FeelParserTypeF64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(FeelParserTypeChr-69))|(1<<(FeelParserTypeStr-69))|(1<<(FeelParserTypeBool-69))|(1<<(FeelParserTypeInt-69))|(1<<(FeelParserTypeNum-69))|(1<<(FeelParserTypeByte-69))|(1<<(FeelParserTypeAny-69))|(1<<(FeelParserIDPrivate-69))|(1<<(FeelParserIDPublic-69)))) != 0) {
			{
				p.SetState(1488)
				p.TypeType()
			}

		}

	case FeelParserDiscard:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1491)
			p.Match(FeelParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstIdContext is an interface to support dynamic dispatch.
type IConstIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstIdContext differentiates from other interfaces.
	IsConstIdContext()
}

type ConstIdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstIdContext() *ConstIdContext {
	var p = new(ConstIdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_constId
	return p
}

func (*ConstIdContext) IsConstIdContext() {}

func NewConstIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstIdContext {
	var p = new(ConstIdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_constId

	return p
}

func (s *ConstIdContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstIdContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ConstIdContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ConstIdContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *ConstIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitConstId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ConstId() (localctx IConstIdContext) {
	localctx = NewConstIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, FeelParserRULE_constId)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1499)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1494)
			p.Id()
		}
		p.SetState(1496)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(FeelParserLeft_Paren-37))|(1<<(FeelParserLeft_Brack-37))|(1<<(FeelParserQuestion-37))|(1<<(FeelParserTypeI8-37))|(1<<(FeelParserTypeU8-37))|(1<<(FeelParserTypeI16-37))|(1<<(FeelParserTypeU16-37))|(1<<(FeelParserTypeI32-37))|(1<<(FeelParserTypeU32-37))|(1<<(FeelParserTypeI64-37))|(1<<(FeelParserTypeU64-37))|(1<<(FeelParserTypeF32-37))|(1<<(FeelParserTypeF64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(FeelParserTypeChr-69))|(1<<(FeelParserTypeStr-69))|(1<<(FeelParserTypeBool-69))|(1<<(FeelParserTypeInt-69))|(1<<(FeelParserTypeNum-69))|(1<<(FeelParserTypeByte-69))|(1<<(FeelParserTypeAny-69))|(1<<(FeelParserIDPrivate-69))|(1<<(FeelParserIDPublic-69)))) != 0) {
			{
				p.SetState(1495)
				p.TypeType()
			}

		}

	case FeelParserDiscard:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1498)
			p.Match(FeelParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, FeelParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1501)
		p.expression(0)
	}
	p.SetState(1507)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1502)
			p.More()
		}
		{
			p.SetState(1503)
			p.expression(0)
		}

		p.SetState(1509)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) GetT() antlr.Token { return s.t }

func (s *PrimaryExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *PrimaryExpressionContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PrimaryExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PrimaryExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *PrimaryExpressionContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PrimaryExpressionContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *PrimaryExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PrimaryExpressionContext) DataStatement() IDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataStatementContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, FeelParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1522)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserLeft_Brack:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1510)
			p.Left_brack()
		}
		{
			p.SetState(1511)
			p.Id()
		}
		{
			p.SetState(1512)
			p.TemplateCall()
		}
		{
			p.SetState(1513)
			p.Right_brack()
		}

	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1515)
			p.Id()
		}

	case FeelParserDiscard:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1516)

			var _m = p.Match(FeelParserDiscard)

			localctx.(*PrimaryExpressionContext).t = _m
		}

	case FeelParserLeft_Paren:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1517)
			p.Left_paren()
		}
		{
			p.SetState(1518)
			p.expression(0)
		}
		{
			p.SetState(1519)
			p.Right_paren()
		}

	case FeelParserNilLiteral, FeelParserTrueLiteral, FeelParserFalseLiteral, FeelParserUndefinedLiteral, FeelParserFloatLiteral, FeelParserDecimalLiteral, FeelParserBinaryLiteral, FeelParserOctalLiteral, FeelParserHexLiteral, FeelParserQuote_Quote_Quote_Open, FeelParserQuote_Open, FeelParserCharLiteral:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1521)
			p.DataStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpressionContext) Linq() ILinqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) CallPkg() ICallPkgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallPkgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallPkgContext)
}

func (s *ExpressionContext) CallChannel() ICallChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallChannelContext)
}

func (s *ExpressionContext) CallAsync() ICallAsyncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallAsyncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallAsyncContext)
}

func (s *ExpressionContext) List() IListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListContext)
}

func (s *ExpressionContext) Dictionary() IDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryContext)
}

func (s *ExpressionContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *ExpressionContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *ExpressionContext) PkgAnonymous() IPkgAnonymousContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousContext)
}

func (s *ExpressionContext) PlusMinus() IPlusMinusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlusMinusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlusMinusContext)
}

func (s *ExpressionContext) BitwiseNotExpression() IBitwiseNotExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseNotExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseNotExpressionContext)
}

func (s *ExpressionContext) Negate() INegateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INegateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INegateContext)
}

func (s *ExpressionContext) JudgeExpression() IJudgeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionContext)
}

func (s *ExpressionContext) JudgeCaseExpression() IJudgeCaseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCaseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCaseExpressionContext)
}

func (s *ExpressionContext) LoopExpression() ILoopExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopExpressionContext)
}

func (s *ExpressionContext) LoopEachExpression() ILoopEachExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopEachExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopEachExpressionContext)
}

func (s *ExpressionContext) CheckExpression() ICheckExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckExpressionContext)
}

func (s *ExpressionContext) CallNew() ICallNewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallNewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallNewContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Transfer() ITransferContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransferContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransferContext)
}

func (s *ExpressionContext) Pow() IPowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPowContext)
}

func (s *ExpressionContext) Mul() IMulContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMulContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMulContext)
}

func (s *ExpressionContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *ExpressionContext) Bitwise() IBitwiseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseContext)
}

func (s *ExpressionContext) CompareCombine() ICompareCombineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompareCombineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompareCombineContext)
}

func (s *ExpressionContext) Compare() ICompareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompareContext)
}

func (s *ExpressionContext) Logic() ILogicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicContext)
}

func (s *ExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *ExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *ExpressionContext) OrElse() IOrElseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrElseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrElseContext)
}

func (s *ExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *ExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *ExpressionContext) CallAwait() ICallAwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallAwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallAwaitContext)
}

func (s *ExpressionContext) CallExpression() ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *ExpressionContext) TypeConversion() ITypeConversionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConversionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConversionContext)
}

func (s *ExpressionContext) TypeCheck() ITypeCheckContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeCheckContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeCheckContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *FeelParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 154
	p.EnterRecursionRule(localctx, 154, FeelParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1544)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1525)
			p.Linq()
		}

	case 2:
		{
			p.SetState(1526)
			p.PrimaryExpression()
		}

	case 3:
		{
			p.SetState(1527)
			p.CallPkg()
		}

	case 4:
		{
			p.SetState(1528)
			p.CallChannel()
		}

	case 5:
		{
			p.SetState(1529)
			p.CallAsync()
		}

	case 6:
		{
			p.SetState(1530)
			p.List()
		}

	case 7:
		{
			p.SetState(1531)
			p.Dictionary()
		}

	case 8:
		{
			p.SetState(1532)
			p.Lambda()
		}

	case 9:
		{
			p.SetState(1533)
			p.FunctionExpression()
		}

	case 10:
		{
			p.SetState(1534)
			p.PkgAnonymous()
		}

	case 11:
		{
			p.SetState(1535)
			p.PlusMinus()
		}

	case 12:
		{
			p.SetState(1536)
			p.BitwiseNotExpression()
		}

	case 13:
		{
			p.SetState(1537)
			p.Negate()
		}

	case 14:
		{
			p.SetState(1538)
			p.JudgeExpression()
		}

	case 15:
		{
			p.SetState(1539)
			p.JudgeCaseExpression()
		}

	case 16:
		{
			p.SetState(1540)
			p.LoopExpression()
		}

	case 17:
		{
			p.SetState(1541)
			p.LoopEachExpression()
		}

	case 18:
		{
			p.SetState(1542)
			p.CheckExpression()
		}

	case 19:
		{
			p.SetState(1543)
			p.CallNew()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1600)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1598)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1546)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1547)
					p.Transfer()
				}
				{
					p.SetState(1548)
					p.expression(11)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1550)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1551)
					p.Pow()
				}
				{
					p.SetState(1552)
					p.expression(10)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1554)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1555)
					p.Mul()
				}
				{
					p.SetState(1556)
					p.expression(9)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1558)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1559)
					p.Add()
				}
				{
					p.SetState(1560)
					p.expression(8)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1562)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1563)
					p.Bitwise()
				}
				{
					p.SetState(1564)
					p.expression(7)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1566)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1567)
					p.CompareCombine()
				}
				{
					p.SetState(1568)
					p.expression(4)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1570)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1571)
					p.Compare()
				}
				{
					p.SetState(1572)
					p.expression(3)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1574)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1575)
					p.Logic()
				}
				{
					p.SetState(1576)
					p.expression(2)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1578)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(1579)

					var _m = p.Match(FeelParserBang)

					localctx.(*ExpressionContext).op = _m
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1580)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(1581)

					var _m = p.Match(FeelParserQuestion)

					localctx.(*ExpressionContext).op = _m
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1582)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(1583)
					p.OrElse()
				}

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1584)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1585)
					p.CallFunc()
				}

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1586)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1587)
					p.CallChannel()
				}

			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1588)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1589)
					p.CallElement()
				}

			case 15:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1590)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1591)
					p.CallAwait()
				}

			case 16:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1592)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1593)
					p.CallExpression()
				}

			case 17:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1594)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1595)
					p.TypeConversion()
				}

			case 18:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, FeelParserRULE_expression)
				p.SetState(1596)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1597)
					p.TypeCheck()
				}

			}

		}
		p.SetState(1602)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpressionContext is an interface to support dynamic dispatch.
type ICallExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpressionContext differentiates from other interfaces.
	IsCallExpressionContext()
}

type CallExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpressionContext() *CallExpressionContext {
	var p = new(CallExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callExpression
	return p
}

func (*CallExpressionContext) IsCallExpressionContext() {}

func NewCallExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpressionContext {
	var p = new(CallExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callExpression

	return p
}

func (s *CallExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpressionContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *CallExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallExpressionContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *CallExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *CallExpressionContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *CallExpressionContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *CallExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *CallExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *CallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallExpression() (localctx ICallExpressionContext) {
	localctx = NewCallExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, FeelParserRULE_callExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1603)
		p.Call()
	}
	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(1604)
			p.Match(FeelParserNew_Line)
		}

	}
	p.SetState(1613)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(1607)
			p.Id()
		}

	case FeelParserLeft_Brack:
		{
			p.SetState(1608)
			p.Left_brack()
		}
		{
			p.SetState(1609)
			p.Id()
		}
		{
			p.SetState(1610)
			p.TemplateCall()
		}
		{
			p.SetState(1611)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(1617)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1615)
			p.CallFunc()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1616)
			p.CallElement()
		}

	}

	return localctx
}

// ITupleContext is an interface to support dynamic dispatch.
type ITupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleContext differentiates from other interfaces.
	IsTupleContext()
}

type TupleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleContext() *TupleContext {
	var p = new(TupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_tuple
	return p
}

func (*TupleContext) IsTupleContext() {}

func NewTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleContext {
	var p = new(TupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_tuple

	return p
}

func (s *TupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TupleContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TupleContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Tuple() (localctx ITupleContext) {
	localctx = NewTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, FeelParserRULE_tuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1619)
		p.Left_paren()
	}
	p.SetState(1629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
		{
			p.SetState(1620)
			p.expression(0)
		}
		p.SetState(1626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == FeelParserComma {
			{
				p.SetState(1621)
				p.More()
			}
			{
				p.SetState(1622)
				p.expression(0)
			}

			p.SetState(1628)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1631)
		p.Right_paren()
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, FeelParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1633)
		p.expression(0)
	}
	p.SetState(1639)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1634)
			p.More()
		}
		{
			p.SetState(1635)
			p.expression(0)
		}

		p.SetState(1641)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationSupportContext is an interface to support dynamic dispatch.
type IAnnotationSupportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationSupportContext differentiates from other interfaces.
	IsAnnotationSupportContext()
}

type AnnotationSupportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationSupportContext() *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_annotationSupport
	return p
}

func (*AnnotationSupportContext) IsAnnotationSupportContext() {}

func NewAnnotationSupportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_annotationSupport

	return p
}

func (s *AnnotationSupportContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationSupportContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotationSupportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationSupportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationSupportContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAnnotationSupport(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) AnnotationSupport() (localctx IAnnotationSupportContext) {
	localctx = NewAnnotationSupportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, FeelParserRULE_annotationSupport)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1642)
		p.Annotation()
	}

	return localctx
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) AnnotationList() IAnnotationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationListContext)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, FeelParserRULE_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1644)
		p.AnnotationList()
	}

	return localctx
}

// IAnnotationListContext is an interface to support dynamic dispatch.
type IAnnotationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationListContext differentiates from other interfaces.
	IsAnnotationListContext()
}

type AnnotationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationListContext() *AnnotationListContext {
	var p = new(AnnotationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_annotationList
	return p
}

func (*AnnotationListContext) IsAnnotationListContext() {}

func NewAnnotationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationListContext {
	var p = new(AnnotationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_annotationList

	return p
}

func (s *AnnotationListContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationListContext) AllAnnotationItem() []IAnnotationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem())
	var tst = make([]IAnnotationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationItemContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) AnnotationItem(i int) IAnnotationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationItemContext)
}

func (s *AnnotationListContext) AllAnnotationString() []IAnnotationStringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationStringContext)(nil)).Elem())
	var tst = make([]IAnnotationStringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationStringContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) AnnotationString(i int) IAnnotationStringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationStringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationStringContext)
}

func (s *AnnotationListContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *AnnotationListContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *AnnotationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAnnotationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) AnnotationList() (localctx IAnnotationListContext) {
	localctx = NewAnnotationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, FeelParserRULE_annotationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == FeelParserSharp {
		p.SetState(1648)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1646)
				p.AnnotationItem()
			}

		case 2:
			{
				p.SetState(1647)
				p.AnnotationString()
			}

		}
		p.SetState(1651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserNew_Line {
			{
				p.SetState(1650)
				p.Match(FeelParserNew_Line)
			}

		}

		p.SetState(1655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationItemContext is an interface to support dynamic dispatch.
type IAnnotationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationItemContext differentiates from other interfaces.
	IsAnnotationItemContext()
}

type AnnotationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationItemContext() *AnnotationItemContext {
	var p = new(AnnotationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_annotationItem
	return p
}

func (*AnnotationItemContext) IsAnnotationItemContext() {}

func NewAnnotationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationItemContext {
	var p = new(AnnotationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_annotationItem

	return p
}

func (s *AnnotationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationItemContext) Sharp() antlr.TerminalNode {
	return s.GetToken(FeelParserSharp, 0)
}

func (s *AnnotationItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *AnnotationItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationItemContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *AnnotationItemContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *AnnotationItemContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *AnnotationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAnnotationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) AnnotationItem() (localctx IAnnotationItemContext) {
	localctx = NewAnnotationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, FeelParserRULE_annotationItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1657)
		p.Match(FeelParserSharp)
	}
	p.SetState(1661)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1658)
			p.Id()
		}
		{
			p.SetState(1659)
			p.Match(FeelParserRight_Arrow)
		}

	}
	{
		p.SetState(1663)
		p.Id()
	}
	p.SetState(1666)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1664)
			p.Tuple()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1665)
			p.Lambda()
		}

	}

	return localctx
}

// IAnnotationStringContext is an interface to support dynamic dispatch.
type IAnnotationStringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationStringContext differentiates from other interfaces.
	IsAnnotationStringContext()
}

type AnnotationStringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationStringContext() *AnnotationStringContext {
	var p = new(AnnotationStringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_annotationString
	return p
}

func (*AnnotationStringContext) IsAnnotationStringContext() {}

func NewAnnotationStringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationStringContext {
	var p = new(AnnotationStringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_annotationString

	return p
}

func (s *AnnotationStringContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationStringContext) Sharp() antlr.TerminalNode {
	return s.GetToken(FeelParserSharp, 0)
}

func (s *AnnotationStringContext) StringExpr() IStringExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringExprContext)
}

func (s *AnnotationStringContext) RawStringExpr() IRawStringExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRawStringExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRawStringExprContext)
}

func (s *AnnotationStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationStringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAnnotationString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) AnnotationString() (localctx IAnnotationStringContext) {
	localctx = NewAnnotationStringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, FeelParserRULE_annotationString)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1668)
		p.Match(FeelParserSharp)
	}
	p.SetState(1671)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserQuote_Open:
		{
			p.SetState(1669)
			p.StringExpr()
		}

	case FeelParserQuote_Quote_Quote_Open:
		{
			p.SetState(1670)
			p.RawStringExpr()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallFuncContext is an interface to support dynamic dispatch.
type ICallFuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallFuncContext differentiates from other interfaces.
	IsCallFuncContext()
}

type CallFuncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallFuncContext() *CallFuncContext {
	var p = new(CallFuncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callFunc
	return p
}

func (*CallFuncContext) IsCallFuncContext() {}

func NewCallFuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallFuncContext {
	var p = new(CallFuncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callFunc

	return p
}

func (s *CallFuncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallFuncContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *CallFuncContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *CallFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallFuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallFunc() (localctx ICallFuncContext) {
	localctx = NewCallFuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, FeelParserRULE_callFunc)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1675)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserLeft_Paren:
		{
			p.SetState(1673)
			p.Tuple()
		}

	case FeelParserLeft_Brace:
		{
			p.SetState(1674)
			p.Lambda()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallAsyncContext is an interface to support dynamic dispatch.
type ICallAsyncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallAsyncContext differentiates from other interfaces.
	IsCallAsyncContext()
}

type CallAsyncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallAsyncContext() *CallAsyncContext {
	var p = new(CallAsyncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callAsync
	return p
}

func (*CallAsyncContext) IsCallAsyncContext() {}

func NewCallAsyncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallAsyncContext {
	var p = new(CallAsyncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callAsync

	return p
}

func (s *CallAsyncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallAsyncContext) Right_Wave() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Wave, 0)
}

func (s *CallAsyncContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallAsyncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallAsyncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallAsyncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallAsync(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallAsync() (localctx ICallAsyncContext) {
	localctx = NewCallAsyncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, FeelParserRULE_callAsync)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1677)
		p.Match(FeelParserRight_Wave)
	}
	{
		p.SetState(1678)
		p.expression(0)
	}

	return localctx
}

// ICallAwaitContext is an interface to support dynamic dispatch.
type ICallAwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallAwaitContext differentiates from other interfaces.
	IsCallAwaitContext()
}

type CallAwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallAwaitContext() *CallAwaitContext {
	var p = new(CallAwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callAwait
	return p
}

func (*CallAwaitContext) IsCallAwaitContext() {}

func NewCallAwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallAwaitContext {
	var p = new(CallAwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callAwait

	return p
}

func (s *CallAwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CallAwaitContext) Right_Wave() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Wave, 0)
}

func (s *CallAwaitContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *CallAwaitContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *CallAwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallAwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallAwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallAwait(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallAwait() (localctx ICallAwaitContext) {
	localctx = NewCallAwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, FeelParserRULE_callAwait)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1680)
		p.Match(FeelParserRight_Wave)
	}
	p.SetState(1683)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserLeft_Paren:
		{
			p.SetState(1681)
			p.Tuple()
		}

	case FeelParserLeft_Brace:
		{
			p.SetState(1682)
			p.Lambda()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallChannelContext is an interface to support dynamic dispatch.
type ICallChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallChannelContext differentiates from other interfaces.
	IsCallChannelContext()
}

type CallChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallChannelContext() *CallChannelContext {
	var p = new(CallChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callChannel
	return p
}

func (*CallChannelContext) IsCallChannelContext() {}

func NewCallChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallChannelContext {
	var p = new(CallChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callChannel

	return p
}

func (s *CallChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *CallChannelContext) Left_Wave() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Wave, 0)
}

func (s *CallChannelContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallChannel() (localctx ICallChannelContext) {
	localctx = NewCallChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, FeelParserRULE_callChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1685)
		p.Match(FeelParserLeft_Wave)
	}
	{
		p.SetState(1686)
		p.expression(0)
	}

	return localctx
}

// ITransferContext is an interface to support dynamic dispatch.
type ITransferContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransferContext differentiates from other interfaces.
	IsTransferContext()
}

type TransferContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransferContext() *TransferContext {
	var p = new(TransferContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_transfer
	return p
}

func (*TransferContext) IsTransferContext() {}

func NewTransferContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TransferContext {
	var p = new(TransferContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_transfer

	return p
}

func (s *TransferContext) GetParser() antlr.Parser { return s.parser }

func (s *TransferContext) Left_Wave() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Wave, 0)
}

func (s *TransferContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TransferContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TransferContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTransfer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Transfer() (localctx ITransferContext) {
	localctx = NewTransferContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, FeelParserRULE_transfer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1688)
		p.Match(FeelParserLeft_Wave)
	}

	return localctx
}

// ICallElementContext is an interface to support dynamic dispatch.
type ICallElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallElementContext differentiates from other interfaces.
	IsCallElementContext()
}

type CallElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallElementContext() *CallElementContext {
	var p = new(CallElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callElement
	return p
}

func (*CallElementContext) IsCallElementContext() {}

func NewCallElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallElementContext {
	var p = new(CallElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callElement

	return p
}

func (s *CallElementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallElementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *CallElementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *CallElementContext) Slice() ISliceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceContext)
}

func (s *CallElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallElement() (localctx ICallElementContext) {
	localctx = NewCallElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, FeelParserRULE_callElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1690)
		p.Left_brack()
	}
	p.SetState(1693)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 188, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1691)
			p.Slice()
		}

	case 2:
		{
			p.SetState(1692)
			p.expression(0)
		}

	}
	{
		p.SetState(1695)
		p.Right_brack()
	}

	return localctx
}

// ICallPkgContext is an interface to support dynamic dispatch.
type ICallPkgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallPkgContext differentiates from other interfaces.
	IsCallPkgContext()
}

type CallPkgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallPkgContext() *CallPkgContext {
	var p = new(CallPkgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callPkg
	return p
}

func (*CallPkgContext) IsCallPkgContext() {}

func NewCallPkgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallPkgContext {
	var p = new(CallPkgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callPkg

	return p
}

func (s *CallPkgContext) GetParser() antlr.Parser { return s.parser }

func (s *CallPkgContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallPkgContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CallPkgContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CallPkgContext) PkgAssign() IPkgAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignContext)
}

func (s *CallPkgContext) ListAssign() IListAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListAssignContext)
}

func (s *CallPkgContext) DictionaryAssign() IDictionaryAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryAssignContext)
}

func (s *CallPkgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallPkgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallPkgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallPkg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallPkg() (localctx ICallPkgContext) {
	localctx = NewCallPkgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, FeelParserRULE_callPkg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1697)
		p.TypeType()
	}
	{
		p.SetState(1698)
		p.Left_brace()
	}
	p.SetState(1702)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1699)
			p.PkgAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1700)
			p.ListAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1701)
			p.DictionaryAssign()
		}

	}
	{
		p.SetState(1704)
		p.Right_brace()
	}

	return localctx
}

// ICallNewContext is an interface to support dynamic dispatch.
type ICallNewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallNewContext differentiates from other interfaces.
	IsCallNewContext()
}

type CallNewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallNewContext() *CallNewContext {
	var p = new(CallNewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_callNew
	return p
}

func (*CallNewContext) IsCallNewContext() {}

func NewCallNewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallNewContext {
	var p = new(CallNewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_callNew

	return p
}

func (s *CallNewContext) GetParser() antlr.Parser { return s.parser }

func (s *CallNewContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallNewContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *CallNewContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *CallNewContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *CallNewContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *CallNewContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *CallNewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallNewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallNewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCallNew(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CallNew() (localctx ICallNewContext) {
	localctx = NewCallNewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, FeelParserRULE_callNew)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1706)
		p.TypeType()
	}
	{
		p.SetState(1707)
		p.Left_paren()
	}
	p.SetState(1709)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1708)
			p.Match(FeelParserNew_Line)
		}

	}
	p.SetState(1712)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
		{
			p.SetState(1711)
			p.ExpressionList()
		}

	}
	p.SetState(1715)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(1714)
			p.Match(FeelParserNew_Line)
		}

	}
	{
		p.SetState(1717)
		p.Right_paren()
	}

	return localctx
}

// IOrElseContext is an interface to support dynamic dispatch.
type IOrElseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrElseContext differentiates from other interfaces.
	IsOrElseContext()
}

type OrElseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrElseContext() *OrElseContext {
	var p = new(OrElseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_orElse
	return p
}

func (*OrElseContext) IsOrElseContext() {}

func NewOrElseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrElseContext {
	var p = new(OrElseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_orElse

	return p
}

func (s *OrElseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrElseContext) AllQuestion() []antlr.TerminalNode {
	return s.GetTokens(FeelParserQuestion)
}

func (s *OrElseContext) Question(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, i)
}

func (s *OrElseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrElseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrElseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrElseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitOrElse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) OrElse() (localctx IOrElseContext) {
	localctx = NewOrElseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, FeelParserRULE_orElse)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1719)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(1720)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(1721)
		p.expression(0)
	}

	return localctx
}

// ITypeConversionContext is an interface to support dynamic dispatch.
type ITypeConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConversionContext differentiates from other interfaces.
	IsTypeConversionContext()
}

type TypeConversionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConversionContext() *TypeConversionContext {
	var p = new(TypeConversionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeConversion
	return p
}

func (*TypeConversionContext) IsTypeConversionContext() {}

func NewTypeConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConversionContext {
	var p = new(TypeConversionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeConversion

	return p
}

func (s *TypeConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConversionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeConversionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *TypeConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConversionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeConversion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeConversion() (localctx ITypeConversionContext) {
	localctx = NewTypeConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, FeelParserRULE_typeConversion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1723)
		p.TypeType()
	}
	{
		p.SetState(1724)
		p.Match(FeelParserBang)
	}

	return localctx
}

// ITypeCheckContext is an interface to support dynamic dispatch.
type ITypeCheckContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeCheckContext differentiates from other interfaces.
	IsTypeCheckContext()
}

type TypeCheckContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCheckContext() *TypeCheckContext {
	var p = new(TypeCheckContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeCheck
	return p
}

func (*TypeCheckContext) IsTypeCheckContext() {}

func NewTypeCheckContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCheckContext {
	var p = new(TypeCheckContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeCheck

	return p
}

func (s *TypeCheckContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCheckContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeCheckContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *TypeCheckContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCheckContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCheckContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeCheck(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeCheck() (localctx ITypeCheckContext) {
	localctx = NewTypeCheckContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, FeelParserRULE_typeCheck)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1726)
		p.TypeType()
	}
	{
		p.SetState(1727)
		p.Match(FeelParserQuestion)
	}

	return localctx
}

// IPkgAssignContext is an interface to support dynamic dispatch.
type IPkgAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignContext differentiates from other interfaces.
	IsPkgAssignContext()
}

type PkgAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignContext() *PkgAssignContext {
	var p = new(PkgAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_pkgAssign
	return p
}

func (*PkgAssignContext) IsPkgAssignContext() {}

func NewPkgAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignContext {
	var p = new(PkgAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_pkgAssign

	return p
}

func (s *PkgAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignContext) AllPkgAssignElement() []IPkgAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) PkgAssignElement(i int) IPkgAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignElementContext)
}

func (s *PkgAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PkgAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPkgAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PkgAssign() (localctx IPkgAssignContext) {
	localctx = NewPkgAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, FeelParserRULE_pkgAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1734)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1729)
				p.PkgAssignElement()
			}
			{
				p.SetState(1730)
				p.End()
			}

		}
		p.SetState(1736)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext())
	}
	{
		p.SetState(1737)
		p.PkgAssignElement()
	}

	return localctx
}

// IPkgAssignElementContext is an interface to support dynamic dispatch.
type IPkgAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignElementContext differentiates from other interfaces.
	IsPkgAssignElementContext()
}

type PkgAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignElementContext() *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_pkgAssignElement
	return p
}

func (*PkgAssignElementContext) IsPkgAssignElementContext() {}

func NewPkgAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_pkgAssignElement

	return p
}

func (s *PkgAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserEqual, 0)
}

func (s *PkgAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPkgAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PkgAssignElement() (localctx IPkgAssignElementContext) {
	localctx = NewPkgAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, FeelParserRULE_pkgAssignElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1739)
		p.Name()
	}
	{
		p.SetState(1740)
		p.Match(FeelParserEqual)
	}
	{
		p.SetState(1741)
		p.expression(0)
	}

	return localctx
}

// IListAssignContext is an interface to support dynamic dispatch.
type IListAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListAssignContext differentiates from other interfaces.
	IsListAssignContext()
}

type ListAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListAssignContext() *ListAssignContext {
	var p = new(ListAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_listAssign
	return p
}

func (*ListAssignContext) IsListAssignContext() {}

func NewListAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListAssignContext {
	var p = new(ListAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_listAssign

	return p
}

func (s *ListAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *ListAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *ListAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ListAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitListAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) ListAssign() (localctx IListAssignContext) {
	localctx = NewListAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, FeelParserRULE_listAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1748)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1743)
				p.expression(0)
			}
			{
				p.SetState(1744)
				p.End()
			}

		}
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())
	}
	{
		p.SetState(1751)
		p.expression(0)
	}

	return localctx
}

// IDictionaryAssignContext is an interface to support dynamic dispatch.
type IDictionaryAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryAssignContext differentiates from other interfaces.
	IsDictionaryAssignContext()
}

type DictionaryAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryAssignContext() *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_dictionaryAssign
	return p
}

func (*DictionaryAssignContext) IsDictionaryAssignContext() {}

func NewDictionaryAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_dictionaryAssign

	return p
}

func (s *DictionaryAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryAssignContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *DictionaryAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitDictionaryAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) DictionaryAssign() (localctx IDictionaryAssignContext) {
	localctx = NewDictionaryAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, FeelParserRULE_dictionaryAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1758)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1753)
				p.DictionaryElement()
			}
			{
				p.SetState(1754)
				p.End()
			}

		}
		p.SetState(1760)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext())
	}
	{
		p.SetState(1761)
		p.DictionaryElement()
	}

	return localctx
}

// IListContext is an interface to support dynamic dispatch.
type IListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListContext differentiates from other interfaces.
	IsListContext()
}

type ListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListContext() *ListContext {
	var p = new(ListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_list
	return p
}

func (*ListContext) IsListContext() {}

func NewListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListContext {
	var p = new(ListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_list

	return p
}

func (s *ListContext) GetParser() antlr.Parser { return s.parser }

func (s *ListContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ListContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *ListContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) List() (localctx IListContext) {
	localctx = NewListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, FeelParserRULE_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1763)
		p.Left_brace()
	}
	p.SetState(1769)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1764)
				p.expression(0)
			}
			{
				p.SetState(1765)
				p.End()
			}

		}
		p.SetState(1771)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext())
	}
	{
		p.SetState(1772)
		p.expression(0)
	}
	{
		p.SetState(1773)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryContext is an interface to support dynamic dispatch.
type IDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryContext differentiates from other interfaces.
	IsDictionaryContext()
}

type DictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryContext() *DictionaryContext {
	var p = new(DictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_dictionary
	return p
}

func (*DictionaryContext) IsDictionaryContext() {}

func NewDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryContext {
	var p = new(DictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_dictionary

	return p
}

func (s *DictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *DictionaryContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *DictionaryContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *DictionaryContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *DictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Dictionary() (localctx IDictionaryContext) {
	localctx = NewDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, FeelParserRULE_dictionary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1775)
		p.Left_brace()
	}
	p.SetState(1781)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1776)
				p.DictionaryElement()
			}
			{
				p.SetState(1777)
				p.End()
			}

		}
		p.SetState(1783)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext())
	}
	{
		p.SetState(1784)
		p.DictionaryElement()
	}
	{
		p.SetState(1785)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryElementContext is an interface to support dynamic dispatch.
type IDictionaryElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryElementContext differentiates from other interfaces.
	IsDictionaryElementContext()
}

type DictionaryElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryElementContext() *DictionaryElementContext {
	var p = new(DictionaryElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_dictionaryElement
	return p
}

func (*DictionaryElementContext) IsDictionaryElementContext() {}

func NewDictionaryElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryElementContext {
	var p = new(DictionaryElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_dictionaryElement

	return p
}

func (s *DictionaryElementContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryElementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *DictionaryElementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *DictionaryElementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DictionaryElementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *DictionaryElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserEqual, 0)
}

func (s *DictionaryElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitDictionaryElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) DictionaryElement() (localctx IDictionaryElementContext) {
	localctx = NewDictionaryElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, FeelParserRULE_dictionaryElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1787)
		p.Left_brack()
	}
	{
		p.SetState(1788)
		p.expression(0)
	}
	{
		p.SetState(1789)
		p.Right_brack()
	}
	{
		p.SetState(1790)
		p.Match(FeelParserEqual)
	}
	{
		p.SetState(1791)
		p.expression(0)
	}

	return localctx
}

// ISliceContext is an interface to support dynamic dispatch.
type ISliceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceContext differentiates from other interfaces.
	IsSliceContext()
}

type SliceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceContext() *SliceContext {
	var p = new(SliceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_slice
	return p
}

func (*SliceContext) IsSliceContext() {}

func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceContext {
	var p = new(SliceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_slice

	return p
}

func (s *SliceContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceContext) SliceStart() ISliceStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceStartContext)
}

func (s *SliceContext) SliceEnd() ISliceEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceEndContext)
}

func (s *SliceContext) SliceFull() ISliceFullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceFullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceFullContext)
}

func (s *SliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitSlice(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Slice() (localctx ISliceContext) {
	localctx = NewSliceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, FeelParserRULE_slice)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1796)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1793)
			p.SliceStart()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1794)
			p.SliceEnd()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1795)
			p.SliceFull()
		}

	}

	return localctx
}

// ISliceFullContext is an interface to support dynamic dispatch.
type ISliceFullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceFullContext differentiates from other interfaces.
	IsSliceFullContext()
}

type SliceFullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceFullContext() *SliceFullContext {
	var p = new(SliceFullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_sliceFull
	return p
}

func (*SliceFullContext) IsSliceFullContext() {}

func NewSliceFullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceFullContext {
	var p = new(SliceFullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_sliceFull

	return p
}

func (s *SliceFullContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceFullContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SliceFullContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceFullContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot, 0)
}

func (s *SliceFullContext) Dot_Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Dot, 0)
}

func (s *SliceFullContext) Dot_Dot_Less() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Less, 0)
}

func (s *SliceFullContext) Dot_Dot_Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Greater, 0)
}

func (s *SliceFullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceFullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitSliceFull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) SliceFull() (localctx ISliceFullContext) {
	localctx = NewSliceFullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, FeelParserRULE_sliceFull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1798)
		p.expression(0)
	}
	{
		p.SetState(1799)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<FeelParserDot_Dot_Dot)|(1<<FeelParserDot_Dot_Less)|(1<<FeelParserDot_Dot_Greater)|(1<<FeelParserDot_Dot))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1800)
		p.expression(0)
	}

	return localctx
}

// ISliceStartContext is an interface to support dynamic dispatch.
type ISliceStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceStartContext differentiates from other interfaces.
	IsSliceStartContext()
}

type SliceStartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceStartContext() *SliceStartContext {
	var p = new(SliceStartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_sliceStart
	return p
}

func (*SliceStartContext) IsSliceStartContext() {}

func NewSliceStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceStartContext {
	var p = new(SliceStartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_sliceStart

	return p
}

func (s *SliceStartContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceStartContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceStartContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot, 0)
}

func (s *SliceStartContext) Dot_Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Dot, 0)
}

func (s *SliceStartContext) Dot_Dot_Less() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Less, 0)
}

func (s *SliceStartContext) Dot_Dot_Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Greater, 0)
}

func (s *SliceStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceStartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitSliceStart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) SliceStart() (localctx ISliceStartContext) {
	localctx = NewSliceStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, FeelParserRULE_sliceStart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1802)
		p.expression(0)
	}
	{
		p.SetState(1803)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<FeelParserDot_Dot_Dot)|(1<<FeelParserDot_Dot_Less)|(1<<FeelParserDot_Dot_Greater)|(1<<FeelParserDot_Dot))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISliceEndContext is an interface to support dynamic dispatch.
type ISliceEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceEndContext differentiates from other interfaces.
	IsSliceEndContext()
}

type SliceEndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceEndContext() *SliceEndContext {
	var p = new(SliceEndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_sliceEnd
	return p
}

func (*SliceEndContext) IsSliceEndContext() {}

func NewSliceEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceEndContext {
	var p = new(SliceEndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_sliceEnd

	return p
}

func (s *SliceEndContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceEndContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceEndContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot, 0)
}

func (s *SliceEndContext) Dot_Dot_Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Dot, 0)
}

func (s *SliceEndContext) Dot_Dot_Less() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Less, 0)
}

func (s *SliceEndContext) Dot_Dot_Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserDot_Dot_Greater, 0)
}

func (s *SliceEndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceEndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceEndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitSliceEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) SliceEnd() (localctx ISliceEndContext) {
	localctx = NewSliceEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, FeelParserRULE_sliceEnd)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1805)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<FeelParserDot_Dot_Dot)|(1<<FeelParserDot_Dot_Less)|(1<<FeelParserDot_Dot_Greater)|(1<<FeelParserDot_Dot))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1806)
		p.expression(0)
	}

	return localctx
}

// INameSpaceItemContext is an interface to support dynamic dispatch.
type INameSpaceItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameSpaceItemContext differentiates from other interfaces.
	IsNameSpaceItemContext()
}

type NameSpaceItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameSpaceItemContext() *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_nameSpaceItem
	return p
}

func (*NameSpaceItemContext) IsNameSpaceItemContext() {}

func NewNameSpaceItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_nameSpaceItem

	return p
}

func (s *NameSpaceItemContext) GetParser() antlr.Parser { return s.parser }

func (s *NameSpaceItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameSpaceItemContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameSpaceItemContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *NameSpaceItemContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *NameSpaceItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameSpaceItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameSpaceItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNameSpaceItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) NameSpaceItem() (localctx INameSpaceItemContext) {
	localctx = NewNameSpaceItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, FeelParserRULE_nameSpaceItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1815)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1808)
				p.Id()
			}
			{
				p.SetState(1809)
				p.Call()
			}
			p.SetState(1811)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == FeelParserNew_Line {
				{
					p.SetState(1810)
					p.Match(FeelParserNew_Line)
				}

			}

		}
		p.SetState(1817)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext())
	}
	{
		p.SetState(1818)
		p.Id()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *NameContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, FeelParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1820)
		p.Id()
	}
	p.SetState(1829)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserDot {
		{
			p.SetState(1821)
			p.Call()
		}
		p.SetState(1823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == FeelParserNew_Line {
			{
				p.SetState(1822)
				p.Match(FeelParserNew_Line)
			}

		}
		{
			p.SetState(1825)
			p.Id()
		}

		p.SetState(1831)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateDefineContext is an interface to support dynamic dispatch.
type ITemplateDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineContext differentiates from other interfaces.
	IsTemplateDefineContext()
}

type TemplateDefineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineContext() *TemplateDefineContext {
	var p = new(TemplateDefineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_templateDefine
	return p
}

func (*TemplateDefineContext) IsTemplateDefineContext() {}

func NewTemplateDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineContext {
	var p = new(TemplateDefineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_templateDefine

	return p
}

func (s *TemplateDefineContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineContext) AllTemplateDefineItem() []ITemplateDefineItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem())
	var tst = make([]ITemplateDefineItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateDefineItemContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) TemplateDefineItem(i int) ITemplateDefineItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineItemContext)
}

func (s *TemplateDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTemplateDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TemplateDefine() (localctx ITemplateDefineContext) {
	localctx = NewTemplateDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, FeelParserRULE_templateDefine)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1835)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(FeelParserLeft_Paren-37))|(1<<(FeelParserTypeI8-37))|(1<<(FeelParserTypeU8-37))|(1<<(FeelParserTypeI16-37))|(1<<(FeelParserTypeU16-37))|(1<<(FeelParserTypeI32-37))|(1<<(FeelParserTypeU32-37))|(1<<(FeelParserTypeI64-37))|(1<<(FeelParserTypeU64-37))|(1<<(FeelParserTypeF32-37))|(1<<(FeelParserTypeF64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(FeelParserTypeChr-69))|(1<<(FeelParserTypeStr-69))|(1<<(FeelParserTypeBool-69))|(1<<(FeelParserTypeInt-69))|(1<<(FeelParserTypeNum-69))|(1<<(FeelParserTypeByte-69))|(1<<(FeelParserTypeAny-69))|(1<<(FeelParserIDPrivate-69))|(1<<(FeelParserIDPublic-69)))) != 0) {
		{
			p.SetState(1832)
			p.TemplateDefineItem()
		}

		p.SetState(1837)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateDefineItemContext is an interface to support dynamic dispatch.
type ITemplateDefineItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineItemContext differentiates from other interfaces.
	IsTemplateDefineItemContext()
}

type TemplateDefineItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineItemContext() *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_templateDefineItem
	return p
}

func (*TemplateDefineItemContext) IsTemplateDefineItemContext() {}

func NewTemplateDefineItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_templateDefineItem

	return p
}

func (s *TemplateDefineItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *TemplateDefineItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TemplateDefineItemContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TemplateDefineItemContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TemplateDefineItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTemplateDefineItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TemplateDefineItem() (localctx ITemplateDefineItemContext) {
	localctx = NewTemplateDefineItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, FeelParserRULE_templateDefineItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1844)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1838)
			p.Id()
		}

	case FeelParserLeft_Paren:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1839)
			p.Left_paren()
		}
		{
			p.SetState(1840)
			p.Id()
		}
		{
			p.SetState(1841)
			p.Id()
		}
		{
			p.SetState(1842)
			p.Right_paren()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITemplateCallContext is an interface to support dynamic dispatch.
type ITemplateCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateCallContext differentiates from other interfaces.
	IsTemplateCallContext()
}

type TemplateCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateCallContext() *TemplateCallContext {
	var p = new(TemplateCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_templateCall
	return p
}

func (*TemplateCallContext) IsTemplateCallContext() {}

func NewTemplateCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateCallContext {
	var p = new(TemplateCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_templateCall

	return p
}

func (s *TemplateCallContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateCallContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TemplateCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTemplateCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TemplateCall() (localctx ITemplateCallContext) {
	localctx = NewTemplateCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, FeelParserRULE_templateCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(FeelParserLeft_Paren-37))|(1<<(FeelParserLeft_Brack-37))|(1<<(FeelParserQuestion-37))|(1<<(FeelParserTypeI8-37))|(1<<(FeelParserTypeU8-37))|(1<<(FeelParserTypeI16-37))|(1<<(FeelParserTypeU16-37))|(1<<(FeelParserTypeI32-37))|(1<<(FeelParserTypeU32-37))|(1<<(FeelParserTypeI64-37))|(1<<(FeelParserTypeU64-37))|(1<<(FeelParserTypeF32-37))|(1<<(FeelParserTypeF64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(FeelParserTypeChr-69))|(1<<(FeelParserTypeStr-69))|(1<<(FeelParserTypeBool-69))|(1<<(FeelParserTypeInt-69))|(1<<(FeelParserTypeNum-69))|(1<<(FeelParserTypeByte-69))|(1<<(FeelParserTypeAny-69))|(1<<(FeelParserIDPrivate-69))|(1<<(FeelParserIDPublic-69)))) != 0) {
		{
			p.SetState(1846)
			p.TypeType()
		}

		p.SetState(1851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) GetT() antlr.Token { return s.t }

func (s *LambdaContext) SetT(v antlr.Token) { s.t = v }

func (s *LambdaContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LambdaContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LambdaContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LambdaContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *LambdaContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *LambdaContext) LambdaIn() ILambdaInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaInContext)
}

func (s *LambdaContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *LambdaContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *LambdaContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LambdaContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLambda(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, FeelParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1885)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1852)
			p.Left_brace()
		}
		p.SetState(1854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
			{
				p.SetState(1853)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1856)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1860)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == FeelParserNew_Line {
			{
				p.SetState(1857)
				p.Match(FeelParserNew_Line)
			}

			p.SetState(1862)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1863)
			p.TupleExpression()
		}
		{
			p.SetState(1864)
			p.Right_brace()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1866)
			p.Left_brace()
		}
		p.SetState(1868)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
			{
				p.SetState(1867)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1870)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1874)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1871)
					p.Match(FeelParserNew_Line)
				}

			}
			p.SetState(1876)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext())
		}
		p.SetState(1880)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1877)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1882)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext())
		}
		{
			p.SetState(1883)
			p.Right_brace()
		}

	}

	return localctx
}

// ILambdaInContext is an interface to support dynamic dispatch.
type ILambdaInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaInContext differentiates from other interfaces.
	IsLambdaInContext()
}

type LambdaInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaInContext() *LambdaInContext {
	var p = new(LambdaInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_lambdaIn
	return p
}

func (*LambdaInContext) IsLambdaInContext() {}

func NewLambdaInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaInContext {
	var p = new(LambdaInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_lambdaIn

	return p
}

func (s *LambdaInContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaInContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LambdaInContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LambdaInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *LambdaInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *LambdaInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLambdaIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LambdaIn() (localctx ILambdaInContext) {
	localctx = NewLambdaInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, FeelParserRULE_lambdaIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1887)
		p.Id()
	}
	p.SetState(1893)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(1888)
			p.More()
		}
		{
			p.SetState(1889)
			p.Id()
		}

		p.SetState(1895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPkgAnonymousContext is an interface to support dynamic dispatch.
type IPkgAnonymousContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousContext differentiates from other interfaces.
	IsPkgAnonymousContext()
}

type PkgAnonymousContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousContext() *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_pkgAnonymous
	return p
}

func (*PkgAnonymousContext) IsPkgAnonymousContext() {}

func NewPkgAnonymousContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_pkgAnonymous

	return p
}

func (s *PkgAnonymousContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousContext) PkgAnonymousAssign() IPkgAnonymousAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignContext)
}

func (s *PkgAnonymousContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPkgAnonymous(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PkgAnonymous() (localctx IPkgAnonymousContext) {
	localctx = NewPkgAnonymousContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, FeelParserRULE_pkgAnonymous)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1896)
		p.PkgAnonymousAssign()
	}

	return localctx
}

// IPkgAnonymousAssignContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousAssignContext differentiates from other interfaces.
	IsPkgAnonymousAssignContext()
}

type PkgAnonymousAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousAssignContext() *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_pkgAnonymousAssign
	return p
}

func (*PkgAnonymousAssignContext) IsPkgAnonymousAssignContext() {}

func NewPkgAnonymousAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_pkgAnonymousAssign

	return p
}

func (s *PkgAnonymousAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PkgAnonymousAssignContext) AllPkgAnonymousAssignElement() []IPkgAnonymousAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAnonymousAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAnonymousAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) PkgAnonymousAssignElement(i int) IPkgAnonymousAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignElementContext)
}

func (s *PkgAnonymousAssignContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PkgAnonymousAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PkgAnonymousAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPkgAnonymousAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PkgAnonymousAssign() (localctx IPkgAnonymousAssignContext) {
	localctx = NewPkgAnonymousAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, FeelParserRULE_pkgAnonymousAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1898)
		p.Left_brace()
	}
	p.SetState(1904)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1899)
				p.PkgAnonymousAssignElement()
			}
			{
				p.SetState(1900)
				p.End()
			}

		}
		p.SetState(1906)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext())
	}
	{
		p.SetState(1907)
		p.PkgAnonymousAssignElement()
	}
	{
		p.SetState(1908)
		p.Right_brace()
	}

	return localctx
}

// IPkgAnonymousAssignElementContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPkgAnonymousAssignElementContext differentiates from other interfaces.
	IsPkgAnonymousAssignElementContext()
}

type PkgAnonymousAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyPkgAnonymousAssignElementContext() *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_pkgAnonymousAssignElement
	return p
}

func (*PkgAnonymousAssignElementContext) IsPkgAnonymousAssignElementContext() {}

func NewPkgAnonymousAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_pkgAnonymousAssignElement

	return p
}

func (s *PkgAnonymousAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignElementContext) GetT() antlr.Token { return s.t }

func (s *PkgAnonymousAssignElementContext) SetT(v antlr.Token) { s.t = v }

func (s *PkgAnonymousAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAnonymousAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAnonymousAssignElementContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *PkgAnonymousAssignElementContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *PkgAnonymousAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPkgAnonymousAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PkgAnonymousAssignElement() (localctx IPkgAnonymousAssignElementContext) {
	localctx = NewPkgAnonymousAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, FeelParserRULE_pkgAnonymousAssignElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1910)
		p.Name()
	}
	p.SetState(1912)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1911)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(1914)

		var _m = p.Match(FeelParserColon)

		localctx.(*PkgAnonymousAssignElementContext).t = _m
	}
	{
		p.SetState(1915)
		p.expression(0)
	}

	return localctx
}

// IFunctionExpressionContext is an interface to support dynamic dispatch.
type IFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsFunctionExpressionContext differentiates from other interfaces.
	IsFunctionExpressionContext()
}

type FunctionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyFunctionExpressionContext() *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_functionExpression
	return p
}

func (*FunctionExpressionContext) IsFunctionExpressionContext() {}

func NewFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_functionExpression

	return p
}

func (s *FunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionContext) GetT() antlr.Token { return s.t }

func (s *FunctionExpressionContext) GetB() antlr.Token { return s.b }

func (s *FunctionExpressionContext) GetY() antlr.Token { return s.y }

func (s *FunctionExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionExpressionContext) SetB(v antlr.Token) { s.b = v }

func (s *FunctionExpressionContext) SetY(v antlr.Token) { s.y = v }

func (s *FunctionExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *FunctionExpressionContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionExpressionContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *FunctionExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *FunctionExpressionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *FunctionExpressionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *FunctionExpressionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *FunctionExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *FunctionExpressionContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) FunctionExpression() (localctx IFunctionExpressionContext) {
	localctx = NewFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, FeelParserRULE_functionExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1917)
		p.Left_paren()
	}
	{
		p.SetState(1918)
		p.ParameterClauseIn()
	}
	{
		p.SetState(1919)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionExpressionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionExpressionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1920)

			var _m = p.Match(FeelParserBang)

			localctx.(*FunctionExpressionContext).b = _m
		}

	}
	p.SetState(1924)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(1923)

			var _m = p.Match(FeelParserAt)

			localctx.(*FunctionExpressionContext).y = _m
		}

	}
	p.SetState(1929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(1926)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(1931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1932)
		p.ParameterClauseOut()
	}
	{
		p.SetState(1933)
		p.Right_paren()
	}
	{
		p.SetState(1934)
		p.Left_brace()
	}
	p.SetState(1938)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1935)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1940)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext())
	}
	{
		p.SetState(1941)
		p.Right_brace()
	}

	return localctx
}

// IPlusMinusContext is an interface to support dynamic dispatch.
type IPlusMinusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlusMinusContext differentiates from other interfaces.
	IsPlusMinusContext()
}

type PlusMinusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlusMinusContext() *PlusMinusContext {
	var p = new(PlusMinusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_plusMinus
	return p
}

func (*PlusMinusContext) IsPlusMinusContext() {}

func NewPlusMinusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PlusMinusContext {
	var p = new(PlusMinusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_plusMinus

	return p
}

func (s *PlusMinusContext) GetParser() antlr.Parser { return s.parser }

func (s *PlusMinusContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *PlusMinusContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PlusMinusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PlusMinusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PlusMinusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPlusMinus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) PlusMinus() (localctx IPlusMinusContext) {
	localctx = NewPlusMinusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, FeelParserRULE_plusMinus)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1943)
		p.Add()
	}
	{
		p.SetState(1944)
		p.expression(0)
	}

	return localctx
}

// INegateContext is an interface to support dynamic dispatch.
type INegateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegateContext differentiates from other interfaces.
	IsNegateContext()
}

type NegateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegateContext() *NegateContext {
	var p = new(NegateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_negate
	return p
}

func (*NegateContext) IsNegateContext() {}

func NewNegateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegateContext {
	var p = new(NegateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_negate

	return p
}

func (s *NegateContext) GetParser() antlr.Parser { return s.parser }

func (s *NegateContext) Wave() IWaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWaveContext)
}

func (s *NegateContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Negate() (localctx INegateContext) {
	localctx = NewNegateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, FeelParserRULE_negate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1946)
		p.Wave()
	}
	{
		p.SetState(1947)
		p.expression(0)
	}

	return localctx
}

// IBitwiseNotExpressionContext is an interface to support dynamic dispatch.
type IBitwiseNotExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseNotExpressionContext differentiates from other interfaces.
	IsBitwiseNotExpressionContext()
}

type BitwiseNotExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseNotExpressionContext() *BitwiseNotExpressionContext {
	var p = new(BitwiseNotExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseNotExpression
	return p
}

func (*BitwiseNotExpressionContext) IsBitwiseNotExpressionContext() {}

func NewBitwiseNotExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseNotExpressionContext {
	var p = new(BitwiseNotExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseNotExpression

	return p
}

func (s *BitwiseNotExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseNotExpressionContext) BitwiseNot() IBitwiseNotContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseNotContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseNotContext)
}

func (s *BitwiseNotExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseNotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseNotExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseNotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseNotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseNotExpression() (localctx IBitwiseNotExpressionContext) {
	localctx = NewBitwiseNotExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, FeelParserRULE_bitwiseNotExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1949)
		p.BitwiseNot()
	}
	{
		p.SetState(1950)
		p.expression(0)
	}

	return localctx
}

// ILinqContext is an interface to support dynamic dispatch.
type ILinqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqContext differentiates from other interfaces.
	IsLinqContext()
}

type LinqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqContext() *LinqContext {
	var p = new(LinqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_linq
	return p
}

func (*LinqContext) IsLinqContext() {}

func NewLinqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqContext {
	var p = new(LinqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_linq

	return p
}

func (s *LinqContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqContext) LinqHeadItem() ILinqHeadItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadItemContext)
}

func (s *LinqContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *LinqContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LinqContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *LinqContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *LinqContext) AllLinqItem() []ILinqItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILinqItemContext)(nil)).Elem())
	var tst = make([]ILinqItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILinqItemContext)
		}
	}

	return tst
}

func (s *LinqContext) LinqItem(i int) ILinqItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILinqItemContext)
}

func (s *LinqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLinq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Linq() (localctx ILinqContext) {
	localctx = NewLinqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, FeelParserRULE_linq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1952)
		p.LinqHeadItem()
	}
	{
		p.SetState(1953)
		p.Match(FeelParserRight_Arrow)
	}
	p.SetState(1955)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(1954)
			p.Match(FeelParserNew_Line)
		}

	}
	p.SetState(1960)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1957)
				p.LinqItem()
			}

		}
		p.SetState(1962)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())
	}
	{
		p.SetState(1963)
		p.Id()
	}
	p.SetState(1965)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(1964)
			p.Match(FeelParserNew_Line)
		}

	}
	{
		p.SetState(1967)
		p.expression(0)
	}

	return localctx
}

// ILinqHeadItemContext is an interface to support dynamic dispatch.
type ILinqHeadItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqHeadItemContext differentiates from other interfaces.
	IsLinqHeadItemContext()
}

type LinqHeadItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqHeadItemContext() *LinqHeadItemContext {
	var p = new(LinqHeadItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_linqHeadItem
	return p
}

func (*LinqHeadItemContext) IsLinqHeadItemContext() {}

func NewLinqHeadItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqHeadItemContext {
	var p = new(LinqHeadItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_linqHeadItem

	return p
}

func (s *LinqHeadItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqHeadItemContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LinqHeadItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LinqHeadItemContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *LinqHeadItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqHeadItemContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *LinqHeadItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqHeadItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqHeadItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLinqHeadItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LinqHeadItem() (localctx ILinqHeadItemContext) {
	localctx = NewLinqHeadItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, FeelParserRULE_linqHeadItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1969)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(1970)
		p.Id()
	}
	p.SetState(1972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(1971)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(1974)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(1975)
		p.expression(0)
	}

	return localctx
}

// ILinqItemContext is an interface to support dynamic dispatch.
type ILinqItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqItemContext differentiates from other interfaces.
	IsLinqItemContext()
}

type LinqItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqItemContext() *LinqItemContext {
	var p = new(LinqItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_linqItem
	return p
}

func (*LinqItemContext) IsLinqItemContext() {}

func NewLinqItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqItemContext {
	var p = new(LinqItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_linqItem

	return p
}

func (s *LinqItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqItemContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *LinqItemContext) LinqHeadItem() ILinqHeadItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadItemContext)
}

func (s *LinqItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LinqItemContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *LinqItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLinqItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LinqItem() (localctx ILinqItemContext) {
	localctx = NewLinqItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, FeelParserRULE_linqItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1982)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserAt:
		{
			p.SetState(1977)
			p.LinqHeadItem()
		}

	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		{
			p.SetState(1978)
			p.Id()
		}
		p.SetState(1980)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(FeelParserRight_Wave-25))|(1<<(FeelParserLeft_Wave-25))|(1<<(FeelParserTilde_Tilde-25))|(1<<(FeelParserLeft_Paren-25))|(1<<(FeelParserLeft_Brace-25))|(1<<(FeelParserLeft_Brack-25))|(1<<(FeelParserQuestion-25))|(1<<(FeelParserAt-25))|(1<<(FeelParserBang-25))|(1<<(FeelParserTilde-25))|(1<<(FeelParserAdd-25))|(1<<(FeelParserSub-25)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserNilLiteral-59))|(1<<(FeelParserTrueLiteral-59))|(1<<(FeelParserFalseLiteral-59))|(1<<(FeelParserUndefinedLiteral-59))|(1<<(FeelParserFloatLiteral-59))|(1<<(FeelParserDecimalLiteral-59))|(1<<(FeelParserBinaryLiteral-59))|(1<<(FeelParserOctalLiteral-59))|(1<<(FeelParserHexLiteral-59))|(1<<(FeelParserQuote_Quote_Quote_Open-59))|(1<<(FeelParserQuote_Open-59))|(1<<(FeelParserCharLiteral-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59))|(1<<(FeelParserDiscard-59)))) != 0) {
			{
				p.SetState(1979)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1984)
		p.Match(FeelParserRight_Arrow)
	}
	p.SetState(1986)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(1985)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IJudgeExpressionContext is an interface to support dynamic dispatch.
type IJudgeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionContext differentiates from other interfaces.
	IsJudgeExpressionContext()
}

type JudgeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionContext() *JudgeExpressionContext {
	var p = new(JudgeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeExpression
	return p
}

func (*JudgeExpressionContext) IsJudgeExpressionContext() {}

func NewJudgeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionContext {
	var p = new(JudgeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeExpression

	return p
}

func (s *JudgeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionContext) JudgeExpressionIfStatement() IJudgeExpressionIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionIfStatementContext)
}

func (s *JudgeExpressionContext) JudgeExpressionElseStatement() IJudgeExpressionElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionElseStatementContext)
}

func (s *JudgeExpressionContext) AllJudgeExpressionElseIfStatement() []IJudgeExpressionElseIfStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJudgeExpressionElseIfStatementContext)(nil)).Elem())
	var tst = make([]IJudgeExpressionElseIfStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJudgeExpressionElseIfStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionContext) JudgeExpressionElseIfStatement(i int) IJudgeExpressionElseIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionElseIfStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionElseIfStatementContext)
}

func (s *JudgeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeExpression() (localctx IJudgeExpressionContext) {
	localctx = NewJudgeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, FeelParserRULE_judgeExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1988)
		p.JudgeExpressionIfStatement()
	}
	p.SetState(1992)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1989)
				p.JudgeExpressionElseIfStatement()
			}

		}
		p.SetState(1994)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext())
	}
	{
		p.SetState(1995)
		p.JudgeExpressionElseStatement()
	}

	return localctx
}

// IJudgeExpressionElseStatementContext is an interface to support dynamic dispatch.
type IJudgeExpressionElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionElseStatementContext differentiates from other interfaces.
	IsJudgeExpressionElseStatementContext()
}

type JudgeExpressionElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionElseStatementContext() *JudgeExpressionElseStatementContext {
	var p = new(JudgeExpressionElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeExpressionElseStatement
	return p
}

func (*JudgeExpressionElseStatementContext) IsJudgeExpressionElseStatementContext() {}

func NewJudgeExpressionElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionElseStatementContext {
	var p = new(JudgeExpressionElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeExpressionElseStatement

	return p
}

func (s *JudgeExpressionElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *JudgeExpressionElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeExpressionElseStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *JudgeExpressionElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeExpressionElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeExpressionElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeExpressionElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeExpressionElseStatement() (localctx IJudgeExpressionElseStatementContext) {
	localctx = NewJudgeExpressionElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, FeelParserRULE_judgeExpressionElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1997)
		p.Match(FeelParserDiscard)
	}
	{
		p.SetState(1998)
		p.Left_brace()
	}
	p.SetState(2002)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1999)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2004)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 227, p.GetParserRuleContext())
	}
	{
		p.SetState(2005)
		p.TupleExpression()
	}
	{
		p.SetState(2006)
		p.Right_brace()
	}

	return localctx
}

// IJudgeExpressionIfStatementContext is an interface to support dynamic dispatch.
type IJudgeExpressionIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionIfStatementContext differentiates from other interfaces.
	IsJudgeExpressionIfStatementContext()
}

type JudgeExpressionIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionIfStatementContext() *JudgeExpressionIfStatementContext {
	var p = new(JudgeExpressionIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeExpressionIfStatement
	return p
}

func (*JudgeExpressionIfStatementContext) IsJudgeExpressionIfStatementContext() {}

func NewJudgeExpressionIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionIfStatementContext {
	var p = new(JudgeExpressionIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeExpressionIfStatement

	return p
}

func (s *JudgeExpressionIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionIfStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *JudgeExpressionIfStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *JudgeExpressionIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeExpressionIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeExpressionIfStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *JudgeExpressionIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeExpressionIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeExpressionIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeExpressionIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeExpressionIfStatement() (localctx IJudgeExpressionIfStatementContext) {
	localctx = NewJudgeExpressionIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, FeelParserRULE_judgeExpressionIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2008)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(2009)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(2010)
		p.expression(0)
	}
	{
		p.SetState(2011)
		p.Left_brace()
	}
	p.SetState(2015)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2012)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2017)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext())
	}
	{
		p.SetState(2018)
		p.TupleExpression()
	}
	{
		p.SetState(2019)
		p.Right_brace()
	}

	return localctx
}

// IJudgeExpressionElseIfStatementContext is an interface to support dynamic dispatch.
type IJudgeExpressionElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionElseIfStatementContext differentiates from other interfaces.
	IsJudgeExpressionElseIfStatementContext()
}

type JudgeExpressionElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionElseIfStatementContext() *JudgeExpressionElseIfStatementContext {
	var p = new(JudgeExpressionElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeExpressionElseIfStatement
	return p
}

func (*JudgeExpressionElseIfStatementContext) IsJudgeExpressionElseIfStatementContext() {}

func NewJudgeExpressionElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionElseIfStatementContext {
	var p = new(JudgeExpressionElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeExpressionElseIfStatement

	return p
}

func (s *JudgeExpressionElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionElseIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeExpressionElseIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeExpressionElseIfStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *JudgeExpressionElseIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeExpressionElseIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionElseIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeExpressionElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeExpressionElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeExpressionElseIfStatement() (localctx IJudgeExpressionElseIfStatementContext) {
	localctx = NewJudgeExpressionElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, FeelParserRULE_judgeExpressionElseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2021)
		p.expression(0)
	}
	{
		p.SetState(2022)
		p.Left_brace()
	}
	p.SetState(2026)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2023)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2028)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext())
	}
	{
		p.SetState(2029)
		p.TupleExpression()
	}
	{
		p.SetState(2030)
		p.Right_brace()
	}

	return localctx
}

// IJudgeCaseExpressionContext is an interface to support dynamic dispatch.
type IJudgeCaseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCaseExpressionContext differentiates from other interfaces.
	IsJudgeCaseExpressionContext()
}

type JudgeCaseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCaseExpressionContext() *JudgeCaseExpressionContext {
	var p = new(JudgeCaseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_judgeCaseExpression
	return p
}

func (*JudgeCaseExpressionContext) IsJudgeCaseExpressionContext() {}

func NewJudgeCaseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCaseExpressionContext {
	var p = new(JudgeCaseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_judgeCaseExpression

	return p
}

func (s *JudgeCaseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCaseExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *JudgeCaseExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeCaseExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *JudgeCaseExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *JudgeCaseExpressionContext) AllCaseExpressionStatement() []ICaseExpressionStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExpressionStatementContext)(nil)).Elem())
	var tst = make([]ICaseExpressionStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExpressionStatementContext)
		}
	}

	return tst
}

func (s *JudgeCaseExpressionContext) CaseExpressionStatement(i int) ICaseExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExpressionStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExpressionStatementContext)
}

func (s *JudgeCaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCaseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCaseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitJudgeCaseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) JudgeCaseExpression() (localctx IJudgeCaseExpressionContext) {
	localctx = NewJudgeCaseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, FeelParserRULE_judgeCaseExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2032)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(2033)
		p.expression(0)
	}
	{
		p.SetState(2034)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(2035)
		p.Match(FeelParserRight_Arrow)
	}
	p.SetState(2037)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2036)
				p.CaseExpressionStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2039)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext())
	}

	return localctx
}

// ICaseExpressionStatementContext is an interface to support dynamic dispatch.
type ICaseExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExpressionStatementContext differentiates from other interfaces.
	IsCaseExpressionStatementContext()
}

type CaseExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExpressionStatementContext() *CaseExpressionStatementContext {
	var p = new(CaseExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_caseExpressionStatement
	return p
}

func (*CaseExpressionStatementContext) IsCaseExpressionStatementContext() {}

func NewCaseExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExpressionStatementContext {
	var p = new(CaseExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_caseExpressionStatement

	return p
}

func (s *CaseExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExpressionStatementContext) AllCaseExprStatement() []ICaseExprStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem())
	var tst = make([]ICaseExprStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExprStatementContext)
		}
	}

	return tst
}

func (s *CaseExpressionStatementContext) CaseExprStatement(i int) ICaseExprStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExprStatementContext)
}

func (s *CaseExpressionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseExpressionStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *CaseExpressionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseExpressionStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *CaseExpressionStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *CaseExpressionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseExpressionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCaseExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CaseExpressionStatement() (localctx ICaseExpressionStatementContext) {
	localctx = NewCaseExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, FeelParserRULE_caseExpressionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2041)
		p.CaseExprStatement()
	}
	p.SetState(2047)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(2042)
			p.More()
		}
		{
			p.SetState(2043)
			p.CaseExprStatement()
		}

		p.SetState(2049)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2050)
		p.Left_brace()
	}
	p.SetState(2054)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2051)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2056)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext())
	}
	{
		p.SetState(2057)
		p.TupleExpression()
	}
	{
		p.SetState(2058)
		p.Right_brace()
	}

	return localctx
}

// ILoopExpressionContext is an interface to support dynamic dispatch.
type ILoopExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopExpressionContext differentiates from other interfaces.
	IsLoopExpressionContext()
}

type LoopExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopExpressionContext() *LoopExpressionContext {
	var p = new(LoopExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopExpression
	return p
}

func (*LoopExpressionContext) IsLoopExpressionContext() {}

func NewLoopExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopExpressionContext {
	var p = new(LoopExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopExpression

	return p
}

func (s *LoopExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopExpressionContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(FeelParserColon, 0)
}

func (s *LoopExpressionContext) IteratorStatement() IIteratorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorStatementContext)
}

func (s *LoopExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *LoopExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LoopExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *LoopExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopExpressionContext) LoopElseExpression() ILoopElseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseExpressionContext)
}

func (s *LoopExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopExpression() (localctx ILoopExpressionContext) {
	localctx = NewLoopExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, FeelParserRULE_loopExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2060)
		p.Match(FeelParserAt)
	}
	{
		p.SetState(2061)
		p.Id()
	}
	p.SetState(2063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(2062)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(2065)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(2066)
		p.IteratorStatement()
	}
	{
		p.SetState(2067)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(2068)
		p.Left_brace()
	}
	p.SetState(2072)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2069)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2074)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())
	}
	{
		p.SetState(2075)
		p.TupleExpression()
	}
	{
		p.SetState(2076)
		p.Right_brace()
	}
	p.SetState(2078)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2077)
			p.LoopElseExpression()
		}

	}

	return localctx
}

// ILoopEachExpressionContext is an interface to support dynamic dispatch.
type ILoopEachExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopEachExpressionContext differentiates from other interfaces.
	IsLoopEachExpressionContext()
}

type LoopEachExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopEachExpressionContext() *LoopEachExpressionContext {
	var p = new(LoopEachExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopEachExpression
	return p
}

func (*LoopEachExpressionContext) IsLoopEachExpressionContext() {}

func NewLoopEachExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopEachExpressionContext {
	var p = new(LoopEachExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopEachExpression

	return p
}

func (s *LoopEachExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopEachExpressionContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *LoopEachExpressionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LoopEachExpressionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopEachExpressionContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(FeelParserColon)
}

func (s *LoopEachExpressionContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserColon, i)
}

func (s *LoopEachExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopEachExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *LoopEachExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopEachExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LoopEachExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopEachExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *LoopEachExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopEachExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopEachExpressionContext) LoopElseExpression() ILoopElseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseExpressionContext)
}

func (s *LoopEachExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopEachExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopEachExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopEachExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopEachExpression() (localctx ILoopEachExpressionContext) {
	localctx = NewLoopEachExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, FeelParserRULE_loopEachExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2080)
		p.Match(FeelParserAt)
	}
	p.SetState(2084)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2081)
			p.Id()
		}
		{
			p.SetState(2082)
			p.Match(FeelParserColon)
		}

	}
	{
		p.SetState(2086)
		p.Id()
	}
	p.SetState(2088)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(2087)
			p.Match(FeelParserBang)
		}

	}
	{
		p.SetState(2090)
		p.Match(FeelParserColon)
	}
	{
		p.SetState(2091)
		p.expression(0)
	}
	{
		p.SetState(2092)
		p.Match(FeelParserRight_Arrow)
	}
	{
		p.SetState(2093)
		p.Left_brace()
	}
	p.SetState(2097)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2094)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2099)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())
	}
	{
		p.SetState(2100)
		p.TupleExpression()
	}
	{
		p.SetState(2101)
		p.Right_brace()
	}
	p.SetState(2103)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2102)
			p.LoopElseExpression()
		}

	}

	return localctx
}

// ILoopElseExpressionContext is an interface to support dynamic dispatch.
type ILoopElseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopElseExpressionContext differentiates from other interfaces.
	IsLoopElseExpressionContext()
}

type LoopElseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopElseExpressionContext() *LoopElseExpressionContext {
	var p = new(LoopElseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_loopElseExpression
	return p
}

func (*LoopElseExpressionContext) IsLoopElseExpressionContext() {}

func NewLoopElseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopElseExpressionContext {
	var p = new(LoopElseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_loopElseExpression

	return p
}

func (s *LoopElseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopElseExpressionContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *LoopElseExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopElseExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LoopElseExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopElseExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopElseExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopElseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopElseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopElseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLoopElseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) LoopElseExpression() (localctx ILoopElseExpressionContext) {
	localctx = NewLoopElseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, FeelParserRULE_loopElseExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2105)
		p.Match(FeelParserDiscard)
	}
	{
		p.SetState(2106)
		p.Left_brace()
	}
	p.SetState(2110)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2107)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2112)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())
	}
	{
		p.SetState(2113)
		p.TupleExpression()
	}
	{
		p.SetState(2114)
		p.Right_brace()
	}

	return localctx
}

// ICheckExpressionContext is an interface to support dynamic dispatch.
type ICheckExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckExpressionContext differentiates from other interfaces.
	IsCheckExpressionContext()
}

type CheckExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckExpressionContext() *CheckExpressionContext {
	var p = new(CheckExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_checkExpression
	return p
}

func (*CheckExpressionContext) IsCheckExpressionContext() {}

func NewCheckExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckExpressionContext {
	var p = new(CheckExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_checkExpression

	return p
}

func (s *CheckExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *CheckExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *CheckExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *CheckExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckExpressionContext) CheckFinallyStatment() ICheckFinallyStatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckFinallyStatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckFinallyStatmentContext)
}

func (s *CheckExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckExpressionContext) AllCheckErrorExpression() []ICheckErrorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckErrorExpressionContext)(nil)).Elem())
	var tst = make([]ICheckErrorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckErrorExpressionContext)
		}
	}

	return tst
}

func (s *CheckExpressionContext) CheckErrorExpression(i int) ICheckErrorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckErrorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckErrorExpressionContext)
}

func (s *CheckExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCheckExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CheckExpression() (localctx ICheckExpressionContext) {
	localctx = NewCheckExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, FeelParserRULE_checkExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2116)
			p.Match(FeelParserBang)
		}
		{
			p.SetState(2117)
			p.Match(FeelParserRight_Arrow)
		}
		{
			p.SetState(2118)
			p.Left_brace()
		}
		p.SetState(2122)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2119)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(2124)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext())
		}
		{
			p.SetState(2125)
			p.TupleExpression()
		}
		{
			p.SetState(2126)
			p.Right_brace()
		}
		p.SetState(2130)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(FeelParserTypeI8-59))|(1<<(FeelParserTypeU8-59))|(1<<(FeelParserTypeI16-59))|(1<<(FeelParserTypeU16-59))|(1<<(FeelParserTypeI32-59))|(1<<(FeelParserTypeU32-59))|(1<<(FeelParserTypeI64-59))|(1<<(FeelParserTypeU64-59))|(1<<(FeelParserTypeF32-59))|(1<<(FeelParserTypeF64-59))|(1<<(FeelParserTypeChr-59))|(1<<(FeelParserTypeStr-59))|(1<<(FeelParserTypeBool-59))|(1<<(FeelParserTypeInt-59))|(1<<(FeelParserTypeNum-59))|(1<<(FeelParserTypeByte-59))|(1<<(FeelParserTypeAny-59))|(1<<(FeelParserIDPrivate-59))|(1<<(FeelParserIDPublic-59)))) != 0 {
			{
				p.SetState(2127)
				p.CheckErrorExpression()
			}

			p.SetState(2132)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2133)
			p.CheckFinallyStatment()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2135)
			p.Match(FeelParserBang)
		}
		{
			p.SetState(2136)
			p.Match(FeelParserRight_Arrow)
		}
		{
			p.SetState(2137)
			p.Left_brace()
		}
		p.SetState(2141)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2138)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(2143)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext())
		}
		{
			p.SetState(2144)
			p.TupleExpression()
		}
		{
			p.SetState(2145)
			p.Right_brace()
		}
		p.SetState(2147)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2146)
					p.CheckErrorExpression()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2149)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext())
		}

	}

	return localctx
}

// ICheckErrorExpressionContext is an interface to support dynamic dispatch.
type ICheckErrorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckErrorExpressionContext differentiates from other interfaces.
	IsCheckErrorExpressionContext()
}

type CheckErrorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckErrorExpressionContext() *CheckErrorExpressionContext {
	var p = new(CheckErrorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_checkErrorExpression
	return p
}

func (*CheckErrorExpressionContext) IsCheckErrorExpressionContext() {}

func NewCheckErrorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckErrorExpressionContext {
	var p = new(CheckErrorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_checkErrorExpression

	return p
}

func (s *CheckErrorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckErrorExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckErrorExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *CheckErrorExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckErrorExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CheckErrorExpressionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CheckErrorExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckErrorExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckErrorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckErrorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckErrorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCheckErrorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CheckErrorExpression() (localctx ICheckErrorExpressionContext) {
	localctx = NewCheckErrorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, FeelParserRULE_checkErrorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2157)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2153)
			p.Id()
		}

	case 2:
		{
			p.SetState(2154)
			p.Id()
		}
		{
			p.SetState(2155)
			p.TypeType()
		}

	}
	{
		p.SetState(2159)
		p.Left_brace()
	}
	p.SetState(2163)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2160)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(2165)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext())
	}
	{
		p.SetState(2166)
		p.TupleExpression()
	}
	{
		p.SetState(2167)
		p.Right_brace()
	}

	return localctx
}

// IDataStatementContext is an interface to support dynamic dispatch.
type IDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsDataStatementContext differentiates from other interfaces.
	IsDataStatementContext()
}

type DataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyDataStatementContext() *DataStatementContext {
	var p = new(DataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_dataStatement
	return p
}

func (*DataStatementContext) IsDataStatementContext() {}

func NewDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataStatementContext {
	var p = new(DataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_dataStatement

	return p
}

func (s *DataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DataStatementContext) GetT() antlr.Token { return s.t }

func (s *DataStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *DataStatementContext) FloatExpr() IFloatExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFloatExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFloatExprContext)
}

func (s *DataStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *DataStatementContext) RawStringExpr() IRawStringExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRawStringExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRawStringExprContext)
}

func (s *DataStatementContext) StringExpr() IStringExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringExprContext)
}

func (s *DataStatementContext) CharLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserCharLiteral, 0)
}

func (s *DataStatementContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserTrueLiteral, 0)
}

func (s *DataStatementContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserFalseLiteral, 0)
}

func (s *DataStatementContext) NilExpr() INilExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INilExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INilExprContext)
}

func (s *DataStatementContext) UndefinedLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserUndefinedLiteral, 0)
}

func (s *DataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitDataStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) DataStatement() (localctx IDataStatementContext) {
	localctx = NewDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, FeelParserRULE_dataStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2178)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserFloatLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2169)
			p.FloatExpr()
		}

	case FeelParserDecimalLiteral, FeelParserBinaryLiteral, FeelParserOctalLiteral, FeelParserHexLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2170)
			p.IntegerExpr()
		}

	case FeelParserQuote_Quote_Quote_Open:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2171)
			p.RawStringExpr()
		}

	case FeelParserQuote_Open:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2172)
			p.StringExpr()
		}

	case FeelParserCharLiteral:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2173)

			var _m = p.Match(FeelParserCharLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case FeelParserTrueLiteral:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2174)

			var _m = p.Match(FeelParserTrueLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case FeelParserFalseLiteral:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2175)

			var _m = p.Match(FeelParserFalseLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case FeelParserNilLiteral:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2176)
			p.NilExpr()
		}

	case FeelParserUndefinedLiteral:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2177)

			var _m = p.Match(FeelParserUndefinedLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStringExprContext is an interface to support dynamic dispatch.
type IStringExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExprContext differentiates from other interfaces.
	IsStringExprContext()
}

type StringExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExprContext() *StringExprContext {
	var p = new(StringExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_stringExpr
	return p
}

func (*StringExprContext) IsStringExprContext() {}

func NewStringExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExprContext {
	var p = new(StringExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_stringExpr

	return p
}

func (s *StringExprContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExprContext) Quote_Open() antlr.TerminalNode {
	return s.GetToken(FeelParserQuote_Open, 0)
}

func (s *StringExprContext) Quote_Close() antlr.TerminalNode {
	return s.GetToken(FeelParserQuote_Close, 0)
}

func (s *StringExprContext) AllStringContent() []IStringContentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringContentContext)(nil)).Elem())
	var tst = make([]IStringContentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringContentContext)
		}
	}

	return tst
}

func (s *StringExprContext) StringContent(i int) IStringContentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringContentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringContentContext)
}

func (s *StringExprContext) AllStringTemplate() []IStringTemplateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringTemplateContext)(nil)).Elem())
	var tst = make([]IStringTemplateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringTemplateContext)
		}
	}

	return tst
}

func (s *StringExprContext) StringTemplate(i int) IStringTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringTemplateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringTemplateContext)
}

func (s *StringExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitStringExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) StringExpr() (localctx IStringExprContext) {
	localctx = NewStringExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, FeelParserRULE_stringExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2180)
		p.Match(FeelParserQuote_Open)
	}
	p.SetState(2185)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserString_Template_Open || _la == FeelParserTextLiteral {
		p.SetState(2183)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case FeelParserTextLiteral:
			{
				p.SetState(2181)
				p.StringContent()
			}

		case FeelParserString_Template_Open:
			{
				p.SetState(2182)
				p.StringTemplate()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2188)
		p.Match(FeelParserQuote_Close)
	}

	return localctx
}

// IStringContentContext is an interface to support dynamic dispatch.
type IStringContentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringContentContext differentiates from other interfaces.
	IsStringContentContext()
}

type StringContentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringContentContext() *StringContentContext {
	var p = new(StringContentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_stringContent
	return p
}

func (*StringContentContext) IsStringContentContext() {}

func NewStringContentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringContentContext {
	var p = new(StringContentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_stringContent

	return p
}

func (s *StringContentContext) GetParser() antlr.Parser { return s.parser }

func (s *StringContentContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserTextLiteral, 0)
}

func (s *StringContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringContentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringContentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitStringContent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) StringContent() (localctx IStringContentContext) {
	localctx = NewStringContentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, FeelParserRULE_stringContent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2190)
		p.Match(FeelParserTextLiteral)
	}

	return localctx
}

// IStringTemplateContext is an interface to support dynamic dispatch.
type IStringTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringTemplateContext differentiates from other interfaces.
	IsStringTemplateContext()
}

type StringTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringTemplateContext() *StringTemplateContext {
	var p = new(StringTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_stringTemplate
	return p
}

func (*StringTemplateContext) IsStringTemplateContext() {}

func NewStringTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringTemplateContext {
	var p = new(StringTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_stringTemplate

	return p
}

func (s *StringTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *StringTemplateContext) String_Template_Open() antlr.TerminalNode {
	return s.GetToken(FeelParserString_Template_Open, 0)
}

func (s *StringTemplateContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *StringTemplateContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StringTemplateContext) Right_Brace() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Brace, 0)
}

func (s *StringTemplateContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *StringTemplateContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *StringTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringTemplateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitStringTemplate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) StringTemplate() (localctx IStringTemplateContext) {
	localctx = NewStringTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, FeelParserRULE_stringTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2192)
		p.Match(FeelParserString_Template_Open)
	}
	p.SetState(2198)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2193)
				p.expression(0)
			}
			{
				p.SetState(2194)
				p.End()
			}

		}
		p.SetState(2200)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext())
	}
	{
		p.SetState(2201)
		p.expression(0)
	}
	{
		p.SetState(2202)
		p.Match(FeelParserRight_Brace)
	}

	return localctx
}

// IRawStringExprContext is an interface to support dynamic dispatch.
type IRawStringExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRawStringExprContext differentiates from other interfaces.
	IsRawStringExprContext()
}

type RawStringExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRawStringExprContext() *RawStringExprContext {
	var p = new(RawStringExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_rawStringExpr
	return p
}

func (*RawStringExprContext) IsRawStringExprContext() {}

func NewRawStringExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RawStringExprContext {
	var p = new(RawStringExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_rawStringExpr

	return p
}

func (s *RawStringExprContext) GetParser() antlr.Parser { return s.parser }

func (s *RawStringExprContext) Quote_Quote_Quote_Open() antlr.TerminalNode {
	return s.GetToken(FeelParserQuote_Quote_Quote_Open, 0)
}

func (s *RawStringExprContext) Quote_Quote_Quote_Close() antlr.TerminalNode {
	return s.GetToken(FeelParserQuote_Quote_Quote_Close, 0)
}

func (s *RawStringExprContext) AllRawStringContent() []IRawStringContentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRawStringContentContext)(nil)).Elem())
	var tst = make([]IRawStringContentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRawStringContentContext)
		}
	}

	return tst
}

func (s *RawStringExprContext) RawStringContent(i int) IRawStringContentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRawStringContentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRawStringContentContext)
}

func (s *RawStringExprContext) AllRawStringTemplate() []IRawStringTemplateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRawStringTemplateContext)(nil)).Elem())
	var tst = make([]IRawStringTemplateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRawStringTemplateContext)
		}
	}

	return tst
}

func (s *RawStringExprContext) RawStringTemplate(i int) IRawStringTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRawStringTemplateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRawStringTemplateContext)
}

func (s *RawStringExprContext) AllRaw_Quote() []antlr.TerminalNode {
	return s.GetTokens(FeelParserRaw_Quote)
}

func (s *RawStringExprContext) Raw_Quote(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserRaw_Quote, i)
}

func (s *RawStringExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RawStringExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RawStringExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitRawStringExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) RawStringExpr() (localctx IRawStringExprContext) {
	localctx = NewRawStringExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, FeelParserRULE_rawStringExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2204)
		p.Match(FeelParserQuote_Quote_Quote_Open)
	}
	p.SetState(2210)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(FeelParserRaw_Quote-100))|(1<<(FeelParserRaw_String_Template_Open-100))|(1<<(FeelParserRawTextLiteral-100)))) != 0 {
		p.SetState(2208)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case FeelParserRawTextLiteral:
			{
				p.SetState(2205)
				p.RawStringContent()
			}

		case FeelParserRaw_String_Template_Open:
			{
				p.SetState(2206)
				p.RawStringTemplate()
			}

		case FeelParserRaw_Quote:
			{
				p.SetState(2207)
				p.Match(FeelParserRaw_Quote)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2213)
		p.Match(FeelParserQuote_Quote_Quote_Close)
	}

	return localctx
}

// IRawStringContentContext is an interface to support dynamic dispatch.
type IRawStringContentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRawStringContentContext differentiates from other interfaces.
	IsRawStringContentContext()
}

type RawStringContentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRawStringContentContext() *RawStringContentContext {
	var p = new(RawStringContentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_rawStringContent
	return p
}

func (*RawStringContentContext) IsRawStringContentContext() {}

func NewRawStringContentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RawStringContentContext {
	var p = new(RawStringContentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_rawStringContent

	return p
}

func (s *RawStringContentContext) GetParser() antlr.Parser { return s.parser }

func (s *RawStringContentContext) RawTextLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserRawTextLiteral, 0)
}

func (s *RawStringContentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RawStringContentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RawStringContentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitRawStringContent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) RawStringContent() (localctx IRawStringContentContext) {
	localctx = NewRawStringContentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, FeelParserRULE_rawStringContent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2215)
		p.Match(FeelParserRawTextLiteral)
	}

	return localctx
}

// IRawStringTemplateContext is an interface to support dynamic dispatch.
type IRawStringTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRawStringTemplateContext differentiates from other interfaces.
	IsRawStringTemplateContext()
}

type RawStringTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRawStringTemplateContext() *RawStringTemplateContext {
	var p = new(RawStringTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_rawStringTemplate
	return p
}

func (*RawStringTemplateContext) IsRawStringTemplateContext() {}

func NewRawStringTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RawStringTemplateContext {
	var p = new(RawStringTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_rawStringTemplate

	return p
}

func (s *RawStringTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *RawStringTemplateContext) Raw_String_Template_Open() antlr.TerminalNode {
	return s.GetToken(FeelParserRaw_String_Template_Open, 0)
}

func (s *RawStringTemplateContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *RawStringTemplateContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RawStringTemplateContext) Right_Brace() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Brace, 0)
}

func (s *RawStringTemplateContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *RawStringTemplateContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *RawStringTemplateContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *RawStringTemplateContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *RawStringTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RawStringTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RawStringTemplateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitRawStringTemplate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) RawStringTemplate() (localctx IRawStringTemplateContext) {
	localctx = NewRawStringTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, FeelParserRULE_rawStringTemplate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2217)
		p.Match(FeelParserRaw_String_Template_Open)
	}
	p.SetState(2221)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(2218)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(2223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2229)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2224)
				p.expression(0)
			}
			{
				p.SetState(2225)
				p.End()
			}

		}
		p.SetState(2231)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())
	}
	{
		p.SetState(2232)
		p.expression(0)
	}
	p.SetState(2236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(2233)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(2238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2239)
		p.Match(FeelParserRight_Brace)
	}

	return localctx
}

// IFloatExprContext is an interface to support dynamic dispatch.
type IFloatExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFloatExprContext differentiates from other interfaces.
	IsFloatExprContext()
}

type FloatExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatExprContext() *FloatExprContext {
	var p = new(FloatExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_floatExpr
	return p
}

func (*FloatExprContext) IsFloatExprContext() {}

func NewFloatExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatExprContext {
	var p = new(FloatExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_floatExpr

	return p
}

func (s *FloatExprContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatExprContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserFloatLiteral, 0)
}

func (s *FloatExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitFloatExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) FloatExpr() (localctx IFloatExprContext) {
	localctx = NewFloatExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, FeelParserRULE_floatExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2241)
		p.Match(FeelParserFloatLiteral)
	}

	return localctx
}

// IIntegerExprContext is an interface to support dynamic dispatch.
type IIntegerExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerExprContext differentiates from other interfaces.
	IsIntegerExprContext()
}

type IntegerExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerExprContext() *IntegerExprContext {
	var p = new(IntegerExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_integerExpr
	return p
}

func (*IntegerExprContext) IsIntegerExprContext() {}

func NewIntegerExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerExprContext {
	var p = new(IntegerExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_integerExpr

	return p
}

func (s *IntegerExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerExprContext) DecimalLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserDecimalLiteral, 0)
}

func (s *IntegerExprContext) BinaryLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserBinaryLiteral, 0)
}

func (s *IntegerExprContext) OctalLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserOctalLiteral, 0)
}

func (s *IntegerExprContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserHexLiteral, 0)
}

func (s *IntegerExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitIntegerExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) IntegerExpr() (localctx IIntegerExprContext) {
	localctx = NewIntegerExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, FeelParserRULE_integerExpr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2243)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-81)&-(0x1f+1)) == 0 && ((1<<uint((_la-81)))&((1<<(FeelParserDecimalLiteral-81))|(1<<(FeelParserBinaryLiteral-81))|(1<<(FeelParserOctalLiteral-81))|(1<<(FeelParserHexLiteral-81)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITypeNotNullContext is an interface to support dynamic dispatch.
type ITypeNotNullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNotNullContext differentiates from other interfaces.
	IsTypeNotNullContext()
}

type TypeNotNullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNotNullContext() *TypeNotNullContext {
	var p = new(TypeNotNullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeNotNull
	return p
}

func (*TypeNotNullContext) IsTypeNotNullContext() {}

func NewTypeNotNullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNotNullContext {
	var p = new(TypeNotNullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeNotNull

	return p
}

func (s *TypeNotNullContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNotNullContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *TypeNotNullContext) TypeArray() ITypeArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArrayContext)
}

func (s *TypeNotNullContext) TypeList() ITypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeNotNullContext) TypeSet() ITypeSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSetContext)
}

func (s *TypeNotNullContext) TypeDictionary() ITypeDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDictionaryContext)
}

func (s *TypeNotNullContext) TypeStack() ITypeStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeStackContext)
}

func (s *TypeNotNullContext) TypeQueue() ITypeQueueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQueueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQueueContext)
}

func (s *TypeNotNullContext) TypeChannel() ITypeChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeChannelContext)
}

func (s *TypeNotNullContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *TypeNotNullContext) TypePackage() ITypePackageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypePackageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypePackageContext)
}

func (s *TypeNotNullContext) TypeFunction() ITypeFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionContext)
}

func (s *TypeNotNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNotNullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNotNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeNotNull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeNotNull() (localctx ITypeNotNullContext) {
	localctx = NewTypeNotNullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, FeelParserRULE_typeNotNull)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2256)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2245)
			p.TypeAny()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2246)
			p.TypeArray()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2247)
			p.TypeList()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2248)
			p.TypeSet()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2249)
			p.TypeDictionary()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2250)
			p.TypeStack()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2251)
			p.TypeQueue()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2252)
			p.TypeChannel()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2253)
			p.TypeBasic()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2254)
			p.TypePackage()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2255)
			p.TypeFunction()
		}

	}

	return localctx
}

// ITypeTypeContext is an interface to support dynamic dispatch.
type ITypeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTypeContext differentiates from other interfaces.
	IsTypeTypeContext()
}

type TypeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTypeContext() *TypeTypeContext {
	var p = new(TypeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeType
	return p
}

func (*TypeTypeContext) IsTypeTypeContext() {}

func NewTypeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTypeContext {
	var p = new(TypeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeType

	return p
}

func (s *TypeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTypeContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeTypeContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeType() (localctx ITypeTypeContext) {
	localctx = NewTypeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, FeelParserRULE_typeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2260)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserLeft_Paren, FeelParserLeft_Brack, FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2258)
			p.TypeNotNull()
		}

	case FeelParserQuestion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2259)
			p.TypeNullable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNullableContext is an interface to support dynamic dispatch.
type ITypeNullableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNullableContext differentiates from other interfaces.
	IsTypeNullableContext()
}

type TypeNullableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNullableContext() *TypeNullableContext {
	var p = new(TypeNullableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeNullable
	return p
}

func (*TypeNullableContext) IsTypeNullableContext() {}

func NewTypeNullableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNullableContext {
	var p = new(TypeNullableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeNullable

	return p
}

func (s *TypeNullableContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNullableContext) Question() antlr.TerminalNode {
	return s.GetToken(FeelParserQuestion, 0)
}

func (s *TypeNullableContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeNullableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNullableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNullableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeNullable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeNullable() (localctx ITypeNullableContext) {
	localctx = NewTypeNullableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, FeelParserRULE_typeNullable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2262)
		p.Match(FeelParserQuestion)
	}
	{
		p.SetState(2263)
		p.TypeNotNull()
	}

	return localctx
}

// ITypeArrayContext is an interface to support dynamic dispatch.
type ITypeArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArrayContext differentiates from other interfaces.
	IsTypeArrayContext()
}

type TypeArrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArrayContext() *TypeArrayContext {
	var p = new(TypeArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeArray
	return p
}

func (*TypeArrayContext) IsTypeArrayContext() {}

func NewTypeArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArrayContext {
	var p = new(TypeArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeArray

	return p
}

func (s *TypeArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArrayContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeArrayContext) Comma() antlr.TerminalNode {
	return s.GetToken(FeelParserComma, 0)
}

func (s *TypeArrayContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeArrayContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeArray(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeArray() (localctx ITypeArrayContext) {
	localctx = NewTypeArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, FeelParserRULE_typeArray)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2265)
		p.Left_brack()
	}
	{
		p.SetState(2266)
		p.Match(FeelParserComma)
	}
	{
		p.SetState(2267)
		p.Right_brack()
	}
	{
		p.SetState(2268)
		p.TypeType()
	}

	return localctx
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeList
	return p
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeListContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeListContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, FeelParserRULE_typeList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2270)
		p.Left_brack()
	}
	{
		p.SetState(2271)
		p.Right_brack()
	}
	{
		p.SetState(2272)
		p.TypeType()
	}

	return localctx
}

// ITypeSetContext is an interface to support dynamic dispatch.
type ITypeSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSetContext differentiates from other interfaces.
	IsTypeSetContext()
}

type TypeSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSetContext() *TypeSetContext {
	var p = new(TypeSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeSet
	return p
}

func (*TypeSetContext) IsTypeSetContext() {}

func NewTypeSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSetContext {
	var p = new(TypeSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeSet

	return p
}

func (s *TypeSetContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSetContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeSetContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeSetContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeSetContext) Discard() antlr.TerminalNode {
	return s.GetToken(FeelParserDiscard, 0)
}

func (s *TypeSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeSet() (localctx ITypeSetContext) {
	localctx = NewTypeSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, FeelParserRULE_typeSet)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2274)
		p.Left_brack()
	}
	{
		p.SetState(2275)
		p.TypeType()
	}
	{
		p.SetState(2276)
		p.Right_brack()
	}
	{
		p.SetState(2277)
		p.Match(FeelParserDiscard)
	}

	return localctx
}

// ITypeDictionaryContext is an interface to support dynamic dispatch.
type ITypeDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDictionaryContext differentiates from other interfaces.
	IsTypeDictionaryContext()
}

type TypeDictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDictionaryContext() *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeDictionary
	return p
}

func (*TypeDictionaryContext) IsTypeDictionaryContext() {}

func NewTypeDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeDictionary

	return p
}

func (s *TypeDictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDictionaryContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeDictionaryContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeDictionaryContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeDictionaryContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeDictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeDictionary() (localctx ITypeDictionaryContext) {
	localctx = NewTypeDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, FeelParserRULE_typeDictionary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2279)
		p.Left_brack()
	}
	{
		p.SetState(2280)
		p.TypeType()
	}
	{
		p.SetState(2281)
		p.Right_brack()
	}
	{
		p.SetState(2282)
		p.TypeType()
	}

	return localctx
}

// ITypeStackContext is an interface to support dynamic dispatch.
type ITypeStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeStackContext differentiates from other interfaces.
	IsTypeStackContext()
}

type TypeStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeStackContext() *TypeStackContext {
	var p = new(TypeStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeStack
	return p
}

func (*TypeStackContext) IsTypeStackContext() {}

func NewTypeStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeStackContext {
	var p = new(TypeStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeStack

	return p
}

func (s *TypeStackContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeStackContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeStackContext) Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserGreater, 0)
}

func (s *TypeStackContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeStackContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeStackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeStack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeStack() (localctx ITypeStackContext) {
	localctx = NewTypeStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, FeelParserRULE_typeStack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2284)
		p.Left_brack()
	}
	{
		p.SetState(2285)
		p.Match(FeelParserGreater)
	}
	{
		p.SetState(2286)
		p.Right_brack()
	}
	{
		p.SetState(2287)
		p.TypeType()
	}

	return localctx
}

// ITypeQueueContext is an interface to support dynamic dispatch.
type ITypeQueueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeQueueContext differentiates from other interfaces.
	IsTypeQueueContext()
}

type TypeQueueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeQueueContext() *TypeQueueContext {
	var p = new(TypeQueueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeQueue
	return p
}

func (*TypeQueueContext) IsTypeQueueContext() {}

func NewTypeQueueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeQueueContext {
	var p = new(TypeQueueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeQueue

	return p
}

func (s *TypeQueueContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeQueueContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeQueueContext) Less() antlr.TerminalNode {
	return s.GetToken(FeelParserLess, 0)
}

func (s *TypeQueueContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeQueueContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeQueueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeQueueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeQueueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeQueue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeQueue() (localctx ITypeQueueContext) {
	localctx = NewTypeQueueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, FeelParserRULE_typeQueue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2289)
		p.Left_brack()
	}
	{
		p.SetState(2290)
		p.Match(FeelParserLess)
	}
	{
		p.SetState(2291)
		p.Right_brack()
	}
	{
		p.SetState(2292)
		p.TypeType()
	}

	return localctx
}

// ITypeChannelContext is an interface to support dynamic dispatch.
type ITypeChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeChannelContext differentiates from other interfaces.
	IsTypeChannelContext()
}

type TypeChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeChannelContext() *TypeChannelContext {
	var p = new(TypeChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeChannel
	return p
}

func (*TypeChannelContext) IsTypeChannelContext() {}

func NewTypeChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeChannelContext {
	var p = new(TypeChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeChannel

	return p
}

func (s *TypeChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeChannelContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeChannelContext) Tilde() antlr.TerminalNode {
	return s.GetToken(FeelParserTilde, 0)
}

func (s *TypeChannelContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeChannelContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeChannel() (localctx ITypeChannelContext) {
	localctx = NewTypeChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, FeelParserRULE_typeChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2294)
		p.Left_brack()
	}
	{
		p.SetState(2295)
		p.Match(FeelParserTilde)
	}
	{
		p.SetState(2296)
		p.Right_brack()
	}
	{
		p.SetState(2297)
		p.TypeType()
	}

	return localctx
}

// ITypePackageContext is an interface to support dynamic dispatch.
type ITypePackageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypePackageContext differentiates from other interfaces.
	IsTypePackageContext()
}

type TypePackageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypePackageContext() *TypePackageContext {
	var p = new(TypePackageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typePackage
	return p
}

func (*TypePackageContext) IsTypePackageContext() {}

func NewTypePackageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypePackageContext {
	var p = new(TypePackageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typePackage

	return p
}

func (s *TypePackageContext) GetParser() antlr.Parser { return s.parser }

func (s *TypePackageContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *TypePackageContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypePackageContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *TypePackageContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypePackageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypePackageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypePackageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypePackage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypePackage() (localctx ITypePackageContext) {
	localctx = NewTypePackageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, FeelParserRULE_typePackage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2305)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte, FeelParserTypeAny, FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2299)
			p.NameSpaceItem()
		}

	case FeelParserLeft_Brack:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2300)
			p.Left_brack()
		}
		{
			p.SetState(2301)
			p.NameSpaceItem()
		}
		{
			p.SetState(2302)
			p.TemplateCall()
		}
		{
			p.SetState(2303)
			p.Right_brack()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeFunctionContext is an interface to support dynamic dispatch.
type ITypeFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetB returns the b token.
	GetB() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetB sets the b token.
	SetB(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsTypeFunctionContext differentiates from other interfaces.
	IsTypeFunctionContext()
}

type TypeFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	b      antlr.Token
	y      antlr.Token
}

func NewEmptyTypeFunctionContext() *TypeFunctionContext {
	var p = new(TypeFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeFunction
	return p
}

func (*TypeFunctionContext) IsTypeFunctionContext() {}

func NewTypeFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionContext {
	var p = new(TypeFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeFunction

	return p
}

func (s *TypeFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionContext) GetT() antlr.Token { return s.t }

func (s *TypeFunctionContext) GetB() antlr.Token { return s.b }

func (s *TypeFunctionContext) GetY() antlr.Token { return s.y }

func (s *TypeFunctionContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeFunctionContext) SetB(v antlr.Token) { s.b = v }

func (s *TypeFunctionContext) SetY(v antlr.Token) { s.y = v }

func (s *TypeFunctionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeFunctionContext) AllTypeFunctionParameterClause() []ITypeFunctionParameterClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem())
	var tst = make([]ITypeFunctionParameterClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeFunctionParameterClauseContext)
		}
	}

	return tst
}

func (s *TypeFunctionContext) TypeFunctionParameterClause(i int) ITypeFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionParameterClauseContext)
}

func (s *TypeFunctionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeFunctionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Arrow, 0)
}

func (s *TypeFunctionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Flow, 0)
}

func (s *TypeFunctionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *TypeFunctionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *TypeFunctionContext) Bang() antlr.TerminalNode {
	return s.GetToken(FeelParserBang, 0)
}

func (s *TypeFunctionContext) At() antlr.TerminalNode {
	return s.GetToken(FeelParserAt, 0)
}

func (s *TypeFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeFunction() (localctx ITypeFunctionContext) {
	localctx = NewTypeFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, FeelParserRULE_typeFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2307)
		p.Left_paren()
	}
	{
		p.SetState(2308)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(2309)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*TypeFunctionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserRight_Flow || _la == FeelParserRight_Arrow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*TypeFunctionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2311)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserBang {
		{
			p.SetState(2310)

			var _m = p.Match(FeelParserBang)

			localctx.(*TypeFunctionContext).b = _m
		}

	}
	p.SetState(2314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserAt {
		{
			p.SetState(2313)

			var _m = p.Match(FeelParserAt)

			localctx.(*TypeFunctionContext).y = _m
		}

	}
	p.SetState(2319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(2316)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(2321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2322)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(2323)
		p.Right_paren()
	}

	return localctx
}

// ITypeAnyContext is an interface to support dynamic dispatch.
type ITypeAnyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnyContext differentiates from other interfaces.
	IsTypeAnyContext()
}

type TypeAnyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnyContext() *TypeAnyContext {
	var p = new(TypeAnyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeAny
	return p
}

func (*TypeAnyContext) IsTypeAnyContext() {}

func NewTypeAnyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnyContext {
	var p = new(TypeAnyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeAny

	return p
}

func (s *TypeAnyContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnyContext) TypeAny() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeAny, 0)
}

func (s *TypeAnyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeAny(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeAny() (localctx ITypeAnyContext) {
	localctx = NewTypeAnyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, FeelParserRULE_typeAny)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2325)
		p.Match(FeelParserTypeAny)
	}

	return localctx
}

// ITypeFunctionParameterClauseContext is an interface to support dynamic dispatch.
type ITypeFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeFunctionParameterClauseContext differentiates from other interfaces.
	IsTypeFunctionParameterClauseContext()
}

type TypeFunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeFunctionParameterClauseContext() *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeFunctionParameterClause
	return p
}

func (*TypeFunctionParameterClauseContext) IsTypeFunctionParameterClauseContext() {}

func NewTypeFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeFunctionParameterClause

	return p
}

func (s *TypeFunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionParameterClauseContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeFunctionParameterClauseContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TypeFunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeFunctionParameterClause() (localctx ITypeFunctionParameterClauseContext) {
	localctx = NewTypeFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, FeelParserRULE_typeFunctionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(FeelParserLeft_Paren-37))|(1<<(FeelParserLeft_Brack-37))|(1<<(FeelParserQuestion-37))|(1<<(FeelParserTypeI8-37))|(1<<(FeelParserTypeU8-37))|(1<<(FeelParserTypeI16-37))|(1<<(FeelParserTypeU16-37))|(1<<(FeelParserTypeI32-37))|(1<<(FeelParserTypeU32-37))|(1<<(FeelParserTypeI64-37))|(1<<(FeelParserTypeU64-37))|(1<<(FeelParserTypeF32-37))|(1<<(FeelParserTypeF64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(FeelParserTypeChr-69))|(1<<(FeelParserTypeStr-69))|(1<<(FeelParserTypeBool-69))|(1<<(FeelParserTypeInt-69))|(1<<(FeelParserTypeNum-69))|(1<<(FeelParserTypeByte-69))|(1<<(FeelParserTypeAny-69))|(1<<(FeelParserIDPrivate-69))|(1<<(FeelParserIDPublic-69)))) != 0) {
		{
			p.SetState(2327)
			p.TypeType()
		}

	}
	p.SetState(2335)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserComma {
		{
			p.SetState(2330)
			p.More()
		}
		{
			p.SetState(2331)
			p.TypeType()
		}

		p.SetState(2337)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeBasicContext is an interface to support dynamic dispatch.
type ITypeBasicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsTypeBasicContext differentiates from other interfaces.
	IsTypeBasicContext()
}

type TypeBasicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyTypeBasicContext() *TypeBasicContext {
	var p = new(TypeBasicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_typeBasic
	return p
}

func (*TypeBasicContext) IsTypeBasicContext() {}

func NewTypeBasicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeBasicContext {
	var p = new(TypeBasicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_typeBasic

	return p
}

func (s *TypeBasicContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeBasicContext) GetT() antlr.Token { return s.t }

func (s *TypeBasicContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeBasicContext) TypeI8() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeI8, 0)
}

func (s *TypeBasicContext) TypeU8() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeU8, 0)
}

func (s *TypeBasicContext) TypeI16() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeI16, 0)
}

func (s *TypeBasicContext) TypeU16() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeU16, 0)
}

func (s *TypeBasicContext) TypeI32() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeI32, 0)
}

func (s *TypeBasicContext) TypeU32() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeU32, 0)
}

func (s *TypeBasicContext) TypeI64() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeI64, 0)
}

func (s *TypeBasicContext) TypeU64() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeU64, 0)
}

func (s *TypeBasicContext) TypeF32() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeF32, 0)
}

func (s *TypeBasicContext) TypeF64() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeF64, 0)
}

func (s *TypeBasicContext) TypeChr() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeChr, 0)
}

func (s *TypeBasicContext) TypeStr() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeStr, 0)
}

func (s *TypeBasicContext) TypeBool() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeBool, 0)
}

func (s *TypeBasicContext) TypeInt() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeInt, 0)
}

func (s *TypeBasicContext) TypeNum() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeNum, 0)
}

func (s *TypeBasicContext) TypeByte() antlr.TerminalNode {
	return s.GetToken(FeelParserTypeByte, 0)
}

func (s *TypeBasicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeBasicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeBasicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitTypeBasic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) TypeBasic() (localctx ITypeBasicContext) {
	localctx = NewTypeBasicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, FeelParserRULE_typeBasic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2354)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTypeI8:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2338)

			var _m = p.Match(FeelParserTypeI8)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeU8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2339)

			var _m = p.Match(FeelParserTypeU8)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeI16:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2340)

			var _m = p.Match(FeelParserTypeI16)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeU16:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2341)

			var _m = p.Match(FeelParserTypeU16)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeI32:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2342)

			var _m = p.Match(FeelParserTypeI32)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeU32:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2343)

			var _m = p.Match(FeelParserTypeU32)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeI64:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2344)

			var _m = p.Match(FeelParserTypeI64)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeU64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2345)

			var _m = p.Match(FeelParserTypeU64)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeF32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2346)

			var _m = p.Match(FeelParserTypeF32)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeF64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2347)

			var _m = p.Match(FeelParserTypeF64)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeChr:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2348)

			var _m = p.Match(FeelParserTypeChr)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeStr:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2349)

			var _m = p.Match(FeelParserTypeStr)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeBool:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2350)

			var _m = p.Match(FeelParserTypeBool)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeInt:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2351)

			var _m = p.Match(FeelParserTypeInt)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeNum:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2352)

			var _m = p.Match(FeelParserTypeNum)

			localctx.(*TypeBasicContext).t = _m
		}

	case FeelParserTypeByte:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2353)

			var _m = p.Match(FeelParserTypeByte)

			localctx.(*TypeBasicContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INilExprContext is an interface to support dynamic dispatch.
type INilExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNilExprContext differentiates from other interfaces.
	IsNilExprContext()
}

type NilExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNilExprContext() *NilExprContext {
	var p = new(NilExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_nilExpr
	return p
}

func (*NilExprContext) IsNilExprContext() {}

func NewNilExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NilExprContext {
	var p = new(NilExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_nilExpr

	return p
}

func (s *NilExprContext) GetParser() antlr.Parser { return s.parser }

func (s *NilExprContext) NilLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserNilLiteral, 0)
}

func (s *NilExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NilExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NilExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitNilExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) NilExpr() (localctx INilExprContext) {
	localctx = NewNilExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, FeelParserRULE_nilExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2356)
		p.Match(FeelParserNilLiteral)
	}

	return localctx
}

// IBoolExprContext is an interface to support dynamic dispatch.
type IBoolExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsBoolExprContext differentiates from other interfaces.
	IsBoolExprContext()
}

type BoolExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyBoolExprContext() *BoolExprContext {
	var p = new(BoolExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_boolExpr
	return p
}

func (*BoolExprContext) IsBoolExprContext() {}

func NewBoolExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolExprContext {
	var p = new(BoolExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_boolExpr

	return p
}

func (s *BoolExprContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolExprContext) GetT() antlr.Token { return s.t }

func (s *BoolExprContext) SetT(v antlr.Token) { s.t = v }

func (s *BoolExprContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserTrueLiteral, 0)
}

func (s *BoolExprContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(FeelParserFalseLiteral, 0)
}

func (s *BoolExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBoolExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BoolExpr() (localctx IBoolExprContext) {
	localctx = NewBoolExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, FeelParserRULE_boolExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2360)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserTrueLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2358)

			var _m = p.Match(FeelParserTrueLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	case FeelParserFalseLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2359)

			var _m = p.Match(FeelParserFalseLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBitwiseContext is an interface to support dynamic dispatch.
type IBitwiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseContext differentiates from other interfaces.
	IsBitwiseContext()
}

type BitwiseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseContext() *BitwiseContext {
	var p = new(BitwiseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwise
	return p
}

func (*BitwiseContext) IsBitwiseContext() {}

func NewBitwiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseContext {
	var p = new(BitwiseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwise

	return p
}

func (s *BitwiseContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseContext) BitwiseAnd() IBitwiseAndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseAndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseAndContext)
}

func (s *BitwiseContext) BitwiseOr() IBitwiseOrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseOrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseOrContext)
}

func (s *BitwiseContext) BitwiseXor() IBitwiseXorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXorContext)
}

func (s *BitwiseContext) BitwiseLeftShift() IBitwiseLeftShiftContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseLeftShiftContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseLeftShiftContext)
}

func (s *BitwiseContext) BitwiseRightShift() IBitwiseRightShiftContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseRightShiftContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseRightShiftContext)
}

func (s *BitwiseContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *BitwiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwise(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Bitwise() (localctx IBitwiseContext) {
	localctx = NewBitwiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, FeelParserRULE_bitwise)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2367)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserAnd_And:
		{
			p.SetState(2362)
			p.BitwiseAnd()
		}

	case FeelParserOr_Or:
		{
			p.SetState(2363)
			p.BitwiseOr()
		}

	case FeelParserCaret_Caret:
		{
			p.SetState(2364)
			p.BitwiseXor()
		}

	case FeelParserLess_Less:
		{
			p.SetState(2365)
			p.BitwiseLeftShift()
		}

	case FeelParserGreater_Greater:
		{
			p.SetState(2366)
			p.BitwiseRightShift()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2370)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2369)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IBitwiseAndContext is an interface to support dynamic dispatch.
type IBitwiseAndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseAndContext differentiates from other interfaces.
	IsBitwiseAndContext()
}

type BitwiseAndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseAndContext() *BitwiseAndContext {
	var p = new(BitwiseAndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseAnd
	return p
}

func (*BitwiseAndContext) IsBitwiseAndContext() {}

func NewBitwiseAndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseAndContext {
	var p = new(BitwiseAndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseAnd

	return p
}

func (s *BitwiseAndContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseAndContext) And_And() antlr.TerminalNode {
	return s.GetToken(FeelParserAnd_And, 0)
}

func (s *BitwiseAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseAndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseAnd() (localctx IBitwiseAndContext) {
	localctx = NewBitwiseAndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, FeelParserRULE_bitwiseAnd)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2372)
		p.Match(FeelParserAnd_And)
	}

	return localctx
}

// IBitwiseOrContext is an interface to support dynamic dispatch.
type IBitwiseOrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseOrContext differentiates from other interfaces.
	IsBitwiseOrContext()
}

type BitwiseOrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseOrContext() *BitwiseOrContext {
	var p = new(BitwiseOrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseOr
	return p
}

func (*BitwiseOrContext) IsBitwiseOrContext() {}

func NewBitwiseOrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseOrContext {
	var p = new(BitwiseOrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseOr

	return p
}

func (s *BitwiseOrContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseOrContext) Or_Or() antlr.TerminalNode {
	return s.GetToken(FeelParserOr_Or, 0)
}

func (s *BitwiseOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseOrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseOr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseOr() (localctx IBitwiseOrContext) {
	localctx = NewBitwiseOrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, FeelParserRULE_bitwiseOr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2374)
		p.Match(FeelParserOr_Or)
	}

	return localctx
}

// IBitwiseNotContext is an interface to support dynamic dispatch.
type IBitwiseNotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseNotContext differentiates from other interfaces.
	IsBitwiseNotContext()
}

type BitwiseNotContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseNotContext() *BitwiseNotContext {
	var p = new(BitwiseNotContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseNot
	return p
}

func (*BitwiseNotContext) IsBitwiseNotContext() {}

func NewBitwiseNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseNotContext {
	var p = new(BitwiseNotContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseNot

	return p
}

func (s *BitwiseNotContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseNotContext) Tilde_Tilde() antlr.TerminalNode {
	return s.GetToken(FeelParserTilde_Tilde, 0)
}

func (s *BitwiseNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseNotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseNot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseNot() (localctx IBitwiseNotContext) {
	localctx = NewBitwiseNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, FeelParserRULE_bitwiseNot)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2376)
		p.Match(FeelParserTilde_Tilde)
	}

	return localctx
}

// IBitwiseXorContext is an interface to support dynamic dispatch.
type IBitwiseXorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXorContext differentiates from other interfaces.
	IsBitwiseXorContext()
}

type BitwiseXorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXorContext() *BitwiseXorContext {
	var p = new(BitwiseXorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseXor
	return p
}

func (*BitwiseXorContext) IsBitwiseXorContext() {}

func NewBitwiseXorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXorContext {
	var p = new(BitwiseXorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseXor

	return p
}

func (s *BitwiseXorContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXorContext) Caret_Caret() antlr.TerminalNode {
	return s.GetToken(FeelParserCaret_Caret, 0)
}

func (s *BitwiseXorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseXor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseXor() (localctx IBitwiseXorContext) {
	localctx = NewBitwiseXorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, FeelParserRULE_bitwiseXor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2378)
		p.Match(FeelParserCaret_Caret)
	}

	return localctx
}

// IBitwiseLeftShiftContext is an interface to support dynamic dispatch.
type IBitwiseLeftShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseLeftShiftContext differentiates from other interfaces.
	IsBitwiseLeftShiftContext()
}

type BitwiseLeftShiftContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseLeftShiftContext() *BitwiseLeftShiftContext {
	var p = new(BitwiseLeftShiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseLeftShift
	return p
}

func (*BitwiseLeftShiftContext) IsBitwiseLeftShiftContext() {}

func NewBitwiseLeftShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseLeftShiftContext {
	var p = new(BitwiseLeftShiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseLeftShift

	return p
}

func (s *BitwiseLeftShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseLeftShiftContext) Less_Less() antlr.TerminalNode {
	return s.GetToken(FeelParserLess_Less, 0)
}

func (s *BitwiseLeftShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseLeftShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseLeftShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseLeftShift(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseLeftShift() (localctx IBitwiseLeftShiftContext) {
	localctx = NewBitwiseLeftShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, FeelParserRULE_bitwiseLeftShift)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2380)
		p.Match(FeelParserLess_Less)
	}

	return localctx
}

// IBitwiseRightShiftContext is an interface to support dynamic dispatch.
type IBitwiseRightShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseRightShiftContext differentiates from other interfaces.
	IsBitwiseRightShiftContext()
}

type BitwiseRightShiftContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseRightShiftContext() *BitwiseRightShiftContext {
	var p = new(BitwiseRightShiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_bitwiseRightShift
	return p
}

func (*BitwiseRightShiftContext) IsBitwiseRightShiftContext() {}

func NewBitwiseRightShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseRightShiftContext {
	var p = new(BitwiseRightShiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_bitwiseRightShift

	return p
}

func (s *BitwiseRightShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseRightShiftContext) Greater_Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserGreater_Greater, 0)
}

func (s *BitwiseRightShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseRightShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseRightShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitBitwiseRightShift(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) BitwiseRightShift() (localctx IBitwiseRightShiftContext) {
	localctx = NewBitwiseRightShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, FeelParserRULE_bitwiseRightShift)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2382)
		p.Match(FeelParserGreater_Greater)
	}

	return localctx
}

// ICompareCombineContext is an interface to support dynamic dispatch.
type ICompareCombineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompareCombineContext differentiates from other interfaces.
	IsCompareCombineContext()
}

type CompareCombineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompareCombineContext() *CompareCombineContext {
	var p = new(CompareCombineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_compareCombine
	return p
}

func (*CompareCombineContext) IsCompareCombineContext() {}

func NewCompareCombineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompareCombineContext {
	var p = new(CompareCombineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_compareCombine

	return p
}

func (s *CompareCombineContext) GetParser() antlr.Parser { return s.parser }

func (s *CompareCombineContext) Combine_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserCombine_Equal, 0)
}

func (s *CompareCombineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompareCombineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompareCombineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCompareCombine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) CompareCombine() (localctx ICompareCombineContext) {
	localctx = NewCompareCombineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, FeelParserRULE_compareCombine)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2384)
		p.Match(FeelParserCombine_Equal)
	}

	return localctx
}

// ICompareContext is an interface to support dynamic dispatch.
type ICompareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCompareContext differentiates from other interfaces.
	IsCompareContext()
}

type CompareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCompareContext() *CompareContext {
	var p = new(CompareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_compare
	return p
}

func (*CompareContext) IsCompareContext() {}

func NewCompareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompareContext {
	var p = new(CompareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_compare

	return p
}

func (s *CompareContext) GetParser() antlr.Parser { return s.parser }

func (s *CompareContext) GetOp() antlr.Token { return s.op }

func (s *CompareContext) SetOp(v antlr.Token) { s.op = v }

func (s *CompareContext) Equal_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserEqual_Equal, 0)
}

func (s *CompareContext) Not_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserNot_Equal, 0)
}

func (s *CompareContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserLess_Equal, 0)
}

func (s *CompareContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserGreater_Equal, 0)
}

func (s *CompareContext) Less() antlr.TerminalNode {
	return s.GetToken(FeelParserLess, 0)
}

func (s *CompareContext) Greater() antlr.TerminalNode {
	return s.GetToken(FeelParserGreater, 0)
}

func (s *CompareContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *CompareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCompare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Compare() (localctx ICompareContext) {
	localctx = NewCompareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, FeelParserRULE_compare)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2386)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*CompareContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-8)&-(0x1f+1)) == 0 && ((1<<uint((_la-8)))&((1<<(FeelParserEqual_Equal-8))|(1<<(FeelParserLess_Equal-8))|(1<<(FeelParserGreater_Equal-8))|(1<<(FeelParserNot_Equal-8))|(1<<(FeelParserLess-8))|(1<<(FeelParserGreater-8)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*CompareContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2388)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2387)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// ILogicContext is an interface to support dynamic dispatch.
type ILogicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsLogicContext differentiates from other interfaces.
	IsLogicContext()
}

type LogicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyLogicContext() *LogicContext {
	var p = new(LogicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_logic
	return p
}

func (*LogicContext) IsLogicContext() {}

func NewLogicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicContext {
	var p = new(LogicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_logic

	return p
}

func (s *LogicContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicContext) GetOp() antlr.Token { return s.op }

func (s *LogicContext) SetOp(v antlr.Token) { s.op = v }

func (s *LogicContext) And() antlr.TerminalNode {
	return s.GetToken(FeelParserAnd, 0)
}

func (s *LogicContext) Or() antlr.TerminalNode {
	return s.GetToken(FeelParserOr, 0)
}

func (s *LogicContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *LogicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLogic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Logic() (localctx ILogicContext) {
	localctx = NewLogicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, FeelParserRULE_logic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2390)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LogicContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserAnd || _la == FeelParserOr) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LogicContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2391)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IAssignContext is an interface to support dynamic dispatch.
type IAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAssignContext differentiates from other interfaces.
	IsAssignContext()
}

type AssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAssignContext() *AssignContext {
	var p = new(AssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_assign
	return p
}

func (*AssignContext) IsAssignContext() {}

func NewAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignContext {
	var p = new(AssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_assign

	return p
}

func (s *AssignContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignContext) GetOp() antlr.Token { return s.op }

func (s *AssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignContext) Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserEqual, 0)
}

func (s *AssignContext) Add_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserAdd_Equal, 0)
}

func (s *AssignContext) Sub_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserSub_Equal, 0)
}

func (s *AssignContext) Mul_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserMul_Equal, 0)
}

func (s *AssignContext) Div_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserDiv_Equal, 0)
}

func (s *AssignContext) Mod_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserMod_Equal, 0)
}

func (s *AssignContext) Pow_Equal() antlr.TerminalNode {
	return s.GetToken(FeelParserPow_Equal, 0)
}

func (s *AssignContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *AssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Assign() (localctx IAssignContext) {
	localctx = NewAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, FeelParserRULE_assign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2394)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AssignContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<FeelParserAdd_Equal)|(1<<FeelParserSub_Equal)|(1<<FeelParserMul_Equal)|(1<<FeelParserDiv_Equal)|(1<<FeelParserMod_Equal)|(1<<FeelParserPow_Equal)|(1<<FeelParserEqual))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AssignContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2396)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2395)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IAddContext is an interface to support dynamic dispatch.
type IAddContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAddContext differentiates from other interfaces.
	IsAddContext()
}

type AddContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAddContext() *AddContext {
	var p = new(AddContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_add
	return p
}

func (*AddContext) IsAddContext() {}

func NewAddContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddContext {
	var p = new(AddContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_add

	return p
}

func (s *AddContext) GetParser() antlr.Parser { return s.parser }

func (s *AddContext) GetOp() antlr.Token { return s.op }

func (s *AddContext) SetOp(v antlr.Token) { s.op = v }

func (s *AddContext) Add() antlr.TerminalNode {
	return s.GetToken(FeelParserAdd, 0)
}

func (s *AddContext) Sub() antlr.TerminalNode {
	return s.GetToken(FeelParserSub, 0)
}

func (s *AddContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitAdd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Add() (localctx IAddContext) {
	localctx = NewAddContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, FeelParserRULE_add)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2398)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AddContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserAdd || _la == FeelParserSub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AddContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2399)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IMulContext is an interface to support dynamic dispatch.
type IMulContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsMulContext differentiates from other interfaces.
	IsMulContext()
}

type MulContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyMulContext() *MulContext {
	var p = new(MulContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_mul
	return p
}

func (*MulContext) IsMulContext() {}

func NewMulContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MulContext {
	var p = new(MulContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_mul

	return p
}

func (s *MulContext) GetParser() antlr.Parser { return s.parser }

func (s *MulContext) GetOp() antlr.Token { return s.op }

func (s *MulContext) SetOp(v antlr.Token) { s.op = v }

func (s *MulContext) Mul() antlr.TerminalNode {
	return s.GetToken(FeelParserMul, 0)
}

func (s *MulContext) Div() antlr.TerminalNode {
	return s.GetToken(FeelParserDiv, 0)
}

func (s *MulContext) Mod() antlr.TerminalNode {
	return s.GetToken(FeelParserMod, 0)
}

func (s *MulContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MulContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitMul(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Mul() (localctx IMulContext) {
	localctx = NewMulContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, FeelParserRULE_mul)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2402)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MulContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-51)&-(0x1f+1)) == 0 && ((1<<uint((_la-51)))&((1<<(FeelParserMul-51))|(1<<(FeelParserDiv-51))|(1<<(FeelParserMod-51)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MulContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2404)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2403)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IPowContext is an interface to support dynamic dispatch.
type IPowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPowContext differentiates from other interfaces.
	IsPowContext()
}

type PowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPowContext() *PowContext {
	var p = new(PowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_pow
	return p
}

func (*PowContext) IsPowContext() {}

func NewPowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PowContext {
	var p = new(PowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_pow

	return p
}

func (s *PowContext) GetParser() antlr.Parser { return s.parser }

func (s *PowContext) Caret() antlr.TerminalNode {
	return s.GetToken(FeelParserCaret, 0)
}

func (s *PowContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *PowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitPow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Pow() (localctx IPowContext) {
	localctx = NewPowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, FeelParserRULE_pow)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2406)
		p.Match(FeelParserCaret)
	}
	p.SetState(2408)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == FeelParserNew_Line {
		{
			p.SetState(2407)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) GetOp() antlr.Token { return s.op }

func (s *CallContext) SetOp(v antlr.Token) { s.op = v }

func (s *CallContext) Dot() antlr.TerminalNode {
	return s.GetToken(FeelParserDot, 0)
}

func (s *CallContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Call() (localctx ICallContext) {
	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, FeelParserRULE_call)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2410)

		var _m = p.Match(FeelParserDot)

		localctx.(*CallContext).op = _m
	}
	p.SetState(2412)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 275, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2411)
			p.Match(FeelParserNew_Line)
		}

	}

	return localctx
}

// IWaveContext is an interface to support dynamic dispatch.
type IWaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsWaveContext differentiates from other interfaces.
	IsWaveContext()
}

type WaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyWaveContext() *WaveContext {
	var p = new(WaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_wave
	return p
}

func (*WaveContext) IsWaveContext() {}

func NewWaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WaveContext {
	var p = new(WaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_wave

	return p
}

func (s *WaveContext) GetParser() antlr.Parser { return s.parser }

func (s *WaveContext) GetOp() antlr.Token { return s.op }

func (s *WaveContext) SetOp(v antlr.Token) { s.op = v }

func (s *WaveContext) Tilde() antlr.TerminalNode {
	return s.GetToken(FeelParserTilde, 0)
}

func (s *WaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitWave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Wave() (localctx IWaveContext) {
	localctx = NewWaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, FeelParserRULE_wave)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2414)

		var _m = p.Match(FeelParserTilde)

		localctx.(*WaveContext).op = _m
	}

	return localctx
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_id
	return p
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) IdItem() IIdItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdItemContext)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, FeelParserRULE_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2416)
		p.IdItem()
	}

	return localctx
}

// IIdItemContext is an interface to support dynamic dispatch.
type IIdItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIdItemContext differentiates from other interfaces.
	IsIdItemContext()
}

type IdItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIdItemContext() *IdItemContext {
	var p = new(IdItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_idItem
	return p
}

func (*IdItemContext) IsIdItemContext() {}

func NewIdItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdItemContext {
	var p = new(IdItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_idItem

	return p
}

func (s *IdItemContext) GetParser() antlr.Parser { return s.parser }

func (s *IdItemContext) GetOp() antlr.Token { return s.op }

func (s *IdItemContext) SetOp(v antlr.Token) { s.op = v }

func (s *IdItemContext) IDPublic() antlr.TerminalNode {
	return s.GetToken(FeelParserIDPublic, 0)
}

func (s *IdItemContext) IDPrivate() antlr.TerminalNode {
	return s.GetToken(FeelParserIDPrivate, 0)
}

func (s *IdItemContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *IdItemContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *IdItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitIdItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) IdItem() (localctx IIdItemContext) {
	localctx = NewIdItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, FeelParserRULE_idItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2421)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case FeelParserIDPrivate, FeelParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2418)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IdItemContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == FeelParserIDPrivate || _la == FeelParserIDPublic) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IdItemContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case FeelParserTypeI8, FeelParserTypeU8, FeelParserTypeI16, FeelParserTypeU16, FeelParserTypeI32, FeelParserTypeU32, FeelParserTypeI64, FeelParserTypeU64, FeelParserTypeF32, FeelParserTypeF64, FeelParserTypeChr, FeelParserTypeStr, FeelParserTypeBool, FeelParserTypeInt, FeelParserTypeNum, FeelParserTypeByte:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2419)
			p.TypeBasic()
		}

	case FeelParserTypeAny:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2420)
			p.TypeAny()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEndContext is an interface to support dynamic dispatch.
type IEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEndContext differentiates from other interfaces.
	IsEndContext()
}

type EndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEndContext() *EndContext {
	var p = new(EndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_end
	return p
}

func (*EndContext) IsEndContext() {}

func NewEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EndContext {
	var p = new(EndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_end

	return p
}

func (s *EndContext) GetParser() antlr.Parser { return s.parser }

func (s *EndContext) Semi() antlr.TerminalNode {
	return s.GetToken(FeelParserSemi, 0)
}

func (s *EndContext) New_Line() antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, 0)
}

func (s *EndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) End() (localctx IEndContext) {
	localctx = NewEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, FeelParserRULE_end)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2423)
		_la = p.GetTokenStream().LA(1)

		if !(_la == FeelParserSemi || _la == FeelParserNew_Line) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMoreContext is an interface to support dynamic dispatch.
type IMoreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMoreContext differentiates from other interfaces.
	IsMoreContext()
}

type MoreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMoreContext() *MoreContext {
	var p = new(MoreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_more
	return p
}

func (*MoreContext) IsMoreContext() {}

func NewMoreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MoreContext {
	var p = new(MoreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_more

	return p
}

func (s *MoreContext) GetParser() antlr.Parser { return s.parser }

func (s *MoreContext) Comma() antlr.TerminalNode {
	return s.GetToken(FeelParserComma, 0)
}

func (s *MoreContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *MoreContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *MoreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MoreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MoreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitMore(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) More() (localctx IMoreContext) {
	localctx = NewMoreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, FeelParserRULE_more)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2425)
		p.Match(FeelParserComma)
	}
	p.SetState(2429)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(2426)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(2431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILeft_braceContext is an interface to support dynamic dispatch.
type ILeft_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_braceContext differentiates from other interfaces.
	IsLeft_braceContext()
}

type Left_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_braceContext() *Left_braceContext {
	var p = new(Left_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_left_brace
	return p
}

func (*Left_braceContext) IsLeft_braceContext() {}

func NewLeft_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_braceContext {
	var p = new(Left_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_left_brace

	return p
}

func (s *Left_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_braceContext) Left_Brace() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Brace, 0)
}

func (s *Left_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *Left_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *Left_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLeft_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Left_brace() (localctx ILeft_braceContext) {
	localctx = NewLeft_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, FeelParserRULE_left_brace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2432)
		p.Match(FeelParserLeft_Brace)
	}
	p.SetState(2436)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2433)
				p.Match(FeelParserNew_Line)
			}

		}
		p.SetState(2438)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_braceContext is an interface to support dynamic dispatch.
type IRight_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_braceContext differentiates from other interfaces.
	IsRight_braceContext()
}

type Right_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_braceContext() *Right_braceContext {
	var p = new(Right_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_right_brace
	return p
}

func (*Right_braceContext) IsRight_braceContext() {}

func NewRight_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_braceContext {
	var p = new(Right_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_right_brace

	return p
}

func (s *Right_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_braceContext) Right_Brace() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Brace, 0)
}

func (s *Right_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *Right_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *Right_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitRight_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Right_brace() (localctx IRight_braceContext) {
	localctx = NewRight_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, FeelParserRULE_right_brace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(2439)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(2444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2445)
		p.Match(FeelParserRight_Brace)
	}

	return localctx
}

// ILeft_parenContext is an interface to support dynamic dispatch.
type ILeft_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_parenContext differentiates from other interfaces.
	IsLeft_parenContext()
}

type Left_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_parenContext() *Left_parenContext {
	var p = new(Left_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_left_paren
	return p
}

func (*Left_parenContext) IsLeft_parenContext() {}

func NewLeft_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_parenContext {
	var p = new(Left_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_left_paren

	return p
}

func (s *Left_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_parenContext) Left_Paren() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Paren, 0)
}

func (s *Left_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLeft_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Left_paren() (localctx ILeft_parenContext) {
	localctx = NewLeft_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, FeelParserRULE_left_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2447)
		p.Match(FeelParserLeft_Paren)
	}

	return localctx
}

// IRight_parenContext is an interface to support dynamic dispatch.
type IRight_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_parenContext differentiates from other interfaces.
	IsRight_parenContext()
}

type Right_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_parenContext() *Right_parenContext {
	var p = new(Right_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_right_paren
	return p
}

func (*Right_parenContext) IsRight_parenContext() {}

func NewRight_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_parenContext {
	var p = new(Right_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_right_paren

	return p
}

func (s *Right_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_parenContext) Right_Paren() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Paren, 0)
}

func (s *Right_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitRight_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Right_paren() (localctx IRight_parenContext) {
	localctx = NewRight_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, FeelParserRULE_right_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2449)
		p.Match(FeelParserRight_Paren)
	}

	return localctx
}

// ILeft_brackContext is an interface to support dynamic dispatch.
type ILeft_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_brackContext differentiates from other interfaces.
	IsLeft_brackContext()
}

type Left_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_brackContext() *Left_brackContext {
	var p = new(Left_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_left_brack
	return p
}

func (*Left_brackContext) IsLeft_brackContext() {}

func NewLeft_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_brackContext {
	var p = new(Left_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_left_brack

	return p
}

func (s *Left_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_brackContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(FeelParserLeft_Brack, 0)
}

func (s *Left_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *Left_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *Left_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitLeft_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Left_brack() (localctx ILeft_brackContext) {
	localctx = NewLeft_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, FeelParserRULE_left_brack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2451)
		p.Match(FeelParserLeft_Brack)
	}
	p.SetState(2455)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2452)
				p.Match(FeelParserNew_Line)
			}

		}
		p.SetState(2457)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 280, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_brackContext is an interface to support dynamic dispatch.
type IRight_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_brackContext differentiates from other interfaces.
	IsRight_brackContext()
}

type Right_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_brackContext() *Right_brackContext {
	var p = new(Right_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = FeelParserRULE_right_brack
	return p
}

func (*Right_brackContext) IsRight_brackContext() {}

func NewRight_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_brackContext {
	var p = new(Right_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = FeelParserRULE_right_brack

	return p
}

func (s *Right_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_brackContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(FeelParserRight_Brack, 0)
}

func (s *Right_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(FeelParserNew_Line)
}

func (s *Right_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(FeelParserNew_Line, i)
}

func (s *Right_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case FeelParserVisitor:
		return t.VisitRight_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *FeelParser) Right_brack() (localctx IRight_brackContext) {
	localctx = NewRight_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, FeelParserRULE_right_brack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == FeelParserNew_Line {
		{
			p.SetState(2458)
			p.Match(FeelParserNew_Line)
		}

		p.SetState(2463)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2464)
		p.Match(FeelParserRight_Brack)
	}

	return localctx
}

func (p *FeelParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 77:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *FeelParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
